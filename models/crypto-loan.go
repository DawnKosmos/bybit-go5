// Code generated by bybitgen; DO NOT EDIT.
package models

// GET /v5/crypto-loan/adjustment-history
type GetCryptoLoanAdjustmentHistoryRequest struct {
	OrderId string `url:"orderId,omitempty"` // Loan order ID
	AdjustId string `url:"adjustId,omitempty"` // Collateral adjustment transaction ID
	CollateralCurrency string `url:"collateralCurrency,omitempty"` // Collateral coin name
	Limit string `url:"limit,omitempty"` // Limit for data size per page. [`1`, `100`]. Default: `10`
	Cursor string `url:"cursor,omitempty"` // Cursor. Use the `nextPageCursor` token from the response to retrieve the next page of the result set
}

type GetCryptoLoanAdjustmentHistoryResponse struct {
	// TODO: fill in response fields parsed from docs
}

// GET /v5/crypto-loan/borrow-history
type GetCryptoLoanBorrowHistoryRequest struct {
	OrderId string `url:"orderId,omitempty"` // Loan order ID
	LoanCurrency string `url:"loanCurrency,omitempty"` // Loan coin name
	CollateralCurrency string `url:"collateralCurrency,omitempty"` // Collateral coin name
	Limit string `url:"limit,omitempty"` // Limit for data size per page. [`1`, `100`]. Default: `10`
	Cursor string `url:"cursor,omitempty"` // Cursor. Use the `nextPageCursor` token from the response to retrieve the next page of the result set
}

type GetCryptoLoanBorrowHistoryResponse struct {
	// TODO: fill in response fields parsed from docs
}

// GET /v5/crypto-loan/borrowable-collateralisable-number
type GetCryptoLoanBorrowableCollateralisableNumberRequest struct {
	LoanCurrency string `url:"loanCurrency"` // Loan coin name
	CollateralCurrency string `url:"collateralCurrency"` // Collateral coin name
}

type GetCryptoLoanBorrowableCollateralisableNumberResponse struct {
	// TODO: fill in response fields parsed from docs
}

// GET /v5/crypto-loan/collateral-data
type GetCryptoLoanCollateralDataRequest struct {
	VipLevel string `url:"vipLevel,omitempty"` // Vip level `VIP0`, `VIP1`, `VIP2`, `VIP3`, `VIP4`, `VIP5`, `VIP99`(supreme VIP) `PRO1`, `PRO2`, `PRO3`, `PRO4`, `PRO5`, `PRO6`
	Currency string `url:"currency,omitempty"` // Coin name, uppercase only
}

type GetCryptoLoanCollateralDataResponse struct {
	// TODO: fill in response fields parsed from docs
}

// GET /v5/crypto-loan/loanable-data
type GetCryptoLoanLoanableDataRequest struct {
	VipLevel string `url:"vipLevel,omitempty"` // Vip level `VIP0`, `VIP1`, `VIP2`, `VIP3`, `VIP4`, `VIP5`, `VIP99`(supreme VIP) `PRO1`, `PRO2`, `PRO3`, `PRO4`, `PRO5`, `PRO6`
	Currency string `url:"currency,omitempty"` // Coin name, uppercase only
}

type GetCryptoLoanLoanableDataResponse struct {
	// TODO: fill in response fields parsed from docs
}

// GET /v5/crypto-loan/max-collateral-amount
type GetCryptoLoanMaxCollateralAmountRequest struct {
	OrderId string `url:"orderId"` // Loan coin ID
}

type GetCryptoLoanMaxCollateralAmountResponse struct {
	// TODO: fill in response fields parsed from docs
}

// GET /v5/crypto-loan/ongoing-orders
type GetCryptoLoanOngoingOrdersRequest struct {
	OrderId string `url:"orderId,omitempty"` // Loan order ID
	LoanCurrency string `url:"loanCurrency,omitempty"` // Loan coin name
	CollateralCurrency string `url:"collateralCurrency,omitempty"` // Collateral coin name
	LoanTermType string `url:"loanTermType,omitempty"` // `1`: fixed term, when query this type, `loanTerm` must be filled `2`: flexible term By default, query all types
	LoanTerm string `url:"loanTerm,omitempty"` // `7`, `14`, `30`, `90`, `180` days, working when `loanTermType`=1
	Limit string `url:"limit,omitempty"` // Limit for data size per page. [`1`, `100`]. Default: `10`
	Cursor string `url:"cursor,omitempty"` // Cursor. Use the `nextPageCursor` token from the response to retrieve the next page of the result set
}

type GetCryptoLoanOngoingOrdersResponse struct {
	// TODO: fill in response fields parsed from docs
}

// GET /v5/crypto-loan/repayment-history
type GetCryptoLoanRepaymentHistoryRequest struct {
	OrderId string `url:"orderId,omitempty"` // Loan order ID
	RepayId string `url:"repayId,omitempty"` // Repayment tranaction ID
	LoanCurrency string `url:"loanCurrency,omitempty"` // Loan coin name
	Limit string `url:"limit,omitempty"` // Limit for data size per page. [`1`, `100`]. Default: `10`
	Cursor string `url:"cursor,omitempty"` // Cursor. Use the `nextPageCursor` token from the response to retrieve the next page of the result set
}

type GetCryptoLoanRepaymentHistoryResponse struct {
	// TODO: fill in response fields parsed from docs
}

// POST /v5/crypto-loan/adjust-ltv
type PostCryptoLoanAdjustLtvRequest struct {
	OrderId string `json:"orderId"` // Loan order ID
	Amount string `json:"amount"` // Adjustment amount
	Direction string `json:"direction"` // `0`: add collateral; `1`: reduce collateral
}

type PostCryptoLoanAdjustLtvResponse struct {
	// TODO: fill in response fields parsed from docs
}

// POST /v5/crypto-loan/borrow
type PostCryptoLoanBorrowRequest struct {
	LoanCurrency string `json:"loanCurrency"` // Loan coin name
	LoanAmount string `json:"loanAmount,omitempty"` // Amount to borrow **Required** when collateral amount is not filled
	LoanTerm string `json:"loanTerm,omitempty"` // Loan term flexible term: `null` or not passed fixed term: `7`, `14`, `30`, `90`, `180` days
	CollateralCurrency string `json:"collateralCurrency"` // Currency used to mortgage
	CollateralAmount string `json:"collateralAmount,omitempty"` // Amount to mortgage **Required** when loan amount is not filled
}

type PostCryptoLoanBorrowResponse struct {
	// TODO: fill in response fields parsed from docs
}

// POST /v5/crypto-loan/repay
type PostCryptoLoanRepayRequest struct {
	OrderId string `json:"orderId"` // Loan order ID
	Amount string `json:"amount"` // Repay amount
}

type PostCryptoLoanRepayResponse struct {
	// TODO: fill in response fields parsed from docs
}

