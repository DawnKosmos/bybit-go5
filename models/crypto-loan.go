// Code generated by bybitgen; DO NOT EDIT.
package models

// GET /v5/crypto-loan/adjustment-history
type GetCryptoLoanAdjustmentHistoryRequest struct {
	OrderId string `url:"orderId,omitempty"` // Loan order ID
	AdjustId string `url:"adjustId,omitempty"` // Collateral adjustment transaction ID
	CollateralCurrency string `url:"collateralCurrency,omitempty"` // Collateral coin name
	Limit string `url:"limit,omitempty"` // Limit for data size per page. [`1`, `100`]. Default: `10`
	Cursor string `url:"cursor,omitempty"` // Cursor. Use the `nextPageCursor` token from the response to retrieve the next page of the result set
}

type GetCryptoLoanAdjustmentHistoryResponse struct {
	List []struct {
		CollateralCurrency string `json:"collateralCurrency"` // Collateral coin
		OrderId string `json:"orderId"` // Loan order ID
		AdjustId string `json:"adjustId"` // Collateral adjustment transaction ID
		AdjustTime string `json:"adjustTime"` // Adjust timestamp
		PreLTV string `json:"preLTV"` // LTV before the adjustment
		AfterLTV string `json:"afterLTV"` // LTV after the adjustment
		Direction int64 `json:"direction"` // The direction of adjustment, `0`: add collateral; `1`: reduce collateral
	} `json:"list"`
	NextPageCursor string `json:"nextPageCursor"` // Refer to the `cursor` request parameter
}

// GET /v5/crypto-loan/borrow-history
type GetCryptoLoanBorrowHistoryRequest struct {
	OrderId string `url:"orderId,omitempty"` // Loan order ID
	LoanCurrency string `url:"loanCurrency,omitempty"` // Loan coin name
	CollateralCurrency string `url:"collateralCurrency,omitempty"` // Collateral coin name
	Limit string `url:"limit,omitempty"` // Limit for data size per page. [`1`, `100`]. Default: `10`
	Cursor string `url:"cursor,omitempty"` // Cursor. Use the `nextPageCursor` token from the response to retrieve the next page of the result set
}

type GetCryptoLoanBorrowHistoryResponse struct {
	List []struct {
		BorrowTime string `json:"borrowTime"` // The timestamp to borrow
		CollateralCurrency string `json:"collateralCurrency"` // Collateral coin
		ExpirationTime string `json:"expirationTime"` // Loan maturity time, keeps `""` for flexible loan
		HourlyInterestRate string `json:"hourlyInterestRate"` // Hourly interest rate Flexible loan, it is real-time interest rate Fixed term loan: it is fixed term interest rate
		InitialCollateralAmount string `json:"initialCollateralAmount"` // Initial amount to mortgage
		InitialLoanAmount string `json:"initialLoanAmount"` // Initial loan amount
		LoanCurrency string `json:"loanCurrency"` // Loan coin
		LoanTerm string `json:"loanTerm"` // Loan term, `7`, `14`, `30`, `90`, `180` days, keep `""` for flexible loan
		OrderId string `json:"orderId"` // Loan order ID
		RepaidInterest string `json:"repaidInterest"` // Total interest repaid
		RepaidPenaltyInterest string `json:"repaidPenaltyInterest"` // Total penalty interest repaid
		Status int64 `json:"status"` // Loan order status `1`: fully repaid manually; `2`: fully repaid by liquidation
	} `json:"list"`
	NextPageCursor string `json:"nextPageCursor"` // Refer to the `cursor` request parameter
}

// GET /v5/crypto-loan/borrowable-collateralisable-number
type GetCryptoLoanBorrowableCollateralisableNumberRequest struct {
	LoanCurrency string `url:"loanCurrency"` // Loan coin name
	CollateralCurrency string `url:"collateralCurrency"` // Collateral coin name
}

type GetCryptoLoanBorrowableCollateralisableNumberResponse struct {
	CollateralCurrency string `json:"collateralCurrency"` // Collateral coin name
	LoanCurrency string `json:"loanCurrency"` // Loan coin name
	MaxCollateralAmount string `json:"maxCollateralAmount"` // Max. limit to mortgage
	MaxLoanAmount string `json:"maxLoanAmount"` // Max. limit to borrow
	MinCollateralAmount string `json:"minCollateralAmount"` // Min. limit to mortgage
	MinLoanAmount string `json:"minLoanAmount"` // Min. limit to borrow
}

// GET /v5/crypto-loan/collateral-data
type GetCryptoLoanCollateralDataRequest struct {
	VipLevel string `url:"vipLevel,omitempty"` // Vip level `VIP0`, `VIP1`, `VIP2`, `VIP3`, `VIP4`, `VIP5`, `VIP99`(supreme VIP) `PRO1`, `PRO2`, `PRO3`, `PRO4`, `PRO5`, `PRO6`
	Currency string `url:"currency,omitempty"` // Coin name, uppercase only
}

type GetCryptoLoanCollateralDataResponse struct {
	VipCoinList []struct {
		List []struct {
			CollateralAccuracy int64 `json:"collateralAccuracy"` // Valid collateral coin precision
			InitialLTV string `json:"initialLTV"` // The Initial LTV ratio determines the initial amount of coins that can be borrowed. The initial LTV ratio may vary for different collateral
			MarginCallLTV string `json:"marginCallLTV"` // If the LTV ratio (Loan Amount/Collateral Amount) reaches the threshold, you will be required to add more collateral to your loan
			LiquidationLTV string `json:"liquidationLTV"` // If the LTV ratio (Loan Amount/Collateral Amount) reaches the threshold, Bybit will liquidate your collateral assets to repay your loan and interest in full
			MaxLimit string `json:"maxLimit"` // Collateral limit
		} `json:"list"`
		VipLevel string `json:"vipLevel"` // Vip level
	} `json:"vipCoinList"`
}

// GET /v5/crypto-loan/loanable-data
type GetCryptoLoanLoanableDataRequest struct {
	VipLevel string `url:"vipLevel,omitempty"` // Vip level `VIP0`, `VIP1`, `VIP2`, `VIP3`, `VIP4`, `VIP5`, `VIP99`(supreme VIP) `PRO1`, `PRO2`, `PRO3`, `PRO4`, `PRO5`, `PRO6`
	Currency string `url:"currency,omitempty"` // Coin name, uppercase only
}

type GetCryptoLoanLoanableDataResponse struct {
	VipCoinList []struct {
		List []struct {
			BorrowingAccuracy int64 `json:"borrowingAccuracy"` // The number of decimal places (precision) of this coin
			Currency string `json:"currency"` // Coin name
			FlexibleHourlyInterestRate string `json:"flexibleHourlyInterestRate"` // Flexible hourly floating interest rate Flexible Crypto Loans offer an hourly floating interest rate, calculated based on the actual borrowing time per hour, with the option for early repayment Is `""` if the coin does not support flexible loan
			HourlyInterestRate7D string `json:"hourlyInterestRate7D"` // Hourly interest rate for 7 days loan. Is `""` if the coin does not support 7 days loan
			HourlyInterestRate14D string `json:"hourlyInterestRate14D"` // Hourly interest rate for 14 days loan. Is `""` if the coin does not support 14 days loan
			HourlyInterestRate30D string `json:"hourlyInterestRate30D"` // Hourly interest rate for 30 days loan. Is `""` if the coin does not support 30 days loan
			HourlyInterestRate90D string `json:"hourlyInterestRate90D"` // Hourly interest rate for 90 days loan. Is `""` if the coin does not support 90 days loan
			HourlyInterestRate180D string `json:"hourlyInterestRate180D"` // Hourly interest rate for 180 days loan. Is `""` if the coin does not support 180 days loan
			MaxBorrowingAmount string `json:"maxBorrowingAmount"` // Max. amount to borrow
			MinBorrowingAmount string `json:"minBorrowingAmount"` // Min. amount to borrow
		} `json:"list"`
		VipLevel string `json:"vipLevel"` // Vip level
	} `json:"vipCoinList"`
}

// GET /v5/crypto-loan/max-collateral-amount
type GetCryptoLoanMaxCollateralAmountRequest struct {
	OrderId string `url:"orderId"` // Loan coin ID
}

type GetCryptoLoanMaxCollateralAmountResponse struct {
	MaxCollateralAmount string `json:"maxCollateralAmount"` // Max. reduction collateral amount
}

// GET /v5/crypto-loan/ongoing-orders
type GetCryptoLoanOngoingOrdersRequest struct {
	OrderId string `url:"orderId,omitempty"` // Loan order ID
	LoanCurrency string `url:"loanCurrency,omitempty"` // Loan coin name
	CollateralCurrency string `url:"collateralCurrency,omitempty"` // Collateral coin name
	LoanTermType string `url:"loanTermType,omitempty"` // `1`: fixed term, when query this type, `loanTerm` must be filled `2`: flexible term By default, query all types
	LoanTerm string `url:"loanTerm,omitempty"` // `7`, `14`, `30`, `90`, `180` days, working when `loanTermType`=1
	Limit string `url:"limit,omitempty"` // Limit for data size per page. [`1`, `100`]. Default: `10`
	Cursor string `url:"cursor,omitempty"` // Cursor. Use the `nextPageCursor` token from the response to retrieve the next page of the result set
}

type GetCryptoLoanOngoingOrdersResponse struct {
	List []struct {
		CollateralAmount string `json:"collateralAmount"` // Collateral amount
		CollateralCurrency string `json:"collateralCurrency"` // Collateral coin
		CurrentLTV string `json:"currentLTV"` // Current LTV
		ExpirationTime string `json:"expirationTime"` // Loan maturity time, keeps `""` for flexible loan
		HourlyInterestRate string `json:"hourlyInterestRate"` // Hourly interest rate Flexible loan, it is real-time interest rate Fixed term loan: it is fixed term interest rate
		LoanCurrency string `json:"loanCurrency"` // Loan coin
		LoanTerm string `json:"loanTerm"` // Loan term, `7`, `14`, `30`, `90`, `180` days, keep `""` for flexible loan
		OrderId string `json:"orderId"` // Loan order ID
		ResidualInterest string `json:"residualInterest"` // Unpaid interest
		ResidualPenaltyInterest string `json:"residualPenaltyInterest"` // Unpaid penalty interest
		TotalDebt string `json:"totalDebt"` // Unpaid principal
	} `json:"list"`
	NextPageCursor string `json:"nextPageCursor"` // Refer to the `cursor` request parameter
}

// GET /v5/crypto-loan/repayment-history
type GetCryptoLoanRepaymentHistoryRequest struct {
	OrderId string `url:"orderId,omitempty"` // Loan order ID
	RepayId string `url:"repayId,omitempty"` // Repayment tranaction ID
	LoanCurrency string `url:"loanCurrency,omitempty"` // Loan coin name
	Limit string `url:"limit,omitempty"` // Limit for data size per page. [`1`, `100`]. Default: `10`
	Cursor string `url:"cursor,omitempty"` // Cursor. Use the `nextPageCursor` token from the response to retrieve the next page of the result set
}

type GetCryptoLoanRepaymentHistoryResponse struct {
	List []struct {
		CollateralCurrency string `json:"collateralCurrency"` // Collateral coin
		CollateralReturn string `json:"collateralReturn"` // Amount of collateral returned as a result of this repayment. `"0"` if this isn't the final loan repayment
		LoanCurrency string `json:"loanCurrency"` // Loan coin
		LoanTerm string `json:"loanTerm"` // Loan term, `7`, `14`, `30`, `90`, `180` days, keep `""` for flexible loan
		OrderId string `json:"orderId"` // Loan order ID
		RepayAmount string `json:"repayAmount"` // Repayment amount
		RepayId string `json:"repayId"` // Repayment transaction ID
		RepayStatus int64 `json:"repayStatus"` // Repayment status, `1`: success; `2`: processing
		RepayTime string `json:"repayTime"` // Repay timestamp
		RepayType string `json:"repayType"` // Repayment type, `1`: repay by user; `2`: repay by liquidation
	} `json:"list"`
	NextPageCursor string `json:"nextPageCursor"` // Refer to the `cursor` request parameter
}

// POST /v5/crypto-loan/adjust-ltv
type PostCryptoLoanAdjustLtvRequest struct {
	OrderId string `json:"orderId"` // Loan order ID
	Amount string `json:"amount"` // Adjustment amount
	Direction string `json:"direction"` // `0`: add collateral; `1`: reduce collateral
}

type PostCryptoLoanAdjustLtvResponse struct {
	AdjustId string `json:"adjustId"` // Collateral adjustment transaction ID
}

// POST /v5/crypto-loan/borrow
type PostCryptoLoanBorrowRequest struct {
	LoanCurrency string `json:"loanCurrency"` // Loan coin name
	LoanAmount string `json:"loanAmount,omitempty"` // Amount to borrow **Required** when collateral amount is not filled
	LoanTerm string `json:"loanTerm,omitempty"` // Loan term flexible term: `null` or not passed fixed term: `7`, `14`, `30`, `90`, `180` days
	CollateralCurrency string `json:"collateralCurrency"` // Currency used to mortgage
	CollateralAmount string `json:"collateralAmount,omitempty"` // Amount to mortgage **Required** when loan amount is not filled
}

type PostCryptoLoanBorrowResponse struct {
	OrderId string `json:"orderId"` // Loan order ID
}

// POST /v5/crypto-loan/repay
type PostCryptoLoanRepayRequest struct {
	OrderId string `json:"orderId"` // Loan order ID
	Amount string `json:"amount"` // Repay amount
}

type PostCryptoLoanRepayResponse struct {
	RepayId string `json:"repayId"` // Repayment transaction ID
}

