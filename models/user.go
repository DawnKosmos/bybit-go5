// Code generated by bybitgen; DO NOT EDIT.
package models

// GET /v5/user/escrow_sub_members
type GetUserEscrow_sub_membersRequest struct {
	PageSize string `url:"pageSize,omitempty"` // Data size per page. Return up to 100 records per request
	NextCursor string `url:"nextCursor,omitempty"` // Cursor. Use the `nextCursor` token from the response to retrieve the next page of the result set
}

type GetUserEscrow_sub_membersResponse struct {
	// TODO: fill in response fields parsed from docs
}

// GET /v5/user/get-member-type
type GetUserGetMemberTypeRequest struct {
	MemberIds string `url:"memberIds,omitempty"` // Query itself wallet types when not passed When use master api key to query sub UID, master UID data is always returned in the top of the array Multiple sub UID are supported, separated by commas This param is ignored when you use sub account api key
}

type GetUserGetMemberTypeResponse struct {
	// TODO: fill in response fields parsed from docs
}

// GET /v5/user/query-api
type GetUserQueryApiRequest struct {
}

type GetUserQueryApiResponse struct {
	// TODO: fill in response fields parsed from docs
}

// GET /v5/user/query-sub-members
type GetUserQuerySubMembersRequest struct {
}

type GetUserQuerySubMembersResponse struct {
	// TODO: fill in response fields parsed from docs
}

// GET /v5/user/sub-apikeys
type GetUserSubApikeysRequest struct {
	SubMemberId string `url:"subMemberId"` // Sub UID
	Limit int64 `url:"limit,omitempty"` // Limit for data size per page. [`1`, `20`]. Default: `20`
	Cursor string `url:"cursor,omitempty"` // Cursor. Use the `nextPageCursor` token from the response to retrieve the next page of the result set
}

type GetUserSubApikeysResponse struct {
	// TODO: fill in response fields parsed from docs
}

// GET /v5/user/submembers
type GetUserSubmembersRequest struct {
	PageSize string `url:"pageSize,omitempty"` // Data size per page. Return up to 100 records per request
	NextCursor string `url:"nextCursor,omitempty"` // Cursor. Use the `nextCursor` token from the response to retrieve the next page of the result set
}

type GetUserSubmembersResponse struct {
	// TODO: fill in response fields parsed from docs
}

// POST /v5/user/create-sub-api
type PostUserCreateSubApiRequest struct {
	Subuid int64 `json:"subuid"` // Sub user Id
	Note string `json:"note,omitempty"` // Set a remark
	ReadOnly int64 `json:"readOnly"` // `0`：Read and Write. `1`：Read only
	Ips string `json:"ips,omitempty"` // Set the IP bind. example: `"192.168.0.1,192.168.0.2"`<b>note:</b> don't pass ips or pass with `"*"` means no bind No ip bound api key will be <b>invalid after 90 days</b> api key without IP bound will be invalid after <b>7 days</b> once the account password is changed
	Permissions string `json:"permissions"` // Tick the types of permission. one of below types must be passed, otherwise the error is thrown
}

type PostUserCreateSubApiResponse struct {
	// TODO: fill in response fields parsed from docs
}

// POST /v5/user/create-sub-member
type PostUserCreateSubMemberRequest struct {
	Username string `json:"username"` // Give a username of the new sub user id. 6-16 characters, must include both numbers and letters. cannot be the same as the exist or deleted one.
	Password string `json:"password,omitempty"` // Set the password for the new sub user id. 8-30 characters, must include numbers, upper and lowercase letters.
	MemberType int64 `json:"memberType"` // `1`: normal sub account, `6`: custodial sub account
	Switch int64 `json:"switch,omitempty"` // `0`: turn off quick login (default) `1`: turn on quick login.
	IsUta bool `json:"isUta,omitempty"` // deprecated param, always UTA account
	Note string `json:"note,omitempty"` // Set a remark
}

type PostUserCreateSubMemberResponse struct {
	// TODO: fill in response fields parsed from docs
}

// POST /v5/user/del-submember
type PostUserDelSubmemberRequest struct {
	SubMemberId string `json:"subMemberId"` // Sub UID
}

type PostUserDelSubmemberResponse struct {
	// TODO: fill in response fields parsed from docs
}

// POST /v5/user/delete-api
type PostUserDeleteApiRequest struct {
}

type PostUserDeleteApiResponse struct {
	// TODO: fill in response fields parsed from docs
}

// POST /v5/user/delete-sub-api
type PostUserDeleteSubApiRequest struct {
	Apikey string `json:"apikey,omitempty"` // Sub account api key You must pass this param when you use master account manage sub account api key settings If you use corresponding sub uid api key call this endpoint, `apikey` param cannot be passed, otherwise throwing an error
}

type PostUserDeleteSubApiResponse struct {
	// TODO: fill in response fields parsed from docs
}

// POST /v5/user/frozen-sub-member
type PostUserFrozenSubMemberRequest struct {
	Subuid int64 `json:"subuid"` // Sub user Id
	Frozen int64 `json:"frozen"` // `0`：unfreeze, `1`：freeze
}

type PostUserFrozenSubMemberResponse struct {
	// TODO: fill in response fields parsed from docs
}

// POST /v5/user/update-api
type PostUserUpdateApiRequest struct {
	ReadOnly int64 `json:"readOnly,omitempty"` // `0` (default)：Read and Write. `1`：Read only
	Ips string `json:"ips,omitempty"` // Set the IP bind. example: `"192.168.0.1,192.168.0.2"`<b>note:</b> don't pass ips or pass with `"*"` means no bind No ip bound api key will be <b>invalid after 90 days</b> api key will be invalid after <b>7 days</b> once the account password is changed
	Permissions string `json:"permissions,omitempty"` // Tick the types of permission. Don't send this param if you don't want to change the permission
}

type PostUserUpdateApiResponse struct {
	// TODO: fill in response fields parsed from docs
}

// POST /v5/user/update-sub-api
type PostUserUpdateSubApiRequest struct {
	Apikey string `json:"apikey,omitempty"` // Sub account api key You must pass this param when you use master account manage sub account api key settings If you use corresponding sub uid api key call this endpoint, `apikey` param cannot be passed, otherwise throwing an error
	ReadOnly int64 `json:"readOnly,omitempty"` // `0` (default)：Read and Write. `1`：Read only
	Ips string `json:"ips,omitempty"` // Set the IP bind. example: `"192.168.0.1,192.168.0.2"`<b>note:</b> don't pass ips or pass with `"*"` means no bind No ip bound api key will be <b>invalid after 90 days</b> api key will be invalid after <b>7 days</b> once the account password is changed
	Permissions string `json:"permissions,omitempty"` // Tick the types of permission. Don't send this param if you don't want to change the permission
}

type PostUserUpdateSubApiResponse struct {
	// TODO: fill in response fields parsed from docs
}

