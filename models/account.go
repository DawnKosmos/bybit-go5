// Code generated by bybitgen; DO NOT EDIT.
package models

// GET /v5/account/borrow-history
type GetAccountBorrowHistoryRequest struct {
	Currency string `url:"currency,omitempty"` // `USDC`,`USDT`,`BTC`,`ETH` etc, uppercase only
	StartTime int64 `url:"startTime,omitempty"` // The start timestamp (ms) startTime and endTime are not passed, return 30 days by default Only startTime is passed, return range between startTime and startTime + 30 days Only endTime is passed, return range between endTime-30 days and endTime If both are passed, the rule is endTime - startTime <= 30 days
	EndTime int64 `url:"endTime,omitempty"` // The end time. timestamp (ms)
	Limit int64 `url:"limit,omitempty"` // Limit for data size per page. [`1`, `50`]. Default: `20`
	Cursor string `url:"cursor,omitempty"` // Cursor. Use the `nextPageCursor` token from the response to retrieve the next page of the result set
}

type GetAccountBorrowHistoryResponse struct {
	// TODO: fill in response fields parsed from docs
}

// GET /v5/account/collateral-info
type GetAccountCollateralInfoRequest struct {
	Currency string `url:"currency,omitempty"` // Asset currency of all current collateral, uppercase only
}

type GetAccountCollateralInfoResponse struct {
	// TODO: fill in response fields parsed from docs
}

// GET /v5/account/contract-transaction-log
type GetAccountContractTransactionLogRequest struct {
	Currency string `url:"currency,omitempty"` // Currency, uppercase only
	BaseCoin string `url:"baseCoin,omitempty"` // BaseCoin, uppercase only. e.g., BTC of BTCPERP
	Type string `url:"type,omitempty"` // Types of transaction logs
	StartTime int64 `url:"startTime,omitempty"` // The start timestamp (ms) startTime and endTime are not passed, return 7 days by default Only startTime is passed, return range between startTime and startTime+7 days Only endTime is passed, return range between endTime-7 days and endTime If both are passed, the rule is endTime - startTime <= 7 days
	EndTime int64 `url:"endTime,omitempty"` // The end timestamp (ms)
	Limit int64 `url:"limit,omitempty"` // Limit for data size per page. [`1`, `50`]. Default: `20`
	Cursor string `url:"cursor,omitempty"` // Cursor. Use the `nextPageCursor` token from the response to retrieve the next page of the result set
}

type GetAccountContractTransactionLogResponse struct {
	// TODO: fill in response fields parsed from docs
}

// GET /v5/account/fee-rate
type GetAccountFeeRateRequest struct {
	Category string `url:"category"` // Product type. `spot`, `linear`, `inverse`, `option`
	Symbol string `url:"symbol,omitempty"` // Symbol name, like `BTCUSDT`, uppercase only. Valid for `linear`, `inverse`, `spot`
	BaseCoin string `url:"baseCoin,omitempty"` // Base coin, uppercase only. `SOL`, `BTC`, `ETH`. Valid for `option`
}

type GetAccountFeeRateResponse struct {
	// TODO: fill in response fields parsed from docs
}

// GET /v5/account/info
type GetAccountInfoRequest struct {
}

type GetAccountInfoResponse struct {
	// TODO: fill in response fields parsed from docs
}

// GET /v5/account/mmp-state
type GetAccountMmpStateRequest struct {
	BaseCoin string `url:"baseCoin"` // Base coin, uppercase only
}

type GetAccountMmpStateResponse struct {
	// TODO: fill in response fields parsed from docs
}

// GET /v5/account/query-dcp-info
type GetAccountQueryDcpInfoRequest struct {
}

type GetAccountQueryDcpInfoResponse struct {
	// TODO: fill in response fields parsed from docs
}

// GET /v5/account/smp-group
type GetAccountSmpGroupRequest struct {
}

type GetAccountSmpGroupResponse struct {
	// TODO: fill in response fields parsed from docs
}

// GET /v5/account/transaction-log
type GetAccountTransactionLogRequest struct {
	AccountType string `url:"accountType,omitempty"` // Account Type. `UNIFIED`
	Category string `url:"category,omitempty"` // Product type [UTA2.0](../acct-mode#uta-20): `spot`,`linear`,`option`,`inverse` [UTA1.0](../acct-mode#uta-10): `spot`,`linear`,`option`
	Currency string `url:"currency,omitempty"` // Currency, uppercase only
	BaseCoin string `url:"baseCoin,omitempty"` // BaseCoin, uppercase only. e.g., BTC of BTCPERP
	Type string `url:"type,omitempty"` // Types of transaction logs
	StartTime int64 `url:"startTime,omitempty"` // The start timestamp (ms) startTime and endTime are not passed, return 24 hours by default Only startTime is passed, return range between startTime and startTime+24 hours Only endTime is passed, return range between endTime-24 hours and endTime If both are passed, the rule is endTime - startTime <= 7 days
	EndTime int64 `url:"endTime,omitempty"` // The end timestamp (ms)
	Limit int64 `url:"limit,omitempty"` // Limit for data size per page. [`1`, `50`]. Default: `20`
	Cursor string `url:"cursor,omitempty"` // Cursor. Use the `nextPageCursor` token from the response to retrieve the next page of the result set
}

type GetAccountTransactionLogResponse struct {
	// TODO: fill in response fields parsed from docs
}

// GET /v5/account/wallet-balance
type GetAccountWalletBalanceRequest struct {
	AccountType string `url:"accountType"` // Account type [UTA2.0](../acct-mode#uta-20): `UNIFIED` [UTA1.0](../acct-mode#uta-10): `UNIFIED`, `CONTRACT`(inverse derivatives wallet) Classic account: `CONTRACT`, `SPOT` To get Funding wallet balance, please go to this [endpoint](../asset/balance/all-balance)
	Coin string `url:"coin,omitempty"` // Coin name, uppercase only If not passed, it returns non-zero asset info You can pass multiple coins to query, separated by comma. `USDT,USDC`
}

type GetAccountWalletBalanceResponse struct {
	// TODO: fill in response fields parsed from docs
}

// GET /v5/account/withdrawal
type GetAccountWithdrawalRequest struct {
	CoinName string `url:"coinName"` // Coin name, uppercase only. Supports up to 20 coins per request, use comma to separate. `BTC,USDC,USDT,SOL`
}

type GetAccountWithdrawalResponse struct {
	// TODO: fill in response fields parsed from docs
}

// GET /v5/asset/coin-greeks
type GetAssetCoinGreeksRequest struct {
	BaseCoin string `url:"baseCoin,omitempty"` // Base coin, uppercase only. If not passed, all supported base coin greeks will be returned by default
}

type GetAssetCoinGreeksResponse struct {
	// TODO: fill in response fields parsed from docs
}

// POST /v5/account/mmp-modify
type PostAccountMmpModifyRequest struct {
	BaseCoin string `json:"baseCoin"` // Base coin, uppercase only
	Window string `json:"window"` // Time window (ms)
	FrozenPeriod string `json:"frozenPeriod"` // Frozen period (ms). "0" means the trade will remain frozen until manually reset
	QtyLimit string `json:"qtyLimit"` // Trade qty limit (positive and up to 2 decimal places)
	DeltaLimit string `json:"deltaLimit"` // Delta limit (positive and up to 2 decimal places)
}

type PostAccountMmpModifyResponse struct {
	// TODO: fill in response fields parsed from docs
}

// POST /v5/account/mmp-reset
type PostAccountMmpResetRequest struct {
	BaseCoin string `json:"baseCoin"` // Base coin, uppercase only
}

type PostAccountMmpResetResponse struct {
	// TODO: fill in response fields parsed from docs
}

// POST /v5/account/quick-repayment
type PostAccountQuickRepaymentRequest struct {
	Coin string `json:"coin,omitempty"` // The coin with liability, uppercase only Input the specific coin: repay the liability of this coin in particular No coin specified: repay the liability of all coins
}

type PostAccountQuickRepaymentResponse struct {
	// TODO: fill in response fields parsed from docs
}

// POST /v5/account/set-collateral-switch
type PostAccountSetCollateralSwitchRequest struct {
	Coin string `json:"coin"` // Coin name, uppercase only You can get collateral coin from [here](collateral-info) USDT, USDC cannot be set
	CollateralSwitch string `json:"collateralSwitch"` // `ON`: switch on collateral, `OFF`: switch off collateral
}

type PostAccountSetCollateralSwitchResponse struct {
	// TODO: fill in response fields parsed from docs
}

// POST /v5/account/set-collateral-switch-batch
type PostAccountSetCollateralSwitchBatchRequest struct {
	Request string `json:"request"` // Object
}

type PostAccountSetCollateralSwitchBatchResponse struct {
	// TODO: fill in response fields parsed from docs
}

// POST /v5/account/set-hedging-mode
type PostAccountSetHedgingModeRequest struct {
	SetHedgingMode string `json:"setHedgingMode"` // `ON`, `OFF`
}

type PostAccountSetHedgingModeResponse struct {
	// TODO: fill in response fields parsed from docs
}

// POST /v5/account/set-limit-px-action
type PostAccountSetLimitPxActionRequest struct {
	Category string `json:"category"` // `linear`, `inverse`, `spot`
	ModifyEnable bool `json:"modifyEnable"` // `true`: allow the syetem to modify the order price `false`: reject your order request
}

type PostAccountSetLimitPxActionResponse struct {
	// TODO: fill in response fields parsed from docs
}

// POST /v5/account/set-margin-mode
type PostAccountSetMarginModeRequest struct {
	SetMarginMode string `json:"setMarginMode"` // `ISOLATED_MARGIN`, `REGULAR_MARGIN`(i.e. Cross margin), `PORTFOLIO_MARGIN`
}

type PostAccountSetMarginModeResponse struct {
	// TODO: fill in response fields parsed from docs
}

// POST /v5/account/upgrade-to-uta
type PostAccountUpgradeToUtaRequest struct {
}

type PostAccountUpgradeToUtaResponse struct {
	// TODO: fill in response fields parsed from docs
}

