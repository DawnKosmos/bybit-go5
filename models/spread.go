// Code generated by bybitgen; DO NOT EDIT.
package models

// GET /v5/spread/execution/list
type GetSpreadExecutionListRequest struct {
	Symbol string `url:"symbol,omitempty"` // Spread combination symbol name
	OrderId string `url:"orderId,omitempty"` // Spread combination order ID
	OrderLinkId string `url:"orderLinkId,omitempty"` // User customised order ID
	StartTime string `url:"startTime,omitempty"` // The start timestamp (ms) startTime and endTime are not passed, return 7 days by default Only startTime is passed, return range between startTime and startTime+7 days Only endTime is passed, return range between endTime-7 days and endTime If both are passed, the rule is endTime - startTime <= 7 days
	EndTime string `url:"endTime,omitempty"` // The end timestamp (ms)
	Limit int64 `url:"limit,omitempty"` // Limit for parent order data size per page. [`1`, `50`]. Default: `20`
	Cursor string `url:"cursor,omitempty"` // Cursor. Use the `nextPageCursor` token from the response to retrieve the next page of the result set
}

type GetSpreadExecutionListResponse struct {
	// TODO: fill in response fields parsed from docs
}

// GET /v5/spread/instrument
type GetSpreadInstrumentRequest struct {
	Symbol string `url:"symbol,omitempty"` // Spread combination symbol name
	BaseCoin string `url:"baseCoin,omitempty"` // Base coin, uppercase only
	Limit int64 `url:"limit,omitempty"` // Limit for data size per page. [`1`, `500`]. Default: `200`
	Cursor string `url:"cursor,omitempty"` // Cursor. Use the `nextPageCursor` token from the response to retrieve the next page of the result set
}

type GetSpreadInstrumentResponse struct {
	// TODO: fill in response fields parsed from docs
}

// GET /v5/spread/order/history
type GetSpreadOrderHistoryRequest struct {
	Symbol string `url:"symbol,omitempty"` // Spread combination symbol name
	BaseCoin string `url:"baseCoin,omitempty"` // Base coin
	OrderId string `url:"orderId,omitempty"` // Spread combination order ID
	OrderLinkId string `url:"orderLinkId,omitempty"` // User customised order ID
	StartTime string `url:"startTime,omitempty"` // The start timestamp (ms) startTime and endTime are not passed, return 7 days by default Only startTime is passed, return range between startTime and startTime+7 days Only endTime is passed, return range between endTime-7 days and endTime If both are passed, the rule is endTime - startTime <= 7 days
	EndTime string `url:"endTime,omitempty"` // The end timestamp (ms)
	Limit int64 `url:"limit,omitempty"` // Limit for data size per page. [`1`, `50`]. Default: `20`
	Cursor string `url:"cursor,omitempty"` // Cursor. Use the `nextPageCursor` token from the response to retrieve the next page of the result set
}

type GetSpreadOrderHistoryResponse struct {
	// TODO: fill in response fields parsed from docs
}

// GET /v5/spread/order/realtime
type GetSpreadOrderRealtimeRequest struct {
	Symbol string `url:"symbol,omitempty"` // Spread combination symbol name
	BaseCoin string `url:"baseCoin,omitempty"` // Base coin
	OrderId string `url:"orderId,omitempty"` // Spread combination order ID
	OrderLinkId string `url:"orderLinkId,omitempty"` // User customised order ID
	Limit int64 `url:"limit,omitempty"` // Limit for data size per page. [`1`, `50`]. Default: `20`
	Cursor string `url:"cursor,omitempty"` // Cursor. Use the `nextPageCursor` token from the response to retrieve the next page of the result set
}

type GetSpreadOrderRealtimeResponse struct {
	// TODO: fill in response fields parsed from docs
}

// GET /v5/spread/orderbook
type GetSpreadOrderbookRequest struct {
	Symbol string `url:"symbol"` // Spread combination symbol name
	Limit int64 `url:"limit,omitempty"` // Limit size for each bid and ask [`1`, `25`]. Default: `1`
}

type GetSpreadOrderbookResponse struct {
	// TODO: fill in response fields parsed from docs
}

// GET /v5/spread/recent-trade
type GetSpreadRecentTradeRequest struct {
	Symbol string `url:"symbol"` // Spread combination symbol name
	Limit int64 `url:"limit,omitempty"` // Limit for data size per page [`1`,`1000`], default: `500`
}

type GetSpreadRecentTradeResponse struct {
	// TODO: fill in response fields parsed from docs
}

// GET /v5/spread/tickers
type GetSpreadTickersRequest struct {
	Symbol string `url:"symbol"` // Spread combination symbol name
}

type GetSpreadTickersResponse struct {
	// TODO: fill in response fields parsed from docs
}

// POST /v5/spread/order/amend
type PostSpreadOrderAmendRequest struct {
	Symbol string `json:"symbol"` // Spread combination symbol name
	OrderId string `json:"orderId,omitempty"` // Spread combination order ID. Either `orderId` or `orderLinkId` is **required**
	OrderLinkId string `json:"orderLinkId,omitempty"` // User customised order ID. Either `orderId` or `orderLinkId` is **required**
	Qty string `json:"qty,omitempty"` // Order quantity after modification. Either `qty` or `price` is **required**
	Price string `json:"price,omitempty"` // Order price after modification Either `qty` or `price` is **required** price="" means the price remains unchanged, while price="0" updates the price to 0.
}

type PostSpreadOrderAmendResponse struct {
	// TODO: fill in response fields parsed from docs
}

// POST /v5/spread/order/cancel
type PostSpreadOrderCancelRequest struct {
	OrderId string `json:"orderId,omitempty"` // Spread combination order ID. Either `orderId` or `orderLinkId` is **required**
	OrderLinkId string `json:"orderLinkId,omitempty"` // User customised order ID. Either `orderId` or `orderLinkId` is **required**
}

type PostSpreadOrderCancelResponse struct {
	// TODO: fill in response fields parsed from docs
}

// POST /v5/spread/order/cancel-all
type PostSpreadOrderCancelAllRequest struct {
	Symbol string `json:"symbol,omitempty"` // Spread combination symbol name When a symbol is specified, all orders for that symbol will be cancelled regardless of the `cancelAll` field. When a symbol is not specified and `cancelAll`=true, all orders, regardless of the symbol, will be cancelled
	CancelAll bool `json:"cancelAll,omitempty"` // `true`, `false`
}

type PostSpreadOrderCancelAllResponse struct {
	// TODO: fill in response fields parsed from docs
}

// POST /v5/spread/order/create
type PostSpreadOrderCreateRequest struct {
	Symbol string `json:"symbol"` // Spread combination symbol name
	Side string `json:"side"` // Order side. `Buy`, `Sell`
	OrderType string `json:"orderType"` // `Limit`, `Market`
	Qty string `json:"qty"` // Order qty
	Price string `json:"price,omitempty"` // Order price
	OrderLinkId string `json:"orderLinkId,omitempty"` // User customised order ID, a max of 45 characters. Combinations of numbers, letters (upper and lower cases), dashes, and underscores are supported.
	TimeInForce string `json:"timeInForce,omitempty"` // <a href="https://www.bybit.com/en/help-center/article/What-Are-Time-In-Force-TIF-GTC-IOC-FOK">Time in force</a>. `IOC`, `FOK`, `GTC`, `PostOnly`
}

type PostSpreadOrderCreateResponse struct {
	// TODO: fill in response fields parsed from docs
}

