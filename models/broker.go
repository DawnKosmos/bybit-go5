// Code generated by bybitgen; DO NOT EDIT.
package models

// GET /v5/broker/account-info
type GetBrokerAccountInfoRequest struct {
}

type GetBrokerAccountInfoResponse struct {
	// TODO: fill in response fields parsed from docs
}

// GET /v5/broker/asset/query-sub-member-deposit-record
type GetBrokerAssetQuerySubMemberDepositRecordRequest struct {
	Id string `url:"id,omitempty"` // Internal ID: Can be used to uniquely identify and filter the deposit. When combined with other parameters, this field takes the highest priority
	TxID string `url:"txID,omitempty"` // Transaction ID: Please note that data generated before Jan 1, 2024 cannot be queried using txID
	SubMemberId string `url:"subMemberId,omitempty"` // Sub UID
	Coin string `url:"coin,omitempty"` // Coin, uppercase only
	StartTime int64 `url:"startTime,omitempty"` // The start timestamp (ms) _Note: the query logic is actually effective based on **second** level_
	EndTime int64 `url:"endTime,omitempty"` // The end timestamp (ms) _Note: the query logic is actually effective based on **second** level_
	Limit int64 `url:"limit,omitempty"` // Limit for data size per page. [`1`, `50`]. Default: `50`
	Cursor string `url:"cursor,omitempty"` // Cursor. Use the `nextPageCursor` token from the response to retrieve the next page of the result set
}

type GetBrokerAssetQuerySubMemberDepositRecordResponse struct {
	// TODO: fill in response fields parsed from docs
}

// GET /v5/broker/earnings-info
type GetBrokerEarningsInfoRequest struct {
	BizType string `url:"bizType,omitempty"` // Business type. `SPOT`, `DERIVATIVES`, `OPTIONS`, `CONVERT`
	Begin string `url:"begin,omitempty"` // Begin date, in the format of YYYYMMDD, e.g, 20231201, search the data from 1st Dec 2023 00:00:00 UTC (include)
	End string `url:"end,omitempty"` // End date, in the format of YYYYMMDD, e.g, 20231201, search the data before 2nd Dec 2023 00:00:00 UTC (exclude)
	Uid string `url:"uid,omitempty"` // To get results for a specific subaccount: Enter the subaccount UID To get results for all subaccounts: Leave the field empty
	Limit int64 `url:"limit,omitempty"` // Limit for data size per page. [`1`, `1000`]. Default: `1000`
	Cursor string `url:"cursor,omitempty"` // Cursor. Use the `nextPageCursor` token from the response to retrieve the next page of the result set
}

type GetBrokerEarningsInfoResponse struct {
	// TODO: fill in response fields parsed from docs
}

// POST /v5/broker/award/distribute-award
type PostBrokerAwardDistributeAwardRequest struct {
	AccountId string `json:"accountId"` // User ID
	AwardId string `json:"awardId"` // Voucher ID
	SpecCode string `json:"specCode"` // Customised unique spec code, up to 8 characters
	Amount string `json:"amount"` // Issue amount Spot airdrop supports up to 16 decimals Other types supports up to 4 decimals
	BrokerId string `json:"brokerId"` // Broker ID
}

type PostBrokerAwardDistributeAwardResponse struct {
	// TODO: fill in response fields parsed from docs
}

// POST /v5/broker/award/distribution-record
type PostBrokerAwardDistributionRecordRequest struct {
	AccountId string `json:"accountId"` // User ID
	AwardId string `json:"awardId"` // Voucher ID
	SpecCode string `json:"specCode"` // Customised unique spec code, up to 8 characters
	WithUsedAmount bool `json:"withUsedAmount,omitempty"` // Whether to return the amount used by the user `true` `false` (default)
}

type PostBrokerAwardDistributionRecordResponse struct {
	// TODO: fill in response fields parsed from docs
}

// POST /v5/broker/award/info
type PostBrokerAwardInfoRequest struct {
	Id string `json:"id"` // Voucher ID
}

type PostBrokerAwardInfoResponse struct {
	// TODO: fill in response fields parsed from docs
}

