// Code generated by bybitgen; DO NOT EDIT.
package models

// GET /v5/broker/account-info
type GetBrokerAccountInfoRequest struct {
}

type GetBrokerAccountInfoResponse struct {
	SubAcctQty string `json:"subAcctQty"` // The qty of sub account has been created
	MaxSubAcctQty string `json:"maxSubAcctQty"` // The max limit of sub account can be created
	BaseFeeRebateRate struct {
		Spot string `json:"spot"` // Rebate percentage of the base fee for spot, e.g., 10.00%
		Derivatives string `json:"derivatives"` // Rebate percentage of the base fee for derivatives, e.g., 10.00%
	} `json:"baseFeeRebateRate"`
	MarkupFeeRebateRate struct {
		Spot string `json:"spot"` // Rebate percentage of the mark up fee for spot, e.g., 10.00%
		Derivatives string `json:"derivatives"` // Rebate percentage of the mark up fee for derivatives, e.g., 10.00%
		Convert string `json:"convert"` // Rebate percentage of the mark up fee for convert, e.g., 10.00%
	} `json:"markupFeeRebateRate"`
	Ts string `json:"ts"` // System timestamp (ms)
}

// GET /v5/broker/asset/query-sub-member-deposit-record
type GetBrokerAssetQuerySubMemberDepositRecordRequest struct {
	Id string `url:"id,omitempty"` // Internal ID: Can be used to uniquely identify and filter the deposit. When combined with other parameters, this field takes the highest priority
	TxID string `url:"txID,omitempty"` // Transaction ID: Please note that data generated before Jan 1, 2024 cannot be queried using txID
	SubMemberId string `url:"subMemberId,omitempty"` // Sub UID
	Coin string `url:"coin,omitempty"` // Coin, uppercase only
	StartTime int64 `url:"startTime,omitempty"` // The start timestamp (ms) _Note: the query logic is actually effective based on **second** level_
	EndTime int64 `url:"endTime,omitempty"` // The end timestamp (ms) _Note: the query logic is actually effective based on **second** level_
	Limit int64 `url:"limit,omitempty"` // Limit for data size per page. [`1`, `50`]. Default: `50`
	Cursor string `url:"cursor,omitempty"` // Cursor. Use the `nextPageCursor` token from the response to retrieve the next page of the result set
}

type GetBrokerAssetQuerySubMemberDepositRecordResponse struct {
	Rows []struct {
		Id string `json:"id"` // Unique ID
		SubMemberId string `json:"subMemberId"` // Sub account user ID
		Coin string `json:"coin"` // Coin
		Chain string `json:"chain"` // Chain
		Amount string `json:"amount"` // Amount
		TxID string `json:"txID"` // Transaction ID
		Status int64 `json:"status"` // Deposit status
		ToAddress string `json:"toAddress"` // Deposit target address
		Tag string `json:"tag"` // Tag of deposit target address
		DepositFee string `json:"depositFee"` // Deposit fee
		SuccessAt string `json:"successAt"` // Last updated time
		Confirmations string `json:"confirmations"` // Number of confirmation blocks
		TxIndex string `json:"txIndex"` // Transaction sequence number
		BlockHash string `json:"blockHash"` // Hash number on the chain
		BatchReleaseLimit string `json:"batchReleaseLimit"` // The deposit limit for this coin in this chain. `"-1"` means no limit
		DepositType string `json:"depositType"` // The deposit type. `0`: normal deposit, `10`: the deposit reaches daily deposit limit, `20`: abnormal deposit
		FromAddress string `json:"fromAddress"` // From address of deposit, only shown when the deposit comes from on-chain and from address is unique, otherwise gives `""`
		TaxDepositRecordsId string `json:"taxDepositRecordsId"` // This field is used for tax purposes by Bybit EU (Austria) usersï¼Œ declare tax id
		TaxStatus int64 `json:"taxStatus"` // This field is used for tax purposes by Bybit EU (Austria) users 0: No reporting required 1: Reporting pending 2: Reporting completed
	} `json:"rows"`
	NextPageCursor string `json:"nextPageCursor"` // Refer to the `cursor` request parameter
}

// GET /v5/broker/earnings-info
type GetBrokerEarningsInfoRequest struct {
	BizType string `url:"bizType,omitempty"` // Business type. `SPOT`, `DERIVATIVES`, `OPTIONS`, `CONVERT`
	Begin string `url:"begin,omitempty"` // Begin date, in the format of YYYYMMDD, e.g, 20231201, search the data from 1st Dec 2023 00:00:00 UTC (include)
	End string `url:"end,omitempty"` // End date, in the format of YYYYMMDD, e.g, 20231201, search the data before 2nd Dec 2023 00:00:00 UTC (exclude)
	Uid string `url:"uid,omitempty"` // To get results for a specific subaccount: Enter the subaccount UID To get results for all subaccounts: Leave the field empty
	Limit int64 `url:"limit,omitempty"` // Limit for data size per page. [`1`, `1000`]. Default: `1000`
	Cursor string `url:"cursor,omitempty"` // Cursor. Use the `nextPageCursor` token from the response to retrieve the next page of the result set
}

type GetBrokerEarningsInfoResponse struct {
	TotalEarningCat struct {
		Spot []struct {
			Coin string `json:"coin"` // Rebate coin name
			Earning string `json:"earning"` // Rebate amount of the coin
		} `json:"spot"`
		Derivatives []struct {
			Coin string `json:"coin"` // Rebate coin name
			Earning string `json:"earning"` // Rebate amount of the coin
		} `json:"derivatives"`
		Options []struct {
			Coin string `json:"coin"` // Rebate coin name
			Earning string `json:"earning"` // Rebate amount of the coin
		} `json:"options"`
		Convert []struct {
			Coin string `json:"coin"` // Rebate coin name
			Earning string `json:"earning"` // Rebate amount of the coin
		} `json:"convert"`
		Total []struct {
			Coin string `json:"coin"` // Rebate coin name
			Earning string `json:"earning"` // Rebate amount of the coin
		} `json:"total"`
	} `json:"totalEarningCat"`
	Details []struct {
		UserId string `json:"userId"` // Sub UID
		BizType string `json:"bizType"` // Business type. `SPOT`, `DERIVATIVES`, `OPTIONS`, `CONVERT`
		Symbol string `json:"symbol"` // Symbol name
		Coin string `json:"coin"` // Rebate coin name
		Earning string `json:"earning"` // Rebate amount
		MarkupEarning string `json:"markupEarning"` // Earning generated from markup fee rate
		BaseFeeEarning string `json:"baseFeeEarning"` // Earning generated from base fee rate
		OrderId string `json:"orderId"` // Order ID
		ExecId string `json:"execId"` // Trade ID
		ExecTime string `json:"execTime"` // Order execution timestamp (ms)
	} `json:"details"`
	NextPageCursor string `json:"nextPageCursor"` // Refer to the `cursor` request parameter
}

// POST /v5/broker/award/distribute-award
type PostBrokerAwardDistributeAwardRequest struct {
	AccountId string `json:"accountId"` // User ID
	AwardId string `json:"awardId"` // Voucher ID
	SpecCode string `json:"specCode"` // Customised unique spec code, up to 8 characters
	Amount string `json:"amount"` // Issue amount Spot airdrop supports up to 16 decimals Other types supports up to 4 decimals
	BrokerId string `json:"brokerId"` // Broker ID
}

type PostBrokerAwardDistributeAwardResponse struct {
	// TODO: fill in response fields parsed from docs
}

// POST /v5/broker/award/distribution-record
type PostBrokerAwardDistributionRecordRequest struct {
	AccountId string `json:"accountId"` // User ID
	AwardId string `json:"awardId"` // Voucher ID
	SpecCode string `json:"specCode"` // Customised unique spec code, up to 8 characters
	WithUsedAmount bool `json:"withUsedAmount,omitempty"` // Whether to return the amount used by the user `true` `false` (default)
}

type PostBrokerAwardDistributionRecordResponse struct {
	AccountId string `json:"accountId"` // User ID
	AwardId string `json:"awardId"` // Voucher ID
	SpecCode string `json:"specCode"` // Spec code
	Amount string `json:"amount"` // Amount of voucher
	IsClaimed bool `json:"isClaimed"` // `true`, `false`
	StartAt string `json:"startAt"` // Claim start timestamp (sec)
	EndAt string `json:"endAt"` // Claim end timestamp (sec)
	EffectiveAt string `json:"effectiveAt"` // Voucher effective timestamp (sec) after claimed
	IneffectiveAt string `json:"ineffectiveAt"` // Voucher inactive timestamp (sec) after claimed
	UsedAmount string `json:"usedAmount"` // Amount used by the user
}

// POST /v5/broker/award/info
type PostBrokerAwardInfoRequest struct {
	Id string `json:"id"` // Voucher ID
}

type PostBrokerAwardInfoResponse struct {
	Id string `json:"id"` // Voucher ID
	Coin string `json:"coin"` // Coin
	AmountUnit string `json:"amountUnit"` // <code>AWARD_AMOUNT_UNIT_USD</code> <code>AWARD_AMOUNT_UNIT_COIN</code>
	ProductLine string `json:"productLine"` // Product line
	SubProductLine string `json:"subProductLine"` // Sub product line
	TotalAmount string `json:"totalAmount"`
	UsedAmount string `json:"usedAmount"` // Used amount of voucher
}

