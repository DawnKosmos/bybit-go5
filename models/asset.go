// Code generated by bybitgen; DO NOT EDIT.
package models

// GET /v5/asset/coin/query-info
type GetAssetCoinQueryInfoRequest struct {
	Coin string `url:"coin,omitempty"` // Coin, uppercase only
}

type GetAssetCoinQueryInfoResponse struct {
	Rows []struct {
		Name string `json:"name"` // Coin name
		Coin string `json:"coin"` // Coin
		RemainAmount string `json:"remainAmount"` // Maximum withdraw amount per transaction
		Chains []struct {
			Chain string `json:"chain"` // Chain
			ChainType string `json:"chainType"` // Chain type
			Confirmation string `json:"confirmation"` // Number of confirmations for deposit: Once this number is reached, your funds will be credited to your account and available for trading
			WithdrawFee string `json:"withdrawFee"` // withdraw fee. _If withdraw fee is empty, It means that this coin does not support withdrawal_
			DepositMin string `json:"depositMin"` // Min. deposit
			WithdrawMin string `json:"withdrawMin"` // Min. withdraw
			MinAccuracy string `json:"minAccuracy"` // The precision of withdraw or deposit
			ChainDeposit string `json:"chainDeposit"` // The chain status of deposit. `0`: suspend. `1`: normal
			ChainWithdraw string `json:"chainWithdraw"` // The chain status of withdraw. `0`: suspend. `1`: normal
			WithdrawPercentageFee string `json:"withdrawPercentageFee"` // The withdraw fee percentage. It is a real figure, e.g., 0.022 means 2.2%
			ContractAddress string `json:"contractAddress"` // Contract address. `""` means no contract address
			SafeConfirmNumber string `json:"safeConfirmNumber"` // Number of security confirmations: Once this number is reached, your USD equivalent worth funds will be fully unlocked and available for withdrawal.
		} `json:"chains"`
	} `json:"rows"`
}

// GET /v5/asset/delivery-record
type GetAssetDeliveryRecordRequest struct {
	Category string `url:"category"` // Product type [UTA2.0](../acct-mode#uta-20): `inverse`(inverse futures), `linear`(USDT/USDC futures), `option` [UTA1.0](../acct-mode#uta-10): `linear`(USDT/USDC futures), `option`
	Symbol string `url:"symbol,omitempty"` // Symbol name, like `BTCUSDT`, uppercase only
	StartTime int64 `url:"startTime,omitempty"` // The start timestamp (ms) startTime and endTime are not passed, return 30 days by default Only startTime is passed, return range between startTime and startTime + 30 days Only endTime is passed, return range between endTime - 30 days and endTime If both are passed, the rule is endTime - startTime <= 30 days
	EndTime int64 `url:"endTime,omitempty"` // The end timestamp (ms)
	ExpDate string `url:"expDate,omitempty"` // Expiry date. `25MAR22`. Default: return all
	Limit int64 `url:"limit,omitempty"` // Limit for data size per page. [`1`, `50`]. Default: `20`
	Cursor string `url:"cursor,omitempty"` // Cursor. Use the `nextPageCursor` token from the response to retrieve the next page of the result set
}

type GetAssetDeliveryRecordResponse struct {
	Category string `json:"category"` // Product type
	List []struct {
		DeliveryTime string `json:"deliveryTime"` // Delivery time (ms)
		Symbol string `json:"symbol"` // Symbol name
		Side string `json:"side"` // `Buy`,`Sell`
		Position string `json:"position"` // Executed size
		EntryPrice string `json:"entryPrice"` // Avg entry price
		DeliveryPrice string `json:"deliveryPrice"` // Delivery price
		Strike string `json:"strike"` // Exercise price
		Fee string `json:"fee"` // Trading fee
		DeliveryRpl string `json:"deliveryRpl"` // Realized PnL of the delivery
	} `json:"list"`
	NextPageCursor string `json:"nextPageCursor"` // Refer to the `cursor` request parameter
}

// GET /v5/asset/deposit/query-address
type GetAssetDepositQueryAddressRequest struct {
	Coin string `url:"coin"` // Coin, uppercase only
	ChainType string `url:"chainType,omitempty"` // Please use the value of `>> chain` from [coin-info](../coin-info#) endpoint
}

type GetAssetDepositQueryAddressResponse struct {
	Coin string `json:"coin"` // Coin
	Chains []struct {
		ChainType string `json:"chainType"` // Chain type
		AddressDeposit string `json:"addressDeposit"` // The address for deposit
		TagDeposit string `json:"tagDeposit"` // Tag of deposit
		Chain string `json:"chain"` // Chain
		BatchReleaseLimit string `json:"batchReleaseLimit"` // The deposit limit for this coin in this chain. `"-1"` means no limit
		ContractAddress string `json:"contractAddress"` // The contract address of the coin. Only display last 6 characters, if there is no contract address, it shows `""`
	} `json:"chains"`
}

// GET /v5/asset/deposit/query-internal-record
type GetAssetDepositQueryInternalRecordRequest struct {
	TxID string `url:"txID,omitempty"` // Internal transfer transaction ID
	StartTime int64 `url:"startTime,omitempty"` // Start time (ms). Default value: 30 days before the current time
	EndTime int64 `url:"endTime,omitempty"` // End time (ms). Default value: current time
	Coin string `url:"coin,omitempty"` // Coin name: for example, BTC. Default value: all
	Cursor string `url:"cursor,omitempty"` // Cursor, used for pagination
	Limit int64 `url:"limit,omitempty"` // Number of items per page, [`1`, `50`]. Default value: 50
}

type GetAssetDepositQueryInternalRecordResponse struct {
	Rows []struct {
		Id string `json:"id"` // ID
		Type int64 `json:"type"` // `1`: Internal deposit
		Coin string `json:"coin"` // Deposit coin
		Amount string `json:"amount"` // Deposit amount
		Status int64 `json:"status"` // 1=Processing 2=Success 3=deposit failed
		Address string `json:"address"` // Email address or phone number
		CreatedTime string `json:"createdTime"` // Deposit created timestamp
		TxID string `json:"txID"` // Internal transfer transaction ID
		TaxDepositRecordsId string `json:"taxDepositRecordsId"` // This field is used for tax purposes by Bybit EU (Austria) users， declare tax id
		TaxStatus int64 `json:"taxStatus"` // This field is used for tax purposes by Bybit EU (Austria) users 0: No reporting required 1: Reporting pending 2: Reporting completed
	} `json:"rows"`
	NextPageCursor string `json:"nextPageCursor"` // cursor information: used for pagination. Default value: `""`
}

// GET /v5/asset/deposit/query-record
type GetAssetDepositQueryRecordRequest struct {
	Id string `url:"id,omitempty"` // Internal ID: Can be used to uniquely identify and filter the deposit. When combined with other parameters, this field takes the highest priority
	TxID string `url:"txID,omitempty"` // Transaction ID: Please note that data generated before Jan 1, 2024 cannot be queried using txID
	Coin string `url:"coin,omitempty"` // Coin, uppercase only
	StartTime int64 `url:"startTime,omitempty"` // The start timestamp (ms) _Note: the query logic is actually effective based on **second** level_
	EndTime int64 `url:"endTime,omitempty"` // The end timestamp (ms) _Note: the query logic is actually effective based on **second** level_
	Limit int64 `url:"limit,omitempty"` // Limit for data size per page. [`1`, `50`]. Default: `50`
	Cursor string `url:"cursor,omitempty"` // Cursor. Use the `nextPageCursor` token from the response to retrieve the next page of the result set
}

type GetAssetDepositQueryRecordResponse struct {
	Rows []struct {
		Coin string `json:"coin"` // Coin
		Chain string `json:"chain"` // Chain
		Amount string `json:"amount"` // Amount
		TxID string `json:"txID"` // Transaction ID
		Status int64 `json:"status"` // Deposit status
		ToAddress string `json:"toAddress"` // Deposit target address
		Tag string `json:"tag"` // Tag of deposit target address
		DepositFee string `json:"depositFee"` // Deposit fee
		SuccessAt string `json:"successAt"` // Last updated time
		Confirmations string `json:"confirmations"` // Number of confirmation blocks
		TxIndex string `json:"txIndex"` // Transaction sequence number
		BlockHash string `json:"blockHash"` // Hash number on the chain
		BatchReleaseLimit string `json:"batchReleaseLimit"` // The deposit limit for this coin in this chain. `"-1"` means no limit
		DepositType string `json:"depositType"` // The deposit type. `0`: normal deposit, `10`: the deposit reaches daily deposit limit, `20`: abnormal deposit
		FromAddress string `json:"fromAddress"` // From address of deposit, only shown when the deposit comes from on-chain and from address is unique, otherwise gives `""`
		TaxDepositRecordsId string `json:"taxDepositRecordsId"` // This field is used for tax purposes by Bybit EU (Austria) users， declare tax id
		TaxStatus int64 `json:"taxStatus"` // This field is used for tax purposes by Bybit EU (Austria) users 0: No reporting required 1: Reporting pending 2: Reporting completed
		Id string `json:"id"` // Unique ID
	} `json:"rows"`
	NextPageCursor string `json:"nextPageCursor"` // Refer to the `cursor` request parameter
}

// GET /v5/asset/deposit/query-sub-member-address
type GetAssetDepositQuerySubMemberAddressRequest struct {
	Coin string `url:"coin"` // Coin, uppercase only
	ChainType string `url:"chainType"` // Please use the value of `chain` from [coin-info](../coin-info#) endpoint
	SubMemberId string `url:"subMemberId"` // Sub user ID
}

type GetAssetDepositQuerySubMemberAddressResponse struct {
	Coin string `json:"coin"` // Coin
	Chains []struct {
		ChainType string `json:"chainType"` // Chain type
		AddressDeposit string `json:"addressDeposit"` // The address for deposit
		TagDeposit string `json:"tagDeposit"` // Tag of deposit
		Chain string `json:"chain"` // Chain
		BatchReleaseLimit string `json:"batchReleaseLimit"` // The deposit limit for this coin in this chain. `"-1"` means no limit
		ContractAddress string `json:"contractAddress"` // The contract address of the coin. Only display last 6 characters, if there is no contract address, it shows `""`
	} `json:"chains"`
}

// GET /v5/asset/deposit/query-sub-member-record
type GetAssetDepositQuerySubMemberRecordRequest struct {
	Id string `url:"id,omitempty"` // Internal ID: Can be used to uniquely identify and filter the deposit. When combined with other parameters, this field takes the highest priority
	TxID string `url:"txID,omitempty"` // Transaction ID: Please note that data generated before Jan 1, 2024 cannot be queried using txID
	SubMemberId string `url:"subMemberId"` // Sub UID
	Coin string `url:"coin,omitempty"` // Coin, uppercase only
	StartTime int64 `url:"startTime,omitempty"` // The start timestamp (ms) _Note: the query logic is actually effective based on **second** level_
	EndTime int64 `url:"endTime,omitempty"` // The end timestamp (ms) _Note: the query logic is actually effective based on **second** level_
	Limit int64 `url:"limit,omitempty"` // Limit for data size per page. [`1`, `50`]. Default: `50`
	Cursor string `url:"cursor,omitempty"` // Cursor. Use the `nextPageCursor` token from the response to retrieve the next page of the result set
}

type GetAssetDepositQuerySubMemberRecordResponse struct {
	Rows []struct {
		Id string `json:"id"` // Unique ID
		Coin string `json:"coin"` // Coin
		Chain string `json:"chain"` // Chain
		Amount string `json:"amount"` // Amount
		TxID string `json:"txID"` // Transaction ID
		Status int64 `json:"status"` // Deposit status
		ToAddress string `json:"toAddress"` // Deposit target address
		Tag string `json:"tag"` // Tag of deposit target address
		DepositFee string `json:"depositFee"` // Deposit fee
		SuccessAt string `json:"successAt"` // Last updated time
		Confirmations string `json:"confirmations"` // Number of confirmation blocks
		TxIndex string `json:"txIndex"` // Transaction sequence number
		BlockHash string `json:"blockHash"` // Hash number on the chain
		BatchReleaseLimit string `json:"batchReleaseLimit"` // The deposit limit for this coin in this chain. `"-1"` means no limit
		DepositType string `json:"depositType"` // The deposit type. `0`: normal deposit, `10`: the deposit reaches daily deposit limit, `20`: abnormal deposit
		FromAddress string `json:"fromAddress"` // From address of deposit, only shown when the deposit comes from on-chain and from address is unique, otherwise gives `""`
		TaxDepositRecordsId string `json:"taxDepositRecordsId"` // This field is used for tax purposes by Bybit EU (Austria) users， declare tax id
		TaxStatus int64 `json:"taxStatus"` // This field is used for tax purposes by Bybit EU (Austria) users 0: No reporting required 1: Reporting pending 2: Reporting completed
	} `json:"rows"`
	NextPageCursor string `json:"nextPageCursor"` // Refer to the `cursor` request parameter
}

// GET /v5/asset/exchange/convert-result-query
type GetAssetExchangeConvertResultQueryRequest struct {
	QuoteTxId string `url:"quoteTxId"` // Quote tx ID
	AccountType string `url:"accountType"` // Wallet type
}

type GetAssetExchangeConvertResultQueryResponse struct {
	Result struct {
		AccountType string `json:"accountType"` // Wallet type
		ExchangeTxId string `json:"exchangeTxId"` // Exchange tx ID, same as quote tx ID
		UserId string `json:"userId"` // User ID
		FromCoin string `json:"fromCoin"` // From coin
		FromCoinType string `json:"fromCoinType"` // From coin type. `crypto`
		ToCoin string `json:"toCoin"` // To coin
		ToCoinType string `json:"toCoinType"` // To coin type. `crypto`
		FromAmount string `json:"fromAmount"` // From coin amount (amount to sell)
		ToAmount string `json:"toAmount"` // To coin amount (amount to buy according to exchange rate)
		ExchangeStatus string `json:"exchangeStatus"` // Exchange status init processing success failure
		ExtInfo string `json:"extInfo"` // Reserved field, ignored for now
		ConvertRate string `json:"convertRate"` // Exchange rate
		CreatedAt string `json:"createdAt"` // Quote created time
	} `json:"result"`
}

// GET /v5/asset/exchange/order-record
type GetAssetExchangeOrderRecordRequest struct {
	FromCoin string `url:"fromCoin,omitempty"` // The currency to convert from, uppercase only. e.g,`BTC`
	ToCoin string `url:"toCoin,omitempty"` // The currency to convert to, uppercase only. e.g,`USDT`
	Limit int64 `url:"limit,omitempty"` // Limit for data size per page. [`1`, `50`]. Default: `10`
	Cursor string `url:"cursor,omitempty"` // Cursor. Use the `nextPageCursor` token from the response to retrieve the next page of the result set
}

type GetAssetExchangeOrderRecordResponse struct {
	NextPageCursor string `json:"nextPageCursor"` // Refer to the `cursor` request parameter
	OrderBody []struct {
		FromCoin string `json:"fromCoin"` // The currency to convert from
		FromAmount string `json:"fromAmount"` // The amount to convert from
		ToCoin string `json:"toCoin"` // The currency to convert to
		ToAmount string `json:"toAmount"` // The amount to convert to
		ExchangeRate string `json:"exchangeRate"` // Exchange rate
		CreatedTime string `json:"createdTime"` // Exchange created timestamp (sec)
		ExchangeTxId string `json:"exchangeTxId"` // Exchange transaction ID
	} `json:"orderBody"`
}

// GET /v5/asset/exchange/query-coin-list
type GetAssetExchangeQueryCoinListRequest struct {
	AccountType string `url:"accountType"` // Wallet type `eb_convert_funding` `eb_convert_uta` `eb_convert_spot` `eb_convert_contract` `eb_convert_inverse`
	Coin string `url:"coin,omitempty"` // Coin, uppercase only Convert from coin (coin to sell) when side=0, coin field is ignored
	Side int64 `url:"side,omitempty"` // `0`: fromCoin list, the balance is given if you have it; `1`: toCoin list (coin to buy) when side=1 and coin field is filled, it returns toCoin list based on coin field
}

type GetAssetExchangeQueryCoinListResponse struct {
	Coins string `json:"coins"` // Coin spec
}

// GET /v5/asset/exchange/query-convert-history
type GetAssetExchangeQueryConvertHistoryRequest struct {
	AccountType string `url:"accountType,omitempty"` // Wallet type Supports passing multiple types, separated by comma e.g., <code>eb_convert_funding,eb_convert_uta</code> Return all wallet types data if not passed
	Index int64 `url:"index,omitempty"` // Page number started from 1 1st page by default
	Limit int64 `url:"limit,omitempty"` // Page size 20 records by default up to 100 records, return 100 when exceeds 100
}

type GetAssetExchangeQueryConvertHistoryResponse struct {
	List string `json:"list"` // Array of quotes
}

// GET /v5/asset/settlement-record
type GetAssetSettlementRecordRequest struct {
	Category string `url:"category"` // Product type [UTA2.0](../acct-mode#uta-20): `linear`(USDC contract) [UTA1.0](../acct-mode#uta-10): `linear`(USDC contract)
	Symbol string `url:"symbol,omitempty"` // Symbol name, like `BTCPERP`, uppercase only
	StartTime int64 `url:"startTime,omitempty"` // The start timestamp (ms) startTime and endTime are not passed, return 30 days by default Only startTime is passed, return range between startTime and startTime + 30 days Only endTime is passed, return range between endTime-30 days and endTime If both are passed, the rule is endTime - startTime <= 30 days
	EndTime int64 `url:"endTime,omitempty"` // The end time. timestamp (ms)
	Limit int64 `url:"limit,omitempty"` // Limit for data size per page. [`1`, `50`]. Default: `20`
	Cursor string `url:"cursor,omitempty"` // Cursor. Use the `nextPageCursor` token from the response to retrieve the next page of the result set
}

type GetAssetSettlementRecordResponse struct {
	Category string `json:"category"` // Product type
	List []struct {
		Symbol string `json:"symbol"` // Symbol name
		Side string `json:"side"` // `Buy`,`Sell`
		Size string `json:"size"` // Position size
		SessionAvgPrice string `json:"sessionAvgPrice"` // Settlement price
		MarkPrice string `json:"markPrice"` // Mark price
		RealisedPnl string `json:"realisedPnl"` // Realised PnL
		CreatedTime string `json:"createdTime"` // Created time (ms)
	} `json:"list"`
	NextPageCursor string `json:"nextPageCursor"` // Refer to the `cursor` request parameter
}

// GET /v5/asset/transfer/query-account-coin-balance
type GetAssetTransferQueryAccountCoinBalanceRequest struct {
	MemberId string `url:"memberId,omitempty"` // UID. **Required** when querying sub UID balance with master api key
	ToMemberId string `url:"toMemberId,omitempty"` // UID. **Required** when querying the transferable balance between different UIDs
	AccountType string `url:"accountType"` // Account type
	ToAccountType string `url:"toAccountType,omitempty"` // To account type. **Required** when querying the transferable balance between different account types
	Coin string `url:"coin"` // Coin, uppercase only
	WithBonus int64 `url:"withBonus,omitempty"` // `0`(default): not query bonus. `1`: query bonus
	WithTransferSafeAmount int64 `url:"withTransferSafeAmount,omitempty"` // Whether query delay withdraw/transfer safe amount `0`(default): false, `1`: true What is [delay withdraw amount](delay-amount#)?
	WithLtvTransferSafeAmount int64 `url:"withLtvTransferSafeAmount,omitempty"` // For OTC loan users in particular, you can check the transferable amount under risk level `0`(default): false, `1`: true `toAccountType` is mandatory
}

type GetAssetTransferQueryAccountCoinBalanceResponse struct {
	AccountType string `json:"accountType"` // Account type
	BizType int64 `json:"bizType"` // Biz type
	AccountId string `json:"accountId"` // Account ID
	MemberId string `json:"memberId"` // Uid
	Balance struct {
		Coin string `json:"coin"` // Coin
		WalletBalance string `json:"walletBalance"` // Wallet balance
		TransferBalance string `json:"transferBalance"` // Transferable balance
		Bonus string `json:"bonus"` // bonus
		TransferSafeAmount string `json:"transferSafeAmount"` // Safe amount to transfer. Keep `""` if not query
		LtvTransferSafeAmount string `json:"ltvTransferSafeAmount"` // Transferable amount for ins loan account. Keep `""` if not query
	} `json:"balance"`
}

// GET /v5/asset/transfer/query-account-coins-balance
type GetAssetTransferQueryAccountCoinsBalanceRequest struct {
	MemberId string `url:"memberId,omitempty"` // User Id. It is <b>required</b> when you use master api key to check sub account coin balance
	AccountType string `url:"accountType"` // Account type
	Coin string `url:"coin,omitempty"` // Coin name, uppercase only Query all coins if not passed Can query multiple coins, separated by comma. `USDT,USDC,ETH` **Note:** this field is **mandatory** for accountType=`UNIFIED`, and supports up to 10 coins each request
	WithBonus int64 `url:"withBonus,omitempty"` // `0`(default): not query bonus. `1`: query bonus
}

type GetAssetTransferQueryAccountCoinsBalanceResponse struct {
	AccountType string `json:"accountType"` // Account type
	MemberId string `json:"memberId"` // UserID
	Balance []struct {
		Coin string `json:"coin"` // Currency
		WalletBalance string `json:"walletBalance"` // Wallet balance
		TransferBalance string `json:"transferBalance"` // Transferable balance
		Bonus string `json:"bonus"` // Bonus
	} `json:"balance"`
}

// GET /v5/asset/transfer/query-asset-info
type GetAssetTransferQueryAssetInfoRequest struct {
	AccountType string `url:"accountType"` // Account type. `SPOT`
	Coin string `url:"coin,omitempty"` // Coin name, uppercase only
}

type GetAssetTransferQueryAssetInfoResponse struct {
	Spot struct {
		Status string `json:"status"` // account status. `ACCOUNT_STATUS_NORMAL`: normal, `ACCOUNT_STATUS_UNSPECIFIED`: banned
		Assets []struct {
			Coin string `json:"coin"` // Coin
			Frozen string `json:"frozen"` // Freeze amount
			Free string `json:"free"` // Free balance
			Withdraw string `json:"withdraw"` // Amount in withdrawing
		} `json:"assets"`
	} `json:"spot"`
}

// GET /v5/asset/transfer/query-inter-transfer-list
type GetAssetTransferQueryInterTransferListRequest struct {
	TransferId string `url:"transferId,omitempty"` // UUID. Use the one you generated in [createTransfer](create-inter-transfer#response-parameters)
	Coin string `url:"coin,omitempty"` // Coin, uppercase only
	Status string `url:"status,omitempty"` // Transfer status
	StartTime int64 `url:"startTime,omitempty"` // The start timestamp (ms) _Note: the query logic is actually effective based on **second** level_
	EndTime int64 `url:"endTime,omitempty"` // The end timestamp (ms) _Note: the query logic is actually effective based on **second** level_
	Limit int64 `url:"limit,omitempty"` // Limit for data size per page. [`1`, `50`]. Default: `20`
	Cursor string `url:"cursor,omitempty"` // Cursor. Use the `nextPageCursor` token from the response to retrieve the next page of the result set
}

type GetAssetTransferQueryInterTransferListResponse struct {
	List []struct {
		TransferId string `json:"transferId"` // Transfer ID
		Coin string `json:"coin"` // Transferred coin
		Amount string `json:"amount"` // Transferred amount
		FromAccountType string `json:"fromAccountType"` // From account type
		ToAccountType string `json:"toAccountType"` // To account type
		Timestamp string `json:"timestamp"` // Transfer created timestamp (ms)
		Status string `json:"status"` // Transfer status
	} `json:"list"`
	NextPageCursor string `json:"nextPageCursor"` // Refer to the `cursor` request parameter
}

// GET /v5/asset/transfer/query-sub-member-list
type GetAssetTransferQuerySubMemberListRequest struct {
}

type GetAssetTransferQuerySubMemberListResponse struct {
	SubMemberIds string `json:"subMemberIds"` // All sub UIDs under the main UID
	TransferableSubMemberIds string `json:"transferableSubMemberIds"` // All sub UIDs that have universal transfer enabled
}

// GET /v5/asset/transfer/query-transfer-coin-list
type GetAssetTransferQueryTransferCoinListRequest struct {
	FromAccountType string `url:"fromAccountType"` // From account type
	ToAccountType string `url:"toAccountType"` // To account type
}

type GetAssetTransferQueryTransferCoinListResponse struct {
	List []string `json:"list"`
}

// GET /v5/asset/transfer/query-universal-transfer-list
type GetAssetTransferQueryUniversalTransferListRequest struct {
	TransferId string `url:"transferId,omitempty"` // UUID. Use the one you generated in [createTransfer](create-inter-transfer#response-parameters)
	Coin string `url:"coin,omitempty"` // Coin, uppercase only
	Status string `url:"status,omitempty"` // Transfer status. `SUCCESS`,`FAILED`,`PENDING`
	StartTime int64 `url:"startTime,omitempty"` // The start timestamp (ms) _Note: the query logic is actually effective based on **second** level_
	EndTime int64 `url:"endTime,omitempty"` // The end timestamp (ms) _Note: the query logic is actually effective based on **second** level_
	Limit int64 `url:"limit,omitempty"` // Limit for data size per page. [`1`, `50`]. Default: `20`
	Cursor string `url:"cursor,omitempty"` // Cursor. Use the `nextPageCursor` token from the response to retrieve the next page of the result set
}

type GetAssetTransferQueryUniversalTransferListResponse struct {
	List []struct {
		TransferId string `json:"transferId"` // Transfer ID
		Coin string `json:"coin"` // Transferred coin
		Amount string `json:"amount"` // Transferred amount
		FromMemberId string `json:"fromMemberId"` // From UID
		ToMemberId string `json:"toMemberId"` // TO UID
		FromAccountType string `json:"fromAccountType"` // From account type
		ToAccountType string `json:"toAccountType"` // To account type
		Timestamp string `json:"timestamp"` // Transfer created timestamp (ms)
		Status string `json:"status"` // Transfer status
	} `json:"list"`
	NextPageCursor string `json:"nextPageCursor"` // Refer to the `cursor` request parameter
}

// GET /v5/asset/withdraw/query-record
type GetAssetWithdrawQueryRecordRequest struct {
	WithdrawID string `url:"withdrawID,omitempty"` // Withdraw ID
	TxID string `url:"txID,omitempty"` // Transaction hash ID
	Coin string `url:"coin,omitempty"` // Coin, uppercase only
	WithdrawType int64 `url:"withdrawType,omitempty"` // Withdraw type. `0`(default): on chain. `1`: off chain. `2`: all
	StartTime int64 `url:"startTime,omitempty"` // The start timestamp (ms)
	EndTime int64 `url:"endTime,omitempty"` // The end timestamp (ms)
	Limit int64 `url:"limit,omitempty"` // Limit for data size per page. [`1`, `50`]. Default: `50`
	Cursor string `url:"cursor,omitempty"` // Cursor. Use the `nextPageCursor` token from the response to retrieve the next page of the result set
}

type GetAssetWithdrawQueryRecordResponse struct {
	Rows []struct {
		TxID string `json:"txID"` // Transaction ID. It returns `""` when withdrawal failed, withdrawal cancelled
		Coin string `json:"coin"` // Coin
		Chain string `json:"chain"` // Chain
		Amount string `json:"amount"` // Amount
		WithdrawFee string `json:"withdrawFee"` // Withdraw fee
		Status string `json:"status"` // Withdraw status
		ToAddress string `json:"toAddress"` // To withdrawal address. Shows the Bybit UID for internal transfers
		Tag string `json:"tag"` // Tag
		CreateTime string `json:"createTime"` // Withdraw created timestamp (ms)
		UpdateTime string `json:"updateTime"` // Withdraw updated timestamp (ms)
		WithdrawId string `json:"withdrawId"` // Withdraw ID
		WithdrawType int64 `json:"withdrawType"` // Withdraw type. `0`: on chain. `1`: off chain
		Fee string `json:"fee"`
		Tax string `json:"tax"`
		TaxRate string `json:"taxRate"`
		TaxType string `json:"taxType"`
	} `json:"rows"`
	NextPageCursor string `json:"nextPageCursor"` // Cursor. Used for pagination
}

// GET /v5/asset/withdraw/vasp/list
type GetAssetWithdrawVaspListRequest struct {
}

type GetAssetWithdrawVaspListResponse struct {
	Vasp []struct {
		VaspEntityId string `json:"vaspEntityId"` // Receiver platform id. When transfer to Upbit or other exchanges that not in the list, please use vaspEntityId='others'
		VaspName string `json:"vaspName"` // Receiver platform name
	} `json:"vasp"`
}

// GET /v5/asset/withdraw/withdrawable-amount
type GetAssetWithdrawWithdrawableAmountRequest struct {
	Coin string `url:"coin"` // Coin name, uppercase only
}

type GetAssetWithdrawWithdrawableAmountResponse struct {
	LimitAmountUsd string `json:"limitAmountUsd"` // The frozen amount due to risk, in USD
	WithdrawableAmount struct {
		SPOT struct {
			Coin string `json:"coin"` // Coin name
			WithdrawableAmount string `json:"withdrawableAmount"` // Amount that can be withdrawn
			AvailableBalance string `json:"availableBalance"` // Available balance
		} `json:"SPOT"`
		FUND struct {
			Coin string `json:"coin"` // Coin name
			WithdrawableAmount string `json:"withdrawableAmount"` // Amount that can be withdrawn
			AvailableBalance string `json:"availableBalance"` // Available balance
		} `json:"FUND"`
		UTA struct {
			Coin string `json:"coin"` // Coin name
			WithdrawableAmount string `json:"withdrawableAmount"` // Amount that can be withdrawn
			AvailableBalance string `json:"availableBalance"` // Available balance
		} `json:"UTA"`
	} `json:"withdrawableAmount"`
}

// POST /v5/asset/deposit/deposit-to-account
type PostAssetDepositDepositToAccountRequest struct {
	AccountType string `json:"accountType"` // Account type <code>UNIFIED</code> <code>SPOT</code> <code>CONTRACT</code> <code>FUND</code>
}

type PostAssetDepositDepositToAccountResponse struct {
	Status int64 `json:"status"` // Request result: `1`: SUCCESS `0`: FAIL
}

// POST /v5/asset/exchange/convert-execute
type PostAssetExchangeConvertExecuteRequest struct {
	QuoteTxId string `json:"quoteTxId"` // The quote tx ID from [Request a Quote](apply-quote#response-parameters)
}

type PostAssetExchangeConvertExecuteResponse struct {
	QuoteTxId string `json:"quoteTxId"` // Quote transaction ID
	ExchangeStatus string `json:"exchangeStatus"` // Exchange status init processing success failure
}

// POST /v5/asset/exchange/quote-apply
type PostAssetExchangeQuoteApplyRequest struct {
	AccountType string `json:"accountType"` // Wallet type
	FromCoin string `json:"fromCoin"` // Convert from coin (coin to sell)
	ToCoin string `json:"toCoin"` // Convert to coin (coin to buy)
	RequestCoin string `json:"requestCoin"` // Request coin, same as fromCoin In the future, we may support requestCoin=toCoin
	RequestAmount string `json:"requestAmount"` // request coin amount (the amount you want to sell)
	FromCoinType string `json:"fromCoinType,omitempty"` // `crypto`
	ToCoinType string `json:"toCoinType,omitempty"` // `crypto`
	ParamType string `json:"paramType,omitempty"` // `opFrom`, mainly used for API broker user
	ParamValue string `json:"paramValue,omitempty"` // Broker ID, mainly used for API broker user
	RequestId string `json:"requestId,omitempty"` // Customised request ID a maximum length of 36 Generally it is useless, but it is convenient to track the quote request internally if you fill this field
}

type PostAssetExchangeQuoteApplyResponse struct {
	QuoteTxId string `json:"quoteTxId"` // Quote transaction ID. It is system generated, and it is used to confirm quote and query the result of transaction
	ExchangeRate string `json:"exchangeRate"` // Exchange rate
	FromCoin string `json:"fromCoin"` // From coin
	FromCoinType string `json:"fromCoinType"` // From coin type. `crypto`
	ToCoin string `json:"toCoin"` // To coin
	ToCoinType string `json:"toCoinType"` // To coin type. `crypto`
	FromAmount string `json:"fromAmount"` // From coin amount (amount to sell)
	ToAmount string `json:"toAmount"` // To coin amount (amount to buy according to exchange rate)
	ExpiredTime string `json:"expiredTime"` // The expiry time for this quote (15 seconds)
	RequestId string `json:"requestId"` // Customised request ID
	ExtTaxAndFee []string `json:"extTaxAndFee"`
}

// POST /v5/asset/transfer/inter-transfer
type PostAssetTransferInterTransferRequest struct {
	TransferId string `json:"transferId"` // [UUID](https://www.uuidgenerator.net/dev-corner). Please manually generate a UUID
	Coin string `json:"coin"` // Coin, uppercase only
	Amount string `json:"amount"` // Amount
	FromAccountType string `json:"fromAccountType"` // From account type
	ToAccountType string `json:"toAccountType"` // To account type
}

type PostAssetTransferInterTransferResponse struct {
	TransferId string `json:"transferId"` // UUID
	Status string `json:"status"` // Transfer status `STATUS_UNKNOWN` `SUCCESS` `PENDING` `FAILED`
}

// POST /v5/asset/transfer/universal-transfer
type PostAssetTransferUniversalTransferRequest struct {
	TransferId string `json:"transferId"` // [UUID](https://www.uuidgenerator.net/dev-corner). Please manually generate a UUID
	Coin string `json:"coin"` // Coin, uppercase only
	Amount string `json:"amount"` // Amount
	FromMemberId int64 `json:"fromMemberId"` // From UID
	ToMemberId int64 `json:"toMemberId"` // To UID
	FromAccountType string `json:"fromAccountType"` // From account type
	ToAccountType string `json:"toAccountType"` // To account type
}

type PostAssetTransferUniversalTransferResponse struct {
	TransferId string `json:"transferId"` // UUID
	Status string `json:"status"` // Transfer status `STATUS_UNKNOWN` `SUCCESS` `PENDING` `FAILED`
}

// POST /v5/asset/withdraw/cancel
type PostAssetWithdrawCancelRequest struct {
	Id string `json:"id"` // Withdrawal ID
}

type PostAssetWithdrawCancelResponse struct {
	Status int64 `json:"status"` // `0`: fail. `1`: success
}

// POST /v5/asset/withdraw/create
type PostAssetWithdrawCreateRequest struct {
	Coin string `json:"coin"` // Coin, uppercase only
	Chain string `json:"chain,omitempty"` // Chain `forceChain`=0 or 1: this field is **required** `forceChain`=2: this field can be null
	Address string `json:"address"` // `forceChain`=0 or 1: fill wallet address, and make sure you add address in the [address book](https://www.bybit.com/user/assets/money-address) first. Please note that the address is case sensitive, so use the exact same address added in address book `forceChain`=2: fill Bybit UID, and it can only be another Bybit **main** account UID. Make sure you add UID in the [address book](https://www.bybit.com/user/assets/money-address) first
	Tag string `json:"tag,omitempty"` // Tag **Required** if tag exists in the wallet address list. **Note**: please do not set a tag/memo in the address book if the chain does not support tag
	Amount string `json:"amount"` // Withdraw amount
	Timestamp int64 `json:"timestamp"` // Current timestamp (ms). Used for preventing from withdraw replay
	ForceChain int64 `json:"forceChain,omitempty"` // Whether or not to force an on-chain withdrawal `0`(default): If the address is parsed out to be an internal address, then internal transfer (**Bybit main account only**) `1`: Force the withdrawal to occur on-chain `2`: Use UID to withdraw
	AccountType string `json:"accountType"` // Select the wallet to be withdrawn from `FUND`: Funding wallet `UTA`: System transfers the funds to Funding wallet to withdraw `FUND,UTA`: For combo withdrawals, funds will be deducted from the Funding wallet first. If the balance is insufficient, the remaining amount will be deducted from the UTA wallet. `SPOT`: withdraw from spot wallet (classic account only)
	FeeType int64 `json:"feeType,omitempty"` // Handling fee option `0`(default): input amount is the actual amount received, so you have to calculate handling fee manually `1`: input amount is not the actual amount you received, the system will help to deduct the handling fee automatically
	RequestId string `json:"requestId,omitempty"` // Customised ID, globally unique, it is used for idempotent verification A combination of letters (case sensitive) and numbers, which can be pure letters or pure numbers and the length must be between 1 and 32 digits
	Beneficiary string `json:"beneficiary,omitempty"` // Travel rule info. It is **required** for kyc/kyb=KOR (Korean), kyc=IND (India) users, and users who registered in [Bybit Turkey(TR)](https://www.bybit-tr.com/en-TR/), [Bybit Kazakhstan(KZ)](https://www.bybit.kz/kk-KAZ/), Bybit Indonesia (ID)
}

type PostAssetWithdrawCreateResponse struct {
	Id string `json:"id"` // Withdrawal ID
}

