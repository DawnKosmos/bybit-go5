// Code generated by bybitgen; DO NOT EDIT.
package models

// GET /v5/execution/list
type GetExecutionListRequest struct {
	Category string `url:"category"` // Product type [UTA2.0](../acct-mode#uta-20), [UTA1.0](../acct-mode#uta-10): `linear`, `inverse`, `spot`, `option` classic account: `linear`, `inverse`, `spot`
	Symbol string `url:"symbol,omitempty"` // Symbol name, like `BTCUSDT`, uppercase only
	OrderId string `url:"orderId,omitempty"` // Order ID
	OrderLinkId string `url:"orderLinkId,omitempty"` // User customised order ID. _Classic account does not support this param_
	BaseCoin string `url:"baseCoin,omitempty"` // Base coin, uppercase only [UTA1.0](../acct-mode#uta-10)(category=inverse) and classic account are not supported
	StartTime int64 `url:"startTime,omitempty"` // The start timestamp (ms) startTime and endTime are not passed, return 7 days by default; Only startTime is passed, return range between startTime and startTime+7 days Only endTime is passed, return range between endTime-7 days and endTime If both are passed, the rule is endTime - startTime <= 7 days
	EndTime int64 `url:"endTime,omitempty"` // The end timestamp (ms)
	ExecType string `url:"execType,omitempty"` // Execution type. _Classic `spot` is not supported_
	Limit int64 `url:"limit,omitempty"` // Limit for data size per page. [`1`, `100`]. Default: `50`
	Cursor string `url:"cursor,omitempty"` // Cursor. Use the `nextPageCursor` token from the response to retrieve the next page of the result set
}

type GetExecutionListResponse struct {
	Category string `json:"category"` // Product type
	List []struct {
		Symbol string `json:"symbol"` // Symbol name
		OrderId string `json:"orderId"` // Order ID
		OrderLinkId string `json:"orderLinkId"` // User customized order ID. _Classic `spot` is not supported_
		Side string `json:"side"` // Side. `Buy`,`Sell`
		OrderPrice string `json:"orderPrice"` // Order price
		OrderQty string `json:"orderQty"` // Order qty
		LeavesQty string `json:"leavesQty"` // The remaining qty not executed. _Classic `spot` is not supported_
		CreateType string `json:"createType"` // Order create type classic account & [UTA1.0](../acct-mode#uta-10)(category=inverse): always `""` Spot, Option do not have this key
		OrderType string `json:"orderType"` // Order type. `Market`,`Limit`
		StopOrderType string `json:"stopOrderType"` // Stop order type. If the order is not stop order, it either returns `UNKNOWN` or `""`. _Classic `spot` is not supported_
		ExecFee string `json:"execFee"` // Executed trading fee. You can get spot fee currency instruction [here](../enum#spot-fee-currency-instruction)
		ExecFeeV2 string `json:"execFeeV2"` // Spot leg transaction fee, only works for execType=`FutureSpread`
		ExecId string `json:"execId"` // Execution ID
		ExecPrice string `json:"execPrice"` // Execution price
		ExecQty string `json:"execQty"` // Execution qty
		ExecType string `json:"execType"` // Executed type. _Classic `spot` is not supported_
		ExecValue string `json:"execValue"` // Executed order value. _Classic `spot` is not supported_
		ExecTime string `json:"execTime"` // Executed timestamp (ms)
		FeeCurrency string `json:"feeCurrency"` // Spot trading fee currency _Classic `spot` is not supported_
		IsMaker bool `json:"isMaker"` // Is maker order. `true`: maker, `false`: taker
		FeeRate string `json:"feeRate"` // Trading fee rate. _Classic `spot` is not supported_
		TradeIv string `json:"tradeIv"` // Implied volatility. Valid for `option`
		MarkIv string `json:"markIv"` // Implied volatility of mark price. Valid for `option`
		MarkPrice string `json:"markPrice"` // The mark price of the symbol when executing. _Classic `spot` is not supported_
		IndexPrice string `json:"indexPrice"` // The index price of the symbol when executing. _Valid for `option` only_
		UnderlyingPrice string `json:"underlyingPrice"` // The underlying price of the symbol when executing. _Valid for `option`_
		BlockTradeId string `json:"blockTradeId"` // Paradigm block trade ID
		ClosedSize string `json:"closedSize"` // Closed position size
		Seq int64 `json:"seq"` // Cross sequence, used to associate each fill and each position update The seq will be the same when conclude multiple transactions at the same time Different symbols may have the same seq, please use seq + symbol to check unique classic account Spot trade does not have this field
		ExtraFees string `json:"extraFees"` // Trading fee rate information. Currently, this data is returned only for kyc=Indian user or spot orders placed on the Indonesian site or spot fiat currency orders placed on the EU site. In other cases, an empty string is returned. Enum: [feeType](../enum#extrafeesfeetype), [subFeeType](../enum#extrafeessubfeetype)
	} `json:"list"`
	NextPageCursor string `json:"nextPageCursor"` // Refer to the `cursor` request parameter
}

// GET /v5/order/history
type GetOrderHistoryRequest struct {
	Category string `url:"category"` // Product type [UTA2.0](../acct-mode#uta-20), [UTA1.0](../acct-mode#uta-10): `linear`, `inverse`, `spot`, `option` classic account: `linear`, `inverse`, `spot`
	Symbol string `url:"symbol,omitempty"` // Symbol name, like `BTCUSDT`, uppercase only
	BaseCoin string `url:"baseCoin,omitempty"` // Base coin, uppercase only [UTA1.0](../acct-mode#uta-10)(inverse), classic account do **not** support this param
	SettleCoin string `url:"settleCoin,omitempty"` // Settle coin, uppercase only [UTA1.0](../acct-mode#uta-10)(inverse), classic account do **not** support this param
	OrderId string `url:"orderId,omitempty"` // Order ID
	OrderLinkId string `url:"orderLinkId,omitempty"` // User customised order ID
	OrderFilter string `url:"orderFilter,omitempty"` // `Order`: active order `StopOrder`: conditional order for Futures and Spot `tpslOrder`: spot TP/SL order `OcoOrder`: spot OCO orders `BidirectionalTpslOrder`: Spot bidirectional TPSL order classic account `spot`: return `Order` active order by default Others: all kinds of orders by default
	OrderStatus string `url:"orderStatus,omitempty"` // Classic `spot`: not supported [UTA2.0](../acct-mode#uta-20), [UTA1.0](../acct-mode#uta-10)(except inverse): return all <b>closed</b> status orders if not passed [UTA1.0](../acct-mode#uta-10)(inverse), classic account(linear, inverse): return all status orders if not passed
	StartTime int64 `url:"startTime,omitempty"` // The start timestamp (ms) startTime and endTime are not passed, return 7 days by default Only startTime is passed, return range between startTime and startTime+7 days Only endTime is passed, return range between endTime-7 days and endTime If both are passed, the rule is endTime - startTime <= 7 days
	EndTime int64 `url:"endTime,omitempty"` // The end timestamp (ms)
	Limit int64 `url:"limit,omitempty"` // Limit for data size per page. [`1`, `50`]. Default: `20`
	Cursor string `url:"cursor,omitempty"` // Cursor. Use the `nextPageCursor` token from the response to retrieve the next page of the result set
}

type GetOrderHistoryResponse struct {
	Category string `json:"category"` // Product type
	List []struct {
		OrderId string `json:"orderId"` // Order ID
		OrderLinkId string `json:"orderLinkId"` // User customised order ID
		BlockTradeId string `json:"blockTradeId"` // Block trade ID
		Symbol string `json:"symbol"` // Symbol name
		Price string `json:"price"` // Order price
		Qty string `json:"qty"` // Order qty
		Side string `json:"side"` // Side. `Buy`,`Sell`
		IsLeverage string `json:"isLeverage"` // Whether to borrow. **Unified `spot`** only. `0`: false, `1`: true. . _Classic `spot` is not supported, always `0`_
		PositionIdx int64 `json:"positionIdx"` // Position index. Used to identify positions in different position modes
		OrderStatus string `json:"orderStatus"` // Order status
		CreateType string `json:"createType"` // Order create type Only for category=linear or inverse Spot, Option do not have this key
		CancelType string `json:"cancelType"` // Cancel type
		RejectReason string `json:"rejectReason"` // Reject reason. _Classic `spot` is not supported_
		AvgPrice string `json:"avgPrice"` // Average filled price UTA: returns `""` for those orders without avg price classic account: returns `"0"` for those orders without avg price, and also for those orders have partilly filled but cancelled at the end
		LeavesQty string `json:"leavesQty"` // The remaining qty not executed. _Classic `spot` is not supported_
		LeavesValue string `json:"leavesValue"` // The estimated value not executed. _Classic `spot` is not supported_
		CumExecQty string `json:"cumExecQty"` // Cumulative executed order qty
		CumExecValue string `json:"cumExecValue"` // Cumulative executed order value. _Classic `spot` is not supported_
		CumExecFee string `json:"cumExecFee"` // Cumulative executed trading fee. _Classic `spot` is not supported_
		TimeInForce string `json:"timeInForce"` // Time in force
		OrderType string `json:"orderType"` // Order type. `Market`,`Limit`. For TP/SL order, it means the order type after triggered `Block trade Roll Back`, `Block trade-Limit`: Unique enum values for Unified account block trades
		StopOrderType string `json:"stopOrderType"` // Stop order type
		OrderIv string `json:"orderIv"` // Implied volatility
		MarketUnit string `json:"marketUnit"` // The unit for `qty` when create **Spot market** orders for **UTA account**. `baseCoin`, `quoteCoin`
		SlippageToleranceType string `json:"slippageToleranceType"` // Spot and Futures market order slippage tolerance type `TickSize`, `Percent`, `UNKNOWN`(default)
		SlippageTolerance string `json:"slippageTolerance"` // Slippage tolerance value
		TriggerPrice string `json:"triggerPrice"` // Trigger price. If `stopOrderType`=_TrailingStop_, it is activate price. Otherwise, it is trigger price
		TakeProfit string `json:"takeProfit"` // Take profit price
		StopLoss string `json:"stopLoss"` // Stop loss price
		TpslMode string `json:"tpslMode"` // TP/SL mode, `Full`: entire position for TP/SL. `Partial`: partial position tp/sl. Spot does not have this field, and Option returns always ""
		OcoTriggerBy string `json:"ocoTriggerBy"` // The trigger type of Spot OCO order.`OcoTriggerByUnknown`, `OcoTriggerByTp`, `OcoTriggerBySl`. _Classic `spot` is not supported_
		TpLimitPrice string `json:"tpLimitPrice"` // The limit order price when take profit price is triggered
		SlLimitPrice string `json:"slLimitPrice"` // The limit order price when stop loss price is triggered
		TpTriggerBy string `json:"tpTriggerBy"` // The price type to trigger take profit
		SlTriggerBy string `json:"slTriggerBy"` // The price type to trigger stop loss
		TriggerDirection int64 `json:"triggerDirection"` // Trigger direction. `1`: rise, `2`: fall
		TriggerBy string `json:"triggerBy"` // The price type of trigger price
		LastPriceOnCreated string `json:"lastPriceOnCreated"` // Last price when place the order, Spot is not applicable
		BasePrice string `json:"basePrice"` // Last price when place the order, Spot has this field only
		ReduceOnly bool `json:"reduceOnly"` // Reduce only. `true` means reduce position size
		CloseOnTrigger bool `json:"closeOnTrigger"` // Close on trigger. <a href="https://www.bybit.com/en/help-center/article/Close-On-Trigger-Order">What is a close on trigger order?</a>
		PlaceType string `json:"placeType"` // Place type, `option` used. `iv`, `price`
		SmpType string `json:"smpType"` // SMP execution type
		SmpGroup int64 `json:"smpGroup"` // Smp group ID. If the UID has no group, it is `0` by default
		SmpOrderId string `json:"smpOrderId"` // The counterparty's orderID which triggers this SMP execution
		CreatedTime string `json:"createdTime"` // Order created timestamp (ms)
		UpdatedTime string `json:"updatedTime"` // Order updated timestamp (ms)
		ExtraFees string `json:"extraFees"` // Trading fee rate information. Currently, this data is returned only for spot orders placed on the Indonesian site or spot fiat currency orders placed on the EU site. In other cases, an empty string is returned. Enum: [feeType](../enum#extrafeesfeetype), [subFeeType](../enum#extrafeessubfeetype)
	} `json:"list"`
	NextPageCursor string `json:"nextPageCursor"` // Refer to the `cursor` request parameter
}

// GET /v5/order/realtime
type GetOrderRealtimeRequest struct {
	Category string `url:"category"` // Product type [UTA2.0](../acct-mode#uta-20), [UTA1.0](../acct-mode#uta-10): `linear`, `inverse`, `spot`, `option` classic account: `linear`, `inverse`, `spot`
	Symbol string `url:"symbol,omitempty"` // Symbol name, like `BTCUSDT`, uppercase only. For **linear**, either `symbol`, `baseCoin`, `settleCoin` is **required**
	BaseCoin string `url:"baseCoin,omitempty"` // Base coin, uppercase only Supports `linear`, `inverse` & `option` `option`: it returns all option open orders by default
	SettleCoin string `url:"settleCoin,omitempty"` // Settle coin, uppercase only <b>linear</b>: either `symbol`, `baseCoin` or `settleCoin` is **required** `spot`: not supported `option`: USDT or USDC
	OrderId string `url:"orderId,omitempty"` // Order ID
	OrderLinkId string `url:"orderLinkId,omitempty"` // User customised order ID
	OpenOnly int64 `url:"openOnly,omitempty"` // `0`(default): [UTA2.0](../acct-mode#uta-20), [UTA1.0](../acct-mode#uta-10), classic account query open status orders (e.g., New, PartiallyFilled) **only** `1`: [UTA2.0](../acct-mode#uta-20), [UTA1.0](../acct-mode#uta-10)(except inverse) `2`: [UTA1.0](../acct-mode#uta-10)(inverse), classic account Query a maximum of recent 500 closed status records are kept under each account each category (e.g., Cancelled, Rejected, Filled orders). <i>If the Bybit service is restarted due to an update, this part of the data will be cleared and accumulated again, but the order records will still be queried in [order history](order-list#)</i> `openOnly` param will be ignored when query by _orderId_ or _orderLinkId_ Classic `spot`: not supported
	OrderFilter string `url:"orderFilter,omitempty"` // `Order`: active order, `StopOrder`: conditional order for Futures and Spot, `tpslOrder`: spot TP/SL order, `OcoOrder`: Spot oco order, `BidirectionalTpslOrder`: Spot bidirectional TPSL order classic account `spot`: return `Order` active order by default Others: all kinds of orders by default
	Limit int64 `url:"limit,omitempty"` // Limit for data size per page. [`1`, `50`]. Default: `20`
	Cursor string `url:"cursor,omitempty"` // Cursor. Use the `nextPageCursor` token from the response to retrieve the next page of the result set
}

type GetOrderRealtimeResponse struct {
	Category string `json:"category"` // Product type
	NextPageCursor string `json:"nextPageCursor"` // Refer to the `cursor` request parameter
	List []struct {
		OrderId string `json:"orderId"` // Order ID
		OrderLinkId string `json:"orderLinkId"` // User customised order ID
		BlockTradeId string `json:"blockTradeId"` // Paradigm block trade ID
		Symbol string `json:"symbol"` // Symbol name
		Price string `json:"price"` // Order price
		Qty string `json:"qty"` // Order qty
		Side string `json:"side"` // Side. `Buy`,`Sell`
		IsLeverage string `json:"isLeverage"` // Whether to borrow. **Unified `spot`** only. `0`: false, `1`: true. _Classic `spot` is not supported, always `0`_
		PositionIdx int64 `json:"positionIdx"` // Position index. Used to identify positions in different position modes.
		OrderStatus string `json:"orderStatus"` // Order status
		CreateType string `json:"createType"` // Order create type Only for category=linear or inverse Spot, Option do not have this key
		CancelType string `json:"cancelType"` // Cancel type
		RejectReason string `json:"rejectReason"` // Reject reason. _Classic `spot` is not supported_
		AvgPrice string `json:"avgPrice"` // Average filled price UTA: returns `""` for those orders without avg price classic account: returns `"0"` for those orders without avg price, and also for those orders have partilly filled but cancelled at the end
		LeavesQty string `json:"leavesQty"` // The remaining qty not executed. _Classic `spot` is not supported_
		LeavesValue string `json:"leavesValue"` // The estimated value not executed. _Classic `spot` is not supported_
		CumExecQty string `json:"cumExecQty"` // Cumulative executed order qty
		CumExecValue string `json:"cumExecValue"` // Cumulative executed order value. _Classic `spot` is not supported_
		CumExecFee string `json:"cumExecFee"` // Cumulative executed trading fee. _Classic `spot` is not supported_
		TimeInForce string `json:"timeInForce"` // Time in force
		OrderType string `json:"orderType"` // Order type. `Market`,`Limit`. For TP/SL order, it means the order type after triggered
		StopOrderType string `json:"stopOrderType"` // Stop order type
		OrderIv string `json:"orderIv"` // Implied volatility
		MarketUnit string `json:"marketUnit"` // The unit for `qty` when create **Spot market** orders for **UTA account**. `baseCoin`, `quoteCoin`
		TriggerPrice string `json:"triggerPrice"` // Trigger price. If `stopOrderType`=_TrailingStop_, it is activate price. Otherwise, it is trigger price
		TakeProfit string `json:"takeProfit"` // Take profit price
		StopLoss string `json:"stopLoss"` // Stop loss price
		TpslMode string `json:"tpslMode"` // TP/SL mode, `Full`: entire position for TP/SL. `Partial`: partial position tp/sl. Spot does not have this field, and Option returns always ""
		OcoTriggerBy string `json:"ocoTriggerBy"` // The trigger type of Spot OCO order.`OcoTriggerByUnknown`, `OcoTriggerByTp`, `OcoTriggerByBySl`. _Classic `spot` is not supported_
		TpLimitPrice string `json:"tpLimitPrice"` // The limit order price when take profit price is triggered
		SlLimitPrice string `json:"slLimitPrice"` // The limit order price when stop loss price is triggered
		TpTriggerBy string `json:"tpTriggerBy"` // The price type to trigger take profit
		SlTriggerBy string `json:"slTriggerBy"` // The price type to trigger stop loss
		TriggerDirection int64 `json:"triggerDirection"` // Trigger direction. `1`: rise, `2`: fall
		TriggerBy string `json:"triggerBy"` // The price type of trigger price
		LastPriceOnCreated string `json:"lastPriceOnCreated"` // Last price when place the order, Spot is not applicable
		BasePrice string `json:"basePrice"` // Last price when place the order, Spot has this field only
		ReduceOnly bool `json:"reduceOnly"` // Reduce only. `true` means reduce position size
		CloseOnTrigger bool `json:"closeOnTrigger"` // Close on trigger. <a href="https://www.bybit.com/en/help-center/article/Close-On-Trigger-Order">What is a close on trigger order?</a>
		PlaceType string `json:"placeType"` // Place type, `option` used. `iv`, `price`
		SmpType string `json:"smpType"` // SMP execution type
		SmpGroup int64 `json:"smpGroup"` // Smp group ID. If the UID has no group, it is `0` by default
		SmpOrderId string `json:"smpOrderId"` // The counterparty's orderID which triggers this SMP execution
		CreatedTime string `json:"createdTime"` // Order created timestamp (ms)
		UpdatedTime string `json:"updatedTime"` // Order updated timestamp (ms)
	} `json:"list"`
}

// GET /v5/order/spot-borrow-check
type GetOrderSpotBorrowCheckRequest struct {
	Category string `url:"category"` // Product type [UTA2.0](../acct-mode#uta-20), [UTA1.0](../acct-mode#uta-10): `spot`
	Symbol string `url:"symbol"` // Symbol name
	Side string `url:"side"` // Transaction side. `Buy`,`Sell`
}

type GetOrderSpotBorrowCheckResponse struct {
	Symbol string `json:"symbol"` // Symbol name, like `BTCUSDT`, uppercase only
	Side string `json:"side"` // Side
	MaxTradeQty string `json:"maxTradeQty"` // The maximum base coin qty can be traded If spot margin trade on and symbol is margin trading pair, it returns available balance + max.borrowable quantity = min(The maximum quantity that a single user can borrow on the platform, The maximum quantity that can be borrowed calculated by IMR MMR of UTA account, The available quantity of the platform's capital pool) Otherwise, it returns actual available balance up to 4 decimals
	MaxTradeAmount string `json:"maxTradeAmount"` // The maximum quote coin amount can be traded If spot margin trade on and symbol is margin trading pair, it returns available balance + max.borrowable amount = min(The maximum amount that a single user can borrow on the platform, The maximum amount that can be borrowed calculated by IMR MMR of UTA account, The available amount of the platform's capital pool) Otherwise, it returns actual available balance up to 8 decimals
	SpotMaxTradeQty string `json:"spotMaxTradeQty"` // No matter your Spot margin switch on or not, it always returns actual qty of base coin you can trade or you have (borrowable qty is not included), up to 4 decimals
	SpotMaxTradeAmount string `json:"spotMaxTradeAmount"` // No matter your Spot margin switch on or not, it always returns actual amount of quote coin you can trade or you have (borrowable amount is not included), up to 8 decimals
	BorrowCoin string `json:"borrowCoin"` // Borrow coin
}

// POST /v5/order/amend
type PostOrderAmendRequest struct {
	Category string `json:"category"` // Product type [UTA2.0](../acct-mode#uta-20), [UTA1.0](../acct-mode#uta-10): `linear`, `inverse`, `spot`, `option` classic account: `linear`, `inverse`, `spot`
	Symbol string `json:"symbol"` // Symbol name, like `BTCUSDT`, uppercase only
	OrderId string `json:"orderId,omitempty"` // Order ID. Either `orderId` or `orderLinkId` is required
	OrderLinkId string `json:"orderLinkId,omitempty"` // User customised order ID. Either `orderId` or `orderLinkId` is required
	OrderIv string `json:"orderIv,omitempty"` // Implied volatility. `option` **only**. Pass the real value, e.g for 10%, 0.1 should be passed
	TriggerPrice string `json:"triggerPrice,omitempty"` // For Perps & Futures, it is the conditional order trigger price. If you expect the price to rise to trigger your conditional order, make sure: _triggerPrice > market price_ Else, _triggerPrice < market price_ For spot, it is the TP/SL and Conditional order trigger price
	Qty string `json:"qty,omitempty"` // Order quantity after modification. Do not pass it if not modify the qty
	Price string `json:"price,omitempty"` // Order price after modification. Do not pass it if not modify the price
	TpslMode string `json:"tpslMode,omitempty"` // TP/SL mode `Full`: entire position for TP/SL. Then, tpOrderType or slOrderType must be `Market` `Partial`: partial position tp/sl. Limit TP/SL order are supported. Note: When create limit tp/sl, tpslMode is **required** and it must be `Partial` Valid for `linear` & `inverse`
	TakeProfit string `json:"takeProfit,omitempty"` // Take profit price after modification. If pass "0", it means cancel the existing take profit of the order. Do not pass it if you do not want to modify the take profit. _valid for `spot`(UTA), `linear`, `inverse`_
	StopLoss string `json:"stopLoss,omitempty"` // Stop loss price after modification. If pass "0", it means cancel the existing stop loss of the order. Do not pass it if you do not want to modify the stop loss. _valid for `spot`(UTA), `linear`, `inverse`_
	TpTriggerBy string `json:"tpTriggerBy,omitempty"` // The price type to trigger take profit. When set a take profit, this param is **required** if no initial value for the order
	SlTriggerBy string `json:"slTriggerBy,omitempty"` // The price type to trigger stop loss. When set a take profit, this param is **required** if no initial value for the order
	TriggerBy string `json:"triggerBy,omitempty"` // Trigger price type
	TpLimitPrice string `json:"tpLimitPrice,omitempty"` // Limit order price when take profit is triggered. Only working when original order sets partial limit tp/sl. _valid for `spot`(UTA), `linear`, `inverse`_
	SlLimitPrice string `json:"slLimitPrice,omitempty"` // Limit order price when stop loss is triggered. Only working when original order sets partial limit tp/sl. _valid for `spot`(UTA), `linear`, `inverse`_
}

type PostOrderAmendResponse struct {
	OrderId string `json:"orderId"` // Order ID
	OrderLinkId string `json:"orderLinkId"` // User customised order ID
}

// POST /v5/order/amend-batch
type PostOrderAmendBatchRequest struct {
	Category string `json:"category"` // Product type [UTA2.0](../acct-mode#uta-20): `linear`, `option`, `spot`, `inverse` [UTA1.0](../acct-mode#uta-10): `linear`, `option`, `spot`
	Request string `json:"request"` // Object
}

type PostOrderAmendBatchResponse struct {
	Result struct {
		List []struct {
			Category string `json:"category"` // Product type
			Symbol string `json:"symbol"` // Symbol name
			OrderId string `json:"orderId"` // Order ID
			OrderLinkId string `json:"orderLinkId"` // User customised order ID
		} `json:"list"`
	} `json:"result"`
	RetExtInfo struct {
		List []struct {
			Code string `json:"code"` // Success/error code
			Msg string `json:"msg"` // Success/error message
		} `json:"list"`
	} `json:"retExtInfo"`
}

// POST /v5/order/cancel
type PostOrderCancelRequest struct {
	Category string `json:"category"` // Product type [UTA2.0](../acct-mode#uta-20), [UTA1.0](../acct-mode#uta-10): `linear`, `inverse`, `spot`, `option` classic account: `linear`, `inverse`, `spot`
	Symbol string `json:"symbol"` // Symbol name, like `BTCUSDT`, uppercase only
	OrderId string `json:"orderId,omitempty"` // Order ID. Either `orderId` or `orderLinkId` is **required**
	OrderLinkId string `json:"orderLinkId,omitempty"` // User customised order ID. Either `orderId` or `orderLinkId` is **required**
	OrderFilter string `json:"orderFilter,omitempty"` // Spot trading **only** `Order` `tpslOrder` `StopOrder` If not passed, `Order` by default
}

type PostOrderCancelResponse struct {
	OrderId string `json:"orderId"` // Order ID
	OrderLinkId string `json:"orderLinkId"` // User customised order ID
}

// POST /v5/order/cancel-all
type PostOrderCancelAllRequest struct {
	Category string `json:"category"` // Product type [UTA2.0](../acct-mode#uta-20), [UTA1.0](../acct-mode#uta-10): `linear`, `inverse`, `spot`, `option` classic account: `linear`, `inverse`, `spot`
	Symbol string `json:"symbol,omitempty"` // Symbol name, like `BTCUSDT`, uppercase only `linear`&`inverse`: **Required** if not passing baseCoin or settleCoin
	BaseCoin string `json:"baseCoin,omitempty"` // Base coin, uppercase only `linear` & `inverse`(classic account): If cancel all by baseCoin, it will cancel all linear & inverse orders. **Required** if not passing symbol or settleCoin `linear` & `inverse`(Unified account): If cancel all by baseCoin, it will cancel all corresponding category orders. **Required** if not passing symbol or settleCoin `spot`(classic account): invalid
	SettleCoin string `json:"settleCoin,omitempty"` // Settle coin, uppercase only `linear` & `inverse`: **Required** if not passing symbol or baseCoin `option`: USDT or USDC Not support `spot`
	OrderFilter string `json:"orderFilter,omitempty"` // category=`spot`, you can pass `Order`, `tpslOrder`, `StopOrder`, `OcoOrder`, `BidirectionalTpslOrder` If not passed, `Order` by default category=`linear` or `inverse`, you can pass `Order`, `StopOrder`,`OpenOrder` If not passed, all kinds of orders will be cancelled, like active order, conditional order, TP/SL order and trailing stop order category=`option`, you can pass `Order` No matter it is passed or not, always cancel all orders
	StopOrderType string `json:"stopOrderType,omitempty"` // Stop order type `Stop` Only used for category=`linear` or `inverse` and orderFilter=`StopOrder`,you can cancel conditional orders except TP/SL order and Trailing stop orders with this param
}

type PostOrderCancelAllResponse struct {
	List []struct {
		OrderId string `json:"orderId"` // Order ID
		OrderLinkId string `json:"orderLinkId"` // User customised order ID
	} `json:"list"`
	Success string `json:"success"` // "1": success, "0": fail [UTA1.0](../acct-mode#uta-10)(inverse), classic(linear, inverse) do not return this field
}

// POST /v5/order/cancel-batch
type PostOrderCancelBatchRequest struct {
	Category string `json:"category"` // Product type [UTA2.0](../acct-mode#uta-20): `linear`, `option`, `spot`, `inverse` [UTA1.0](../acct-mode#uta-10): `linear`, `option`, `spot`
	Request string `json:"request"` // Object
}

type PostOrderCancelBatchResponse struct {
	Result struct {
		List []struct {
			Category string `json:"category"` // Product type
			Symbol string `json:"symbol"` // Symbol name
			OrderId string `json:"orderId"` // Order ID
			OrderLinkId string `json:"orderLinkId"` // User customised order ID
		} `json:"list"`
	} `json:"result"`
	RetExtInfo struct {
		List []struct {
			Code string `json:"code"` // Success/error code
			Msg string `json:"msg"` // Success/error message
		} `json:"list"`
	} `json:"retExtInfo"`
}

// POST /v5/order/create
type PostOrderCreateRequest struct {
	Category string `json:"category"` // Product type [UTA2.0](../acct-mode#uta-20), [UTA1.0](../acct-mode#uta-10): `linear`, `inverse`, `spot`, `option` classic account: `linear`, `inverse`, `spot`
	Symbol string `json:"symbol"` // Symbol name, like `BTCUSDT`, uppercase only
	IsLeverage int64 `json:"isLeverage,omitempty"` // Whether to borrow. **Unified account Spot trading** only. `0`(default): false, spot trading `1`: true, margin trading, _make sure you turn on margin trading, and set the relevant currency as collateral_
	Side string `json:"side"` // `Buy`, `Sell`
	OrderType string `json:"orderType"` // `Market`, `Limit`
	Qty string `json:"qty"` // Order quantity UTA account Spot: Market Buy order by value by default, you can set `marketUnit` field to choose order by value or qty for market orders Perps, Futures & Option: always order by qty classic account Spot: Market Buy order by value by default Perps, Futures: always order by qty Perps & Futures: if you pass `qty`="0" and specify `reduceOnly`=true&`closeOnTrigger`=true, you can close the position up to `maxMktOrderQty` or `maxOrderQty` shown on [Get Instruments Info](../market/instrument#) of current symbol
	MarketUnit string `json:"marketUnit,omitempty"` // Select the unit for `qty` when create **Spot market** orders for **UTA account** `baseCoin`: for example, buy BTCUSDT, then "qty" unit is BTC `quoteCoin`: for example, sell BTCUSDT, then "qty" unit is USDT
	SlippageToleranceType string `json:"slippageToleranceType,omitempty"` // Slippage tolerance Type for **market order**, `TickSize`, `Percent` Support linear, inverse, spot trading, but take profit, stoploss, conditional orders are not supported <b>TickSize</b>: the highest price of Buy order = ask1 + <code>slippageTolerance</code> x tickSize; the lowest price of Sell order = bid1 - <code>slippageTolerance</code> x tickSize <b>Percent</b>: the highest price of Buy order = ask1 x (1 + <code>slippageTolerance</code> x 0.01); the lowest price of Sell order = bid1 x (1 - `slippageTolerance` x 0.01)
	SlippageTolerance string `json:"slippageTolerance,omitempty"` // Slippage tolerance value `TickSize`: range is [5, 2000], integer only `Percent`: range is [0.05, 1], up to 2 decimals
	Price string `json:"price,omitempty"` // Order price Market order will ignore this field Please check the min price and price precision from [instrument info](../market/instrument#response-parameters) endpoint If you have position, price needs to be better than liquidation price
	TriggerDirection int64 `json:"triggerDirection,omitempty"` // Conditional order param. Used to identify the expected direction of the conditional order. `1`: triggered when market price rises to `triggerPrice` `2`: triggered when market price falls to `triggerPrice` Valid for `linear` & `inverse`
	OrderFilter string `json:"orderFilter,omitempty"` // If it is not passed, `Order` by default. `Order` `tpslOrder`: Spot TP/SL order, the assets are occupied even before the order is triggered `StopOrder`: Spot conditional order, the assets will not be occupied until the price of the underlying asset reaches the trigger price, and the required assets will be occupied after the Conditional order is triggered Valid for `spot` **only**
	TriggerPrice string `json:"triggerPrice,omitempty"` // For Perps & Futures, it is the conditional order trigger price. If you expect the price to rise to trigger your conditional order, make sure: _triggerPrice > market price_ Else, _triggerPrice < market price_ For spot, it is the TP/SL and Conditional order trigger price
	TriggerBy string `json:"triggerBy,omitempty"` // Trigger price type, Conditional order param for Perps & Futures. `LastPrice` `IndexPrice` `MarkPrice` Valid for `linear` & `inverse`
	OrderIv string `json:"orderIv,omitempty"` // Implied volatility. `option` **only**. Pass the real value, e.g for 10%, 0.1 should be passed. `orderIv` has a higher priority when `price` is passed as well
	TimeInForce string `json:"timeInForce,omitempty"` // <a href="https://www.bybit.com/en/help-center/article/What-Are-Time-In-Force-TIF-GTC-IOC-FOK">Time in force</a> Market order will always use `IOC` If not passed, `GTC` is used by default
	PositionIdx int64 `json:"positionIdx,omitempty"` // Used to identify positions in different position modes. Under hedge-mode, this param is **required** `0`: one-way mode `1`: hedge-mode Buy side `2`: hedge-mode Sell side
	OrderLinkId string `json:"orderLinkId,omitempty"` // User customised order ID. A max of 36 characters. Combinations of numbers, letters (upper and lower cases), dashes, and underscores are supported. _Futures & Perps: orderLinkId rules_: optional param always unique _`option` orderLinkId rules_: **required** param always unique
	TakeProfit string `json:"takeProfit,omitempty"` // Take profit price UTA: Spot Limit order supports take profit, stop loss or limit take profit, limit stop loss when creating an order
	StopLoss string `json:"stopLoss,omitempty"` // Stop loss price UTA: Spot Limit order supports take profit, stop loss or limit take profit, limit stop loss when creating an order
	TpTriggerBy string `json:"tpTriggerBy,omitempty"` // The price type to trigger take profit. `MarkPrice`, `IndexPrice`, default: `LastPrice`. Valid for `linear` & `inverse`
	SlTriggerBy string `json:"slTriggerBy,omitempty"` // The price type to trigger stop loss. `MarkPrice`, `IndexPrice`, default: `LastPrice`. Valid for `linear` & `inverse`
	ReduceOnly bool `json:"reduceOnly,omitempty"` // <a href="https://www.bybit.com/en/help-center/article/Reduce-Only-Order">What is a reduce-only order?</a> `true` means your position can only reduce in size if this order is triggered. You **must** specify it as `true` when you are about to close/reduce the position When reduceOnly is true, take profit/stop loss cannot be set Valid for `linear`, `inverse` & `option`
	CloseOnTrigger bool `json:"closeOnTrigger,omitempty"` // <a href="https://www.bybit.com/en/help-center/article/Close-On-Trigger-Order">What is a close on trigger order?</a> For a closing order. It can only reduce your position, not increase it. If the account has insufficient available balance when the closing order is triggered, then other active orders of similar contracts will be cancelled or reduced. It can be used to ensure your stop loss reduces your position regardless of current available margin. Valid for `linear` & `inverse`
	SmpType string `json:"smpType,omitempty"` // Smp execution type. [What is SMP?](../smp)
	Mmp bool `json:"mmp,omitempty"` // Market maker protection. `option` **only**. `true` means set the order as a market maker protection order. [What is mmp?](../account/set-mmp)
	TpslMode string `json:"tpslMode,omitempty"` // TP/SL mode `Full`: entire position for TP/SL. Then, tpOrderType or slOrderType must be `Market` `Partial`: partial position tp/sl (as there is no size option, so it will create tp/sl orders with the qty you actually fill). Limit TP/SL order are supported. Note: When create limit tp/sl, tpslMode is **required** and it must be `Partial` Valid for `linear` & `inverse`
	TpLimitPrice string `json:"tpLimitPrice,omitempty"` // The limit order price when take profit price is triggered `linear` & `inverse`: only works when tpslMode=Partial and tpOrderType=Limit Spot(UTA): it is required when the order has `takeProfit` and "tpOrderType"=`Limit`
	SlLimitPrice string `json:"slLimitPrice,omitempty"` // The limit order price when stop loss price is triggered `linear` & `inverse`: only works when tpslMode=Partial and slOrderType=Limit Spot(UTA): it is required when the order has `stopLoss` and "slOrderType"=`Limit`
	TpOrderType string `json:"tpOrderType,omitempty"` // The order type when take profit is triggered `linear` & `inverse`: `Market`(default), `Limit`. For tpslMode=Full, it only supports tpOrderType=Market Spot(UTA): `Market`: when you set "takeProfit", `Limit`: when you set "takeProfit" and "tpLimitPrice"
	SlOrderType string `json:"slOrderType,omitempty"` // The order type when stop loss is triggered `linear` & `inverse`: `Market`(default), `Limit`. For tpslMode=Full, it only supports slOrderType=Market Spot(UTA): `Market`: when you set "stopLoss", `Limit`: when you set "stopLoss" and "slLimitPrice"
}

type PostOrderCreateResponse struct {
	OrderId string `json:"orderId"` // Order ID
	OrderLinkId string `json:"orderLinkId"` // User customised order ID
}

// POST /v5/order/create-batch
type PostOrderCreateBatchRequest struct {
	Category string `json:"category"` // Product type [UTA2.0](../acct-mode#uta-20): `linear`, `option`, `spot`, `inverse` [UTA1.0](../acct-mode#uta-10): `linear`, `option`, `spot`
	Request string `json:"request"` // Object
}

type PostOrderCreateBatchResponse struct {
	Result struct {
		List []struct {
			Category string `json:"category"` // Product type
			Symbol string `json:"symbol"` // Symbol name
			OrderId string `json:"orderId"` // Order ID
			OrderLinkId string `json:"orderLinkId"` // User customised order ID
			CreateAt string `json:"createAt"` // Order created time (ms)
		} `json:"list"`
	} `json:"result"`
	RetExtInfo struct {
		List []struct {
			Code string `json:"code"` // Success/error code
			Msg string `json:"msg"` // Success/error message
		} `json:"list"`
	} `json:"retExtInfo"`
}

// POST /v5/order/disconnected-cancel-all
type PostOrderDisconnectedCancelAllRequest struct {
	Product string `json:"product,omitempty"` // `OPTIONS`(default), `DERIVATIVES`, `SPOT`
	TimeWindow int64 `json:"timeWindow"` // Disconnection timing window time. [`3`, `300`], unit: second
}

type PostOrderDisconnectedCancelAllResponse struct {
	// TODO: fill in response fields parsed from docs
}

// POST /v5/order/pre-check
type PostOrderPreCheckRequest struct {
}

type PostOrderPreCheckResponse struct {
	OrderId string `json:"orderId"` // Order ID
	OrderLinkId string `json:"orderLinkId"` // User customised order ID
	PreImrE4 int64 `json:"preImrE4"` // Initial margin rate before checking, keep four decimal places. For examples, 30 means IMR = 30/1e4 = 0.30%
	PreMmrE4 int64 `json:"preMmrE4"` // Maintenance margin rate before checking, keep four decimal places. For examples, 30 means MMR = 30/1e4 = 0.30%
	PostImrE4 int64 `json:"postImrE4"` // Initial margin rate calculated after checking, keep four decimal places. For examples, 30 means IMR = 30/1e4 = 0.30%
	PostMmrE4 int64 `json:"postMmrE4"` // Maintenance margin rate calculated after checking, keep four decimal places. For examples, 30 means MMR = 30/1e4 = 0.30%
}

