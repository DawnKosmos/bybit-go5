// Code generated by bybitgen; DO NOT EDIT.
package models

// GET /v5/execution/list
type GetExecutionListRequest struct {
	Category string `url:"category"` // Product type [UTA2.0](../acct-mode#uta-20), [UTA1.0](../acct-mode#uta-10): `linear`, `inverse`, `spot`, `option` classic account: `linear`, `inverse`, `spot`
	Symbol string `url:"symbol,omitempty"` // Symbol name, like `BTCUSDT`, uppercase only
	OrderId string `url:"orderId,omitempty"` // Order ID
	OrderLinkId string `url:"orderLinkId,omitempty"` // User customised order ID. _Classic account does not support this param_
	BaseCoin string `url:"baseCoin,omitempty"` // Base coin, uppercase only [UTA1.0](../acct-mode#uta-10)(category=inverse) and classic account are not supported
	StartTime int64 `url:"startTime,omitempty"` // The start timestamp (ms) startTime and endTime are not passed, return 7 days by default; Only startTime is passed, return range between startTime and startTime+7 days Only endTime is passed, return range between endTime-7 days and endTime If both are passed, the rule is endTime - startTime <= 7 days
	EndTime int64 `url:"endTime,omitempty"` // The end timestamp (ms)
	ExecType string `url:"execType,omitempty"` // Execution type. _Classic `spot` is not supported_
	Limit int64 `url:"limit,omitempty"` // Limit for data size per page. [`1`, `100`]. Default: `50`
	Cursor string `url:"cursor,omitempty"` // Cursor. Use the `nextPageCursor` token from the response to retrieve the next page of the result set
}

type GetExecutionListResponse struct {
	// TODO: fill in response fields parsed from docs
}

// GET /v5/order/history
type GetOrderHistoryRequest struct {
	Category string `url:"category"` // Product type [UTA2.0](../acct-mode#uta-20), [UTA1.0](../acct-mode#uta-10): `linear`, `inverse`, `spot`, `option` classic account: `linear`, `inverse`, `spot`
	Symbol string `url:"symbol,omitempty"` // Symbol name, like `BTCUSDT`, uppercase only
	BaseCoin string `url:"baseCoin,omitempty"` // Base coin, uppercase only [UTA1.0](../acct-mode#uta-10)(inverse), classic account do **not** support this param
	SettleCoin string `url:"settleCoin,omitempty"` // Settle coin, uppercase only [UTA1.0](../acct-mode#uta-10)(inverse), classic account do **not** support this param
	OrderId string `url:"orderId,omitempty"` // Order ID
	OrderLinkId string `url:"orderLinkId,omitempty"` // User customised order ID
	OrderFilter string `url:"orderFilter,omitempty"` // `Order`: active order `StopOrder`: conditional order for Futures and Spot `tpslOrder`: spot TP/SL order `OcoOrder`: spot OCO orders `BidirectionalTpslOrder`: Spot bidirectional TPSL order classic account `spot`: return `Order` active order by default Others: all kinds of orders by default
	OrderStatus string `url:"orderStatus,omitempty"` // Classic `spot`: not supported [UTA2.0](../acct-mode#uta-20), [UTA1.0](../acct-mode#uta-10)(except inverse): return all <b>closed</b> status orders if not passed [UTA1.0](../acct-mode#uta-10)(inverse), classic account(linear, inverse): return all status orders if not passed
	StartTime int64 `url:"startTime,omitempty"` // The start timestamp (ms) startTime and endTime are not passed, return 7 days by default Only startTime is passed, return range between startTime and startTime+7 days Only endTime is passed, return range between endTime-7 days and endTime If both are passed, the rule is endTime - startTime <= 7 days
	EndTime int64 `url:"endTime,omitempty"` // The end timestamp (ms)
	Limit int64 `url:"limit,omitempty"` // Limit for data size per page. [`1`, `50`]. Default: `20`
	Cursor string `url:"cursor,omitempty"` // Cursor. Use the `nextPageCursor` token from the response to retrieve the next page of the result set
}

type GetOrderHistoryResponse struct {
	// TODO: fill in response fields parsed from docs
}

// GET /v5/order/realtime
type GetOrderRealtimeRequest struct {
	Category string `url:"category"` // Product type [UTA2.0](../acct-mode#uta-20), [UTA1.0](../acct-mode#uta-10): `linear`, `inverse`, `spot`, `option` classic account: `linear`, `inverse`, `spot`
	Symbol string `url:"symbol,omitempty"` // Symbol name, like `BTCUSDT`, uppercase only. For **linear**, either `symbol`, `baseCoin`, `settleCoin` is **required**
	BaseCoin string `url:"baseCoin,omitempty"` // Base coin, uppercase only Supports `linear`, `inverse` & `option` `option`: it returns all option open orders by default
	SettleCoin string `url:"settleCoin,omitempty"` // Settle coin, uppercase only <b>linear</b>: either `symbol`, `baseCoin` or `settleCoin` is **required** `spot`: not supported `option`: USDT or USDC
	OrderId string `url:"orderId,omitempty"` // Order ID
	OrderLinkId string `url:"orderLinkId,omitempty"` // User customised order ID
	OpenOnly int64 `url:"openOnly,omitempty"` // `0`(default): [UTA2.0](../acct-mode#uta-20), [UTA1.0](../acct-mode#uta-10), classic account query open status orders (e.g., New, PartiallyFilled) **only** `1`: [UTA2.0](../acct-mode#uta-20), [UTA1.0](../acct-mode#uta-10)(except inverse) `2`: [UTA1.0](../acct-mode#uta-10)(inverse), classic account Query a maximum of recent 500 closed status records are kept under each account each category (e.g., Cancelled, Rejected, Filled orders). <i>If the Bybit service is restarted due to an update, this part of the data will be cleared and accumulated again, but the order records will still be queried in [order history](order-list#)</i> `openOnly` param will be ignored when query by _orderId_ or _orderLinkId_ Classic `spot`: not supported
	OrderFilter string `url:"orderFilter,omitempty"` // `Order`: active order, `StopOrder`: conditional order for Futures and Spot, `tpslOrder`: spot TP/SL order, `OcoOrder`: Spot oco order, `BidirectionalTpslOrder`: Spot bidirectional TPSL order classic account `spot`: return `Order` active order by default Others: all kinds of orders by default
	Limit int64 `url:"limit,omitempty"` // Limit for data size per page. [`1`, `50`]. Default: `20`
	Cursor string `url:"cursor,omitempty"` // Cursor. Use the `nextPageCursor` token from the response to retrieve the next page of the result set
}

type GetOrderRealtimeResponse struct {
	// TODO: fill in response fields parsed from docs
}

// GET /v5/order/spot-borrow-check
type GetOrderSpotBorrowCheckRequest struct {
	Category string `url:"category"` // Product type [UTA2.0](../acct-mode#uta-20), [UTA1.0](../acct-mode#uta-10): `spot`
	Symbol string `url:"symbol"` // Symbol name
	Side string `url:"side"` // Transaction side. `Buy`,`Sell`
}

type GetOrderSpotBorrowCheckResponse struct {
	// TODO: fill in response fields parsed from docs
}

// POST /v5/order/amend
type PostOrderAmendRequest struct {
	Category string `json:"category"` // Product type [UTA2.0](../acct-mode#uta-20), [UTA1.0](../acct-mode#uta-10): `linear`, `inverse`, `spot`, `option` classic account: `linear`, `inverse`, `spot`
	Symbol string `json:"symbol"` // Symbol name, like `BTCUSDT`, uppercase only
	OrderId string `json:"orderId,omitempty"` // Order ID. Either `orderId` or `orderLinkId` is required
	OrderLinkId string `json:"orderLinkId,omitempty"` // User customised order ID. Either `orderId` or `orderLinkId` is required
	OrderIv string `json:"orderIv,omitempty"` // Implied volatility. `option` **only**. Pass the real value, e.g for 10%, 0.1 should be passed
	TriggerPrice string `json:"triggerPrice,omitempty"` // For Perps & Futures, it is the conditional order trigger price. If you expect the price to rise to trigger your conditional order, make sure: _triggerPrice > market price_ Else, _triggerPrice < market price_ For spot, it is the TP/SL and Conditional order trigger price
	Qty string `json:"qty,omitempty"` // Order quantity after modification. Do not pass it if not modify the qty
	Price string `json:"price,omitempty"` // Order price after modification. Do not pass it if not modify the price
	TpslMode string `json:"tpslMode,omitempty"` // TP/SL mode `Full`: entire position for TP/SL. Then, tpOrderType or slOrderType must be `Market` `Partial`: partial position tp/sl. Limit TP/SL order are supported. Note: When create limit tp/sl, tpslMode is **required** and it must be `Partial` Valid for `linear` & `inverse`
	TakeProfit string `json:"takeProfit,omitempty"` // Take profit price after modification. If pass "0", it means cancel the existing take profit of the order. Do not pass it if you do not want to modify the take profit. _valid for `spot`(UTA), `linear`, `inverse`_
	StopLoss string `json:"stopLoss,omitempty"` // Stop loss price after modification. If pass "0", it means cancel the existing stop loss of the order. Do not pass it if you do not want to modify the stop loss. _valid for `spot`(UTA), `linear`, `inverse`_
	TpTriggerBy string `json:"tpTriggerBy,omitempty"` // The price type to trigger take profit. When set a take profit, this param is **required** if no initial value for the order
	SlTriggerBy string `json:"slTriggerBy,omitempty"` // The price type to trigger stop loss. When set a take profit, this param is **required** if no initial value for the order
	TriggerBy string `json:"triggerBy,omitempty"` // Trigger price type
	TpLimitPrice string `json:"tpLimitPrice,omitempty"` // Limit order price when take profit is triggered. Only working when original order sets partial limit tp/sl. _valid for `spot`(UTA), `linear`, `inverse`_
	SlLimitPrice string `json:"slLimitPrice,omitempty"` // Limit order price when stop loss is triggered. Only working when original order sets partial limit tp/sl. _valid for `spot`(UTA), `linear`, `inverse`_
}

type PostOrderAmendResponse struct {
	// TODO: fill in response fields parsed from docs
}

// POST /v5/order/amend-batch
type PostOrderAmendBatchRequest struct {
	Category string `json:"category"` // Product type [UTA2.0](../acct-mode#uta-20): `linear`, `option`, `spot`, `inverse` [UTA1.0](../acct-mode#uta-10): `linear`, `option`, `spot`
	Request string `json:"request"` // Object
}

type PostOrderAmendBatchResponse struct {
	// TODO: fill in response fields parsed from docs
}

// POST /v5/order/cancel
type PostOrderCancelRequest struct {
	Category string `json:"category"` // Product type [UTA2.0](../acct-mode#uta-20), [UTA1.0](../acct-mode#uta-10): `linear`, `inverse`, `spot`, `option` classic account: `linear`, `inverse`, `spot`
	Symbol string `json:"symbol"` // Symbol name, like `BTCUSDT`, uppercase only
	OrderId string `json:"orderId,omitempty"` // Order ID. Either `orderId` or `orderLinkId` is **required**
	OrderLinkId string `json:"orderLinkId,omitempty"` // User customised order ID. Either `orderId` or `orderLinkId` is **required**
	OrderFilter string `json:"orderFilter,omitempty"` // Spot trading **only** `Order` `tpslOrder` `StopOrder` If not passed, `Order` by default
}

type PostOrderCancelResponse struct {
	// TODO: fill in response fields parsed from docs
}

// POST /v5/order/cancel-all
type PostOrderCancelAllRequest struct {
	Category string `json:"category"` // Product type [UTA2.0](../acct-mode#uta-20), [UTA1.0](../acct-mode#uta-10): `linear`, `inverse`, `spot`, `option` classic account: `linear`, `inverse`, `spot`
	Symbol string `json:"symbol,omitempty"` // Symbol name, like `BTCUSDT`, uppercase only `linear`&`inverse`: **Required** if not passing baseCoin or settleCoin
	BaseCoin string `json:"baseCoin,omitempty"` // Base coin, uppercase only `linear` & `inverse`(classic account): If cancel all by baseCoin, it will cancel all linear & inverse orders. **Required** if not passing symbol or settleCoin `linear` & `inverse`(Unified account): If cancel all by baseCoin, it will cancel all corresponding category orders. **Required** if not passing symbol or settleCoin `spot`(classic account): invalid
	SettleCoin string `json:"settleCoin,omitempty"` // Settle coin, uppercase only `linear` & `inverse`: **Required** if not passing symbol or baseCoin `option`: USDT or USDC Not support `spot`
	OrderFilter string `json:"orderFilter,omitempty"` // category=`spot`, you can pass `Order`, `tpslOrder`, `StopOrder`, `OcoOrder`, `BidirectionalTpslOrder` If not passed, `Order` by default category=`linear` or `inverse`, you can pass `Order`, `StopOrder`,`OpenOrder` If not passed, all kinds of orders will be cancelled, like active order, conditional order, TP/SL order and trailing stop order category=`option`, you can pass `Order` No matter it is passed or not, always cancel all orders
	StopOrderType string `json:"stopOrderType,omitempty"` // Stop order type `Stop` Only used for category=`linear` or `inverse` and orderFilter=`StopOrder`,you can cancel conditional orders except TP/SL order and Trailing stop orders with this param
}

type PostOrderCancelAllResponse struct {
	// TODO: fill in response fields parsed from docs
}

// POST /v5/order/cancel-batch
type PostOrderCancelBatchRequest struct {
	Category string `json:"category"` // Product type [UTA2.0](../acct-mode#uta-20): `linear`, `option`, `spot`, `inverse` [UTA1.0](../acct-mode#uta-10): `linear`, `option`, `spot`
	Request string `json:"request"` // Object
}

type PostOrderCancelBatchResponse struct {
	// TODO: fill in response fields parsed from docs
}

// POST /v5/order/create
type PostOrderCreateRequest struct {
	Category string `json:"category"` // Product type [UTA2.0](../acct-mode#uta-20), [UTA1.0](../acct-mode#uta-10): `linear`, `inverse`, `spot`, `option` classic account: `linear`, `inverse`, `spot`
	Symbol string `json:"symbol"` // Symbol name, like `BTCUSDT`, uppercase only
	IsLeverage int64 `json:"isLeverage,omitempty"` // Whether to borrow. **Unified account Spot trading** only. `0`(default): false, spot trading `1`: true, margin trading, _make sure you turn on margin trading, and set the relevant currency as collateral_
	Side string `json:"side"` // `Buy`, `Sell`
	OrderType string `json:"orderType"` // `Market`, `Limit`
	Qty string `json:"qty"` // Order quantity UTA account Spot: Market Buy order by value by default, you can set `marketUnit` field to choose order by value or qty for market orders Perps, Futures & Option: always order by qty classic account Spot: Market Buy order by value by default Perps, Futures: always order by qty Perps & Futures: if you pass `qty`="0" and specify `reduceOnly`=true&`closeOnTrigger`=true, you can close the position up to `maxMktOrderQty` or `maxOrderQty` shown on [Get Instruments Info](../market/instrument#) of current symbol
	MarketUnit string `json:"marketUnit,omitempty"` // Select the unit for `qty` when create **Spot market** orders for **UTA account** `baseCoin`: for example, buy BTCUSDT, then "qty" unit is BTC `quoteCoin`: for example, sell BTCUSDT, then "qty" unit is USDT
	SlippageToleranceType string `json:"slippageToleranceType,omitempty"` // Slippage tolerance Type for **market order**, `TickSize`, `Percent` Support linear, inverse, spot trading, but take profit, stoploss, conditional orders are not supported <b>TickSize</b>: the highest price of Buy order = ask1 + <code>slippageTolerance</code> x tickSize; the lowest price of Sell order = bid1 - <code>slippageTolerance</code> x tickSize <b>Percent</b>: the highest price of Buy order = ask1 x (1 + <code>slippageTolerance</code> x 0.01); the lowest price of Sell order = bid1 x (1 - `slippageTolerance` x 0.01)
	SlippageTolerance string `json:"slippageTolerance,omitempty"` // Slippage tolerance value `TickSize`: range is [5, 2000], integer only `Percent`: range is [0.05, 1], up to 2 decimals
	Price string `json:"price,omitempty"` // Order price Market order will ignore this field Please check the min price and price precision from [instrument info](../market/instrument#response-parameters) endpoint If you have position, price needs to be better than liquidation price
	TriggerDirection int64 `json:"triggerDirection,omitempty"` // Conditional order param. Used to identify the expected direction of the conditional order. `1`: triggered when market price rises to `triggerPrice` `2`: triggered when market price falls to `triggerPrice` Valid for `linear` & `inverse`
	OrderFilter string `json:"orderFilter,omitempty"` // If it is not passed, `Order` by default. `Order` `tpslOrder`: Spot TP/SL order, the assets are occupied even before the order is triggered `StopOrder`: Spot conditional order, the assets will not be occupied until the price of the underlying asset reaches the trigger price, and the required assets will be occupied after the Conditional order is triggered Valid for `spot` **only**
	TriggerPrice string `json:"triggerPrice,omitempty"` // For Perps & Futures, it is the conditional order trigger price. If you expect the price to rise to trigger your conditional order, make sure: _triggerPrice > market price_ Else, _triggerPrice < market price_ For spot, it is the TP/SL and Conditional order trigger price
	TriggerBy string `json:"triggerBy,omitempty"` // Trigger price type, Conditional order param for Perps & Futures. `LastPrice` `IndexPrice` `MarkPrice` Valid for `linear` & `inverse`
	OrderIv string `json:"orderIv,omitempty"` // Implied volatility. `option` **only**. Pass the real value, e.g for 10%, 0.1 should be passed. `orderIv` has a higher priority when `price` is passed as well
	TimeInForce string `json:"timeInForce,omitempty"` // <a href="https://www.bybit.com/en/help-center/article/What-Are-Time-In-Force-TIF-GTC-IOC-FOK">Time in force</a> Market order will always use `IOC` If not passed, `GTC` is used by default
	PositionIdx int64 `json:"positionIdx,omitempty"` // Used to identify positions in different position modes. Under hedge-mode, this param is **required** `0`: one-way mode `1`: hedge-mode Buy side `2`: hedge-mode Sell side
	OrderLinkId string `json:"orderLinkId,omitempty"` // User customised order ID. A max of 36 characters. Combinations of numbers, letters (upper and lower cases), dashes, and underscores are supported. _Futures & Perps: orderLinkId rules_: optional param always unique _`option` orderLinkId rules_: **required** param always unique
	TakeProfit string `json:"takeProfit,omitempty"` // Take profit price UTA: Spot Limit order supports take profit, stop loss or limit take profit, limit stop loss when creating an order
	StopLoss string `json:"stopLoss,omitempty"` // Stop loss price UTA: Spot Limit order supports take profit, stop loss or limit take profit, limit stop loss when creating an order
	TpTriggerBy string `json:"tpTriggerBy,omitempty"` // The price type to trigger take profit. `MarkPrice`, `IndexPrice`, default: `LastPrice`. Valid for `linear` & `inverse`
	SlTriggerBy string `json:"slTriggerBy,omitempty"` // The price type to trigger stop loss. `MarkPrice`, `IndexPrice`, default: `LastPrice`. Valid for `linear` & `inverse`
	ReduceOnly bool `json:"reduceOnly,omitempty"` // <a href="https://www.bybit.com/en/help-center/article/Reduce-Only-Order">What is a reduce-only order?</a> `true` means your position can only reduce in size if this order is triggered. You **must** specify it as `true` when you are about to close/reduce the position When reduceOnly is true, take profit/stop loss cannot be set Valid for `linear`, `inverse` & `option`
	CloseOnTrigger bool `json:"closeOnTrigger,omitempty"` // <a href="https://www.bybit.com/en/help-center/article/Close-On-Trigger-Order">What is a close on trigger order?</a> For a closing order. It can only reduce your position, not increase it. If the account has insufficient available balance when the closing order is triggered, then other active orders of similar contracts will be cancelled or reduced. It can be used to ensure your stop loss reduces your position regardless of current available margin. Valid for `linear` & `inverse`
	SmpType string `json:"smpType,omitempty"` // Smp execution type. [What is SMP?](../smp)
	Mmp bool `json:"mmp,omitempty"` // Market maker protection. `option` **only**. `true` means set the order as a market maker protection order. [What is mmp?](../account/set-mmp)
	TpslMode string `json:"tpslMode,omitempty"` // TP/SL mode `Full`: entire position for TP/SL. Then, tpOrderType or slOrderType must be `Market` `Partial`: partial position tp/sl (as there is no size option, so it will create tp/sl orders with the qty you actually fill). Limit TP/SL order are supported. Note: When create limit tp/sl, tpslMode is **required** and it must be `Partial` Valid for `linear` & `inverse`
	TpLimitPrice string `json:"tpLimitPrice,omitempty"` // The limit order price when take profit price is triggered `linear` & `inverse`: only works when tpslMode=Partial and tpOrderType=Limit Spot(UTA): it is required when the order has `takeProfit` and "tpOrderType"=`Limit`
	SlLimitPrice string `json:"slLimitPrice,omitempty"` // The limit order price when stop loss price is triggered `linear` & `inverse`: only works when tpslMode=Partial and slOrderType=Limit Spot(UTA): it is required when the order has `stopLoss` and "slOrderType"=`Limit`
	TpOrderType string `json:"tpOrderType,omitempty"` // The order type when take profit is triggered `linear` & `inverse`: `Market`(default), `Limit`. For tpslMode=Full, it only supports tpOrderType=Market Spot(UTA): `Market`: when you set "takeProfit", `Limit`: when you set "takeProfit" and "tpLimitPrice"
	SlOrderType string `json:"slOrderType,omitempty"` // The order type when stop loss is triggered `linear` & `inverse`: `Market`(default), `Limit`. For tpslMode=Full, it only supports slOrderType=Market Spot(UTA): `Market`: when you set "stopLoss", `Limit`: when you set "stopLoss" and "slLimitPrice"
}

type PostOrderCreateResponse struct {
	// TODO: fill in response fields parsed from docs
}

// POST /v5/order/create-batch
type PostOrderCreateBatchRequest struct {
	Category string `json:"category"` // Product type [UTA2.0](../acct-mode#uta-20): `linear`, `option`, `spot`, `inverse` [UTA1.0](../acct-mode#uta-10): `linear`, `option`, `spot`
	Request string `json:"request"` // Object
}

type PostOrderCreateBatchResponse struct {
	// TODO: fill in response fields parsed from docs
}

// POST /v5/order/disconnected-cancel-all
type PostOrderDisconnectedCancelAllRequest struct {
	Product string `json:"product,omitempty"` // `OPTIONS`(default), `DERIVATIVES`, `SPOT`
	TimeWindow int64 `json:"timeWindow"` // Disconnection timing window time. [`3`, `300`], unit: second
}

type PostOrderDisconnectedCancelAllResponse struct {
	// TODO: fill in response fields parsed from docs
}

// POST /v5/order/pre-check
type PostOrderPreCheckRequest struct {
}

type PostOrderPreCheckResponse struct {
	// TODO: fill in response fields parsed from docs
}

