// Code generated by bybitgen; DO NOT EDIT.
package models

// GET /v5/position/closed-pnl
type GetPositionClosedPnlRequest struct {
	Category string `url:"category"` // Product type [UTA2.0](../acct-mode#uta-20), [UTA1.0](../acct-mode#uta-10): `linear`(USDT Contract, USDC Contract), `inverse`, `option` Classic account: `linear`(USDT Perps), `inverse`
	Symbol string `url:"symbol,omitempty"` // Symbol name, like `BTCUSDT`, uppercase only
	StartTime int64 `url:"startTime,omitempty"` // The start timestamp (ms) startTime and endTime are not passed, return 7 days by default Only startTime is passed, return range between startTime and startTime+7 days Only endTime is passed, return range between endTime-7 days and endTime If both are passed, the rule is endTime - startTime <= 7 days
	EndTime int64 `url:"endTime,omitempty"` // The end timestamp (ms)
	Limit int64 `url:"limit,omitempty"` // Limit for data size per page. [`1`, `100`]. Default: `50`
	Cursor string `url:"cursor,omitempty"` // Cursor. Use the `nextPageCursor` token from the response to retrieve the next page of the result set
}

type GetPositionClosedPnlResponse struct {
	Category string `json:"category"` // Product type
	List []struct {
		Symbol string `json:"symbol"` // Symbol name
		OrderId string `json:"orderId"` // Order ID
		Side string `json:"side"` // `Buy`, `Sell`
		Qty string `json:"qty"` // Order qty
		OrderPrice string `json:"orderPrice"` // Order price
		OrderType string `json:"orderType"` // Order type. `Market`,`Limit`
		ExecType string `json:"execType"` // Exec type `Trade`, `BustTrade` `SessionSettlePnL` `Settle`, `MovePosition`
		ClosedSize string `json:"closedSize"` // Closed size
		CumEntryValue string `json:"cumEntryValue"` // Cumulated Position value
		AvgEntryPrice string `json:"avgEntryPrice"` // Average entry price
		CumExitValue string `json:"cumExitValue"` // Cumulated exit position value
		AvgExitPrice string `json:"avgExitPrice"` // Average exit price
		ClosedPnl string `json:"closedPnl"` // Closed PnL
		FillCount string `json:"fillCount"` // The number of fills in a single order
		Leverage string `json:"leverage"` // leverage
		OpenFee string `json:"openFee"` // Open position trading fee
		CloseFee string `json:"closeFee"` // Close position trading fee
		CreatedTime string `json:"createdTime"` // The created time (ms)
		UpdatedTime string `json:"updatedTime"` // The updated time (ms)
	} `json:"list"`
	NextPageCursor string `json:"nextPageCursor"` // Refer to the `cursor` request parameter
}

// GET /v5/position/get-closed-positions
type GetPositionGetClosedPositionsRequest struct {
	Category string `url:"category"` // option
	Symbol string `url:"symbol,omitempty"` // Symbol name
	StartTime int64 `url:"startTime,omitempty"` // The start timestamp (ms) startTime and endTime are not passed, return 1 days by default Only startTime is passed, return range between startTime and startTime+1 days Only endTime is passed, return range between endTime-1 days and endTime If both are passed, the rule is endTime - startTime <= 7 days
	EndTime int64 `url:"endTime,omitempty"` // The end timestamp (ms)
	Limit int64 `url:"limit,omitempty"` // Limit for data size per page. [`1`, `100`]. Default: `50`
	Cursor string `url:"cursor,omitempty"` // Cursor. Use the `nextPageCursor` token from the response to retrieve the next page of the result set
}

type GetPositionGetClosedPositionsResponse struct {
	NextPageCursor string `json:"nextPageCursor"` // Refer to the `cursor` request parameter
	Category string `json:"category"` // Product type
	List []struct {
		Symbol string `json:"symbol"` // Symbol name
		Side string `json:"side"` // `Buy`, `Sell`
		TotalOpenFee string `json:"totalOpenFee"` // Total open fee
		DeliveryFee string `json:"deliveryFee"` // Delivery fee
		TotalCloseFee string `json:"totalCloseFee"` // Total close fee
		Qty string `json:"qty"` // Order qty
		CloseTime int64 `json:"closeTime"` // The closed time (ms)
		AvgExitPrice string `json:"avgExitPrice"` // Average exit price
		DeliveryPrice string `json:"deliveryPrice"` // Delivery price
		OpenTime int64 `json:"openTime"` // The opened time (ms)
		AvgEntryPrice string `json:"avgEntryPrice"` // Average entry price
		TotalPnl string `json:"totalPnl"` // Total PnL
	} `json:"list"`
}

// GET /v5/position/list
type GetPositionListRequest struct {
	Category string `url:"category"` // Product type [UTA2.0](/v5/acct-mode#uta-20), [UTA1.0](/v5/acct-mode#uta-10): `linear`, `inverse`, `option` Classic account: `linear`, `inverse`
	Symbol string `url:"symbol,omitempty"` // Symbol name, like `BTCUSDT`, uppercase only If `symbol` passed, it returns data regardless of having position or not. If `symbol`=null and `settleCoin` specified, it returns position size greater than zero.
	BaseCoin string `url:"baseCoin,omitempty"` // Base coin, uppercase only. `option` **only**. Return all option positions if not passed
	SettleCoin string `url:"settleCoin,omitempty"` // Settle coin `linear`: either `symbol` or `settleCoin` is **required**. `symbol` has a higher priority
	Limit int64 `url:"limit,omitempty"` // Limit for data size per page. [`1`, `200`]. Default: `20`
	Cursor string `url:"cursor,omitempty"` // Cursor. Use the `nextPageCursor` token from the response to retrieve the next page of the result set
}

type GetPositionListResponse struct {
	Category string `json:"category"` // Product type
	NextPageCursor string `json:"nextPageCursor"` // Refer to the `cursor` request parameter
	List []struct {
		PositionIdx int64 `json:"positionIdx"` // Position idx, used to identify positions in different position modes `0`: One-Way Mode `1`: Buy side of both side mode `2`: Sell side of both side mode
		RiskId int64 `json:"riskId"` // Risk tier ID _for portfolio margin mode, this field returns 0, which means risk limit rules are invalid_
		RiskLimitValue string `json:"riskLimitValue"` // Risk limit value _for portfolio margin mode, this field returns 0, which means risk limit rules are invalid_
		Symbol string `json:"symbol"` // Symbol name
		Side string `json:"side"` // Position side. `Buy`: long, `Sell`: short one-way mode: classic & [UTA1.0](/v5/acct-mode#uta-10)(inverse), an empty position returns `None`. [UTA2.0](/v5/acct-mode#uta-20)(linear, inverse) & [UTA1.0](/v5/acct-mode#uta-10)(linear): either one-way or hedge mode returns an empty string `""` for an empty position.
		Size string `json:"size"` // Position size, always positive
		AvgPrice string `json:"avgPrice"` // Average entry price For USDC Perp & Futures, it indicates average entry price, and it will not be changed with 8-hour session settlement
		PositionValue string `json:"positionValue"` // Position value
		TradeMode int64 `json:"tradeMode"` // Trade mode Classic & [UTA1.0](/v5/acct-mode#uta-10)(inverse): `0`: cross-margin, `1`: isolated margin [UTA2.0](/v5/acct-mode#uta-20), [UTA1.0](/v5/acct-mode#uta-10)(execpt inverse): deprecated, always `0`, check [Get Account Info](/v5/account/account-info) to know the margin mode
		AutoAddMargin int64 `json:"autoAddMargin"` // Whether to add margin automatically when using isolated margin mode `0`: false `1`: true
		PositionStatus string `json:"positionStatus"` // Position status. `Normal`, `Liq`, `Adl`
		Leverage string `json:"leverage"` // Position leverage _for portfolio margin mode, this field returns "", which means leverage rules are invalid_
		MarkPrice string `json:"markPrice"` // Mark price
		LiqPrice string `json:"liqPrice"` // Position liquidation price [UTA2.0](/v5/acct-mode#uta-20)(isolated margin), [UTA1.0](/v5/acct-mode#uta-10)(isolated margin), [UTA1.0](/v5/acct-mode#uta-10)(inverse), Classic account: it is the real price for isolated and cross positions, and keeps `""` when liqPrice <= minPrice or liqPrice >= maxPrice [UTA2.0](/v5/acct-mode#uta-20)(Cross margin), [UTA1.0](/v5/acct-mode#uta-10)(Cross margin): it is an <b>estimated</b> price for cross positions(because the unified mode controls the risk rate according to the account), and keeps `""` when liqPrice <= minPrice or liqPrice >= maxPrice _this field is empty for Portfolio Margin Mode, and no liquidation price will be provided_
		BustPrice string `json:"bustPrice"` // Bankruptcy price
		PositionIM string `json:"positionIM"` // Initial margin Classic & [UTA1.0](/v5/acct-mode#uta-10)(inverse): ignore this field UTA portfolio margin mode, it returns ""
		PositionIMByMp string `json:"positionIMByMp"` // Initial margin calculated by mark price Classic & [UTA1.0](/v5/acct-mode#uta-10)(inverse) : ignore this field UTA portfolio margin mode, it returns ""
		PositionMM string `json:"positionMM"` // Maintenance margin Classic & [UTA1.0](/v5/acct-mode#uta-10)(inverse): ignore this field UTA portfolio margin mode, it returns ""
		PositionMMByMp string `json:"positionMMByMp"` // Maintenance margin calculated by mark price Classic & [UTA1.0](/v5/acct-mode#uta-10)(inverse) : ignore this field UTA portfolio margin mode, it returns ""
		PositionBalance string `json:"positionBalance"` // Position margin Classic & [UTA1.0](/v5/acct-mode#uta-10)(inverse) can refer to this field to get the position initial margin plus position closing fee
		TakeProfit string `json:"takeProfit"` // Take profit price
		StopLoss string `json:"stopLoss"` // Stop loss price
		TrailingStop string `json:"trailingStop"` // Trailing stop (The distance from market price)
		SessionAvgPrice string `json:"sessionAvgPrice"` // USDC contract session avg price, it is the same figure as avg entry price shown in the web UI
		Delta string `json:"delta"` // Delta
		Gamma string `json:"gamma"` // Gamma
		Vega string `json:"vega"` // Vega
		Theta string `json:"theta"` // Theta
		UnrealisedPnl string `json:"unrealisedPnl"` // Unrealised PnL
		CurRealisedPnl string `json:"curRealisedPnl"` // The realised PnL for the current holding position
		CumRealisedPnl string `json:"cumRealisedPnl"` // Cumulative realised pnl Futures & Perps: it is the all time cumulative realised P&L Option: always "", meaningless
		AdlRankIndicator int64 `json:"adlRankIndicator"` // Auto-deleverage rank indicator. <a href="https://www.bybit.com/en-US/help-center/s/article/What-is-Auto-Deleveraging-ADL">What is Auto-Deleveraging?</a>
		CreatedTime string `json:"createdTime"` // Timestamp of the first time a position was created on this symbol (ms)
		UpdatedTime string `json:"updatedTime"` // Position updated timestamp (ms)
		Seq int64 `json:"seq"` // Cross sequence, used to associate each fill and each position update Different symbols may have the same seq, please use seq + symbol to check unique Returns `"-1"` if the symbol has never been traded Returns the seq updated by the last transaction when there are settings like leverage, risk limit
		IsReduceOnly bool `json:"isReduceOnly"` // Useful when Bybit lower the risk limit `true`: Only allowed to reduce the position. You can consider a series of measures, e.g., lower the risk limit, decrease leverage or reduce the position, add margin, or cancel orders, after these operations, you can call [confirm new risk limit](../v5/position/confirm-mmr#) endpoint to check if your position can be removed the reduceOnly mark `false`: There is no restriction, and it means your position is under the risk when the risk limit is systematically adjusted Only meaningful for isolated margin & cross margin of USDT Perp, USDC Perp, USDC Futures, Inverse Perp and Inverse Futures, meaningless for others
		MmrSysUpdatedTime string `json:"mmrSysUpdatedTime"` // Useful when Bybit lower the risk limit When isReduceOnly=`true`: the timestamp (ms) when the MMR will be forcibly adjusted by the system When isReduceOnly=`false`: the timestamp when the MMR had been adjusted by system It returns the timestamp when the system operates, and if you manually operate, there is no timestamp Keeps `""` by default, if there was a lower risk limit system adjustment previously, it shows that system operation timestamp Only meaningful for isolated margin & cross margin of USDT Perp, USDC Perp, USDC Futures, Inverse Perp and Inverse Futures, meaningless for others
		LeverageSysUpdatedTime string `json:"leverageSysUpdatedTime"` // Useful when Bybit lower the risk limit When isReduceOnly=`true`: the timestamp (ms) when the leverage will be forcibly adjusted by the system When isReduceOnly=`false`: the timestamp when the leverage had been adjusted by system It returns the timestamp when the system operates, and if you manually operate, there is no timestamp Keeps `""` by default, if there was a lower risk limit system adjustment previously, it shows that system operation timestamp Only meaningful for isolated margin & cross margin of USDT Perp, USDC Perp, USDC Futures, Inverse Perp and Inverse Futures, meaningless for others
		TpslMode string `json:"tpslMode"` // deprecated, always "Full"
	} `json:"list"`
}

// GET /v5/position/move-history
type GetPositionMoveHistoryRequest struct {
	Category string `url:"category,omitempty"` // Product type [UTA2.0](../acct-mode#uta-20), [UTA1.0](../acct-mode#uta-10): `linear`, `spot`, `option`
	Symbol string `url:"symbol,omitempty"` // Symbol name, like `BTCUSDT`, uppercase only
	StartTime string `url:"startTime,omitempty"` // The order creation start timestamp. The interval is 7 days
	EndTime string `url:"endTime,omitempty"` // The order creation end timestamp. The interval is 7 days
	Status string `url:"status,omitempty"` // Order status. `Processing`, `Filled`, `Rejected`
	BlockTradeId string `url:"blockTradeId,omitempty"` // Block trade ID
	Limit string `url:"limit,omitempty"` // Limit for data size per page. [`1`, `200`]. Default: `20`
	Cursor string `url:"cursor,omitempty"` // Cursor. Use the `nextPageCursor` token from the response to retrieve the next page of the result set
}

type GetPositionMoveHistoryResponse struct {
	List []struct {
		BlockTradeId string `json:"blockTradeId"` // Block trade ID
		Category string `json:"category"` // Product type. `linear`, `spot`, `option`
		OrderId string `json:"orderId"` // Bybit order ID
		UserId int64 `json:"userId"` // User ID
		Symbol string `json:"symbol"` // Symbol name
		Side string `json:"side"` // Order side from taker's perspective. `Buy`, `Sell`
		Price string `json:"price"` // Order price
		Qty string `json:"qty"` // Order quantity
		ExecFee string `json:"execFee"` // The fee for taker or maker in the base currency paid to the Exchange executing the block trade
		Status string `json:"status"` // Block trade status. `Processing`, `Filled`, `Rejected`
		ExecId string `json:"execId"` // The unique trade ID from the exchange
		ResultCode int64 `json:"resultCode"` // The result code of the order. `0` means success
		ResultMessage string `json:"resultMessage"` // The error message. `""` when resultCode=0
		CreatedAt string `json:"createdAt"` // The timestamp (ms) when the order is created
		UpdatedAt string `json:"updatedAt"` // The timestamp (ms) when the order is updated
		RejectParty string `json:"rejectParty"` // `""` means the status=`Filled` `Taker`, `Maker` when status=`Rejected` `bybit` means error is occurred on the Bybit side
	} `json:"list"`
	NextPageCursor string `json:"nextPageCursor"` // Used to get the next page data
}

// POST /v5/position/add-margin
type PostPositionAddMarginRequest struct {
	Category string `json:"category"` // Product type [UTA2.0](../acct-mode#uta-20), [UTA1.0](../acct-mode#uta-10): `linear`, `inverse` Classic account: `linear`, `inverse`
	Symbol string `json:"symbol"` // Symbol name, like `BTCUSDT`, uppercase only
	Margin string `json:"margin"` // Add or reduce. To add, then `10`; To reduce, then `-10`. Support up to 4 decimal
	PositionIdx int64 `json:"positionIdx,omitempty"` // Used to identify positions in different position modes. For hedge mode position, this param is **required** `0`: one-way mode `1`: hedge-mode Buy side `2`: hedge-mode Sell side
}

type PostPositionAddMarginResponse struct {
	Category string `json:"category"` // Product type
	Symbol string `json:"symbol"` // Symbol name
	PositionIdx int64 `json:"positionIdx"` // Position idx, used to identify positions in different position modes `0`: One-Way Mode `1`: Buy side of both side mode `2`: Sell side of both side mode
	RiskId int64 `json:"riskId"` // Risk limit ID
	RiskLimitValue string `json:"riskLimitValue"` // Risk limit value
	Size string `json:"size"` // Position size
	AvgPrice string `json:"avgPrice"` // Average entry price
	LiqPrice string `json:"liqPrice"` // Liquidation price
	BustPrice string `json:"bustPrice"` // Bankruptcy price
	MarkPrice string `json:"markPrice"` // Last mark price
	PositionValue string `json:"positionValue"` // Position value
	Leverage string `json:"leverage"` // Position leverage
	AutoAddMargin int64 `json:"autoAddMargin"` // Whether to add margin automatically. `0`: false, `1`: true
	PositionStatus string `json:"positionStatus"` // Position status. `Normal`, `Liq`, `Adl`
	PositionIM string `json:"positionIM"` // Initial margin
	PositionMM string `json:"positionMM"` // Maintenance margin
	TakeProfit string `json:"takeProfit"` // Take profit price
	StopLoss string `json:"stopLoss"` // Stop loss price
	TrailingStop string `json:"trailingStop"` // Trailing stop (The distance from market price)
	UnrealisedPnl string `json:"unrealisedPnl"` // Unrealised PnL
	CumRealisedPnl string `json:"cumRealisedPnl"` // Cumulative realised pnl
	CreatedTime string `json:"createdTime"` // Timestamp of the first time a position was created on this symbol (ms)
	UpdatedTime string `json:"updatedTime"` // Position updated timestamp (ms)
}

// POST /v5/position/confirm-pending-mmr
type PostPositionConfirmPendingMmrRequest struct {
	Category string `json:"category"` // Product type Unified account: `linear`, `inverse` Classic account: `linear`, `inverse`
	Symbol string `json:"symbol"` // Symbol name
}

type PostPositionConfirmPendingMmrResponse struct {
	// TODO: fill in response fields parsed from docs
}

// POST /v5/position/move-positions
type PostPositionMovePositionsRequest struct {
	FromUid string `json:"fromUid"` // From UID Must be UTA Must be in one-way mode for Futures
	ToUid string `json:"toUid"` // To UID Must be UTA Must be in one-way mode for Futures
	List string `json:"list"` // Object. Up to 25 legs per request
}

type PostPositionMovePositionsResponse struct {
	RetCode int64 `json:"retCode"` // Result code. `0` means request is successfully accepted
	RetMsg string `json:"retMsg"` // Result message
	Result string `json:"result"` // Object
}

// POST /v5/position/set-auto-add-margin
type PostPositionSetAutoAddMarginRequest struct {
	Category string `json:"category"` // Product type [UTA2.0](../acct-mode#uta-20), [UTA1.0](../acct-mode#uta-10): `linear` (USDT Contract, USDC Contract) Classic account: `linear` (USDT Perps)
	Symbol string `json:"symbol"` // Symbol name, like `BTCUSDT`, uppercase only
	AutoAddMargin int64 `json:"autoAddMargin"` // Turn on/off. `0`: off. `1`: on
	PositionIdx int64 `json:"positionIdx,omitempty"` // Used to identify positions in different position modes. For hedge mode position, this param is **required** `0`: one-way mode `1`: hedge-mode Buy side `2`: hedge-mode Sell side
}

type PostPositionSetAutoAddMarginResponse struct {
	// TODO: fill in response fields parsed from docs
}

// POST /v5/position/set-leverage
type PostPositionSetLeverageRequest struct {
	Category string `json:"category"` // Product type [UTA2.0](../acct-mode#uta-20), [UTA1.0](../acct-mode#uta-10): `linear`, `inverse` Classic account: `linear`, `inverse`
	Symbol string `json:"symbol"` // Symbol name, like `BTCUSDT`, uppercase only
	BuyLeverage string `json:"buyLeverage"` // [`1`, max leverage] one-way mode: `buyLeverage` must be the same as `sellLeverage` Hedge mode: Classic account & UTA (isolated margin): `buyLeverage` and `sellLeverage` can be different; UTA (cross margin): `buyLeverage` must be the same as `sellLeverage`
	SellLeverage string `json:"sellLeverage"` // [`1`, max leverage]
}

type PostPositionSetLeverageResponse struct {
	// TODO: fill in response fields parsed from docs
}

// POST /v5/position/set-risk-limit
type PostPositionSetRiskLimitRequest struct {
	Category string `json:"category"` // Product type Unified account: `linear`, `inverse` Classic account: `linear`, `inverse`. _Please note that `category` is **not** involved with business logic_
	Symbol string `json:"symbol"` // Symbol name, like `BTCUSDT`, uppercase only
	RiskId int64 `json:"riskId"` // Risk limit ID
	PositionIdx int64 `json:"positionIdx,omitempty"` // Used to identify positions in different position modes. For hedge mode, it is **required** `0`: one-way mode `1`: hedge-mode Buy side `2`: hedge-mode Sell side
}

type PostPositionSetRiskLimitResponse struct {
	Category string `json:"category"` // Product type
	RiskId int64 `json:"riskId"` // Risk limit ID
	RiskLimitValue string `json:"riskLimitValue"` // The position limit value corresponding to this risk ID
}

// POST /v5/position/set-tpsl-mode
type PostPositionSetTpslModeRequest struct {
	Category string `json:"category"` // Product type Unified account: `linear`, `inverse` Classic account: `linear`, `inverse`. _Please note that `category` is **not** involved with business logic_
	Symbol string `json:"symbol"` // Symbol name, like `BTCUSDT`, uppercase only
	TpSlMode string `json:"tpSlMode"` // TP/SL mode. `Full`,`Partial`
}

type PostPositionSetTpslModeResponse struct {
	TpSlMode string `json:"tpSlMode"` // `Full`,`Partial`
}

// POST /v5/position/switch-isolated
type PostPositionSwitchIsolatedRequest struct {
	Category string `json:"category"` // Product type [UTA2.0](../acct-mode#uta-20): not supported [UTA1.0](../acct-mode#uta-10): `inverse` Classic: `linear`(USDT Preps), `inverse`
	Symbol string `json:"symbol"` // Symbol name, like `BTCUSDT`, uppercase only
	TradeMode int64 `json:"tradeMode"` // `0`: cross margin. `1`: isolated margin
	BuyLeverage string `json:"buyLeverage"` // The value must be equal to `sellLeverage` value
	SellLeverage string `json:"sellLeverage"` // The value must be equal to `buyLeverage` value
}

type PostPositionSwitchIsolatedResponse struct {
	// TODO: fill in response fields parsed from docs
}

// POST /v5/position/switch-mode
type PostPositionSwitchModeRequest struct {
	Category string `json:"category"` // Product type [UTA2.0](../acct-mode#uta-20): `linear`, USDT Contract [UTA1.0](../acct-mode#uta-10): `linear`, USDT Contract; `inverse`, Inverse Futures Classic: `linear`, USDT Perp; `inverse`, Inverse Futures
	Symbol string `json:"symbol,omitempty"` // Symbol name, like `BTCUSDT`, uppercase only. Either `symbol` or `coin` is **required**. `symbol` has a higher priority
	Coin string `json:"coin,omitempty"` // Coin, uppercase only
	Mode int64 `json:"mode"` // Position mode. `0`: Merged Single. `3`: Both Sides
}

type PostPositionSwitchModeResponse struct {
	// TODO: fill in response fields parsed from docs
}

// POST /v5/position/trading-stop
type PostPositionTradingStopRequest struct {
	Category string `json:"category"` // Product type [UTA2.0](../acct-mode#uta-20), [UTA1.0](../acct-mode#uta-10): `linear`, `inverse` Classic account: `linear`, `inverse`
	Symbol string `json:"symbol"` // Symbol name, like `BTCUSDT`, uppercase only
	TpslMode string `json:"tpslMode"` // TP/SL mode `Full`: entire position TP/SL `Partial`: partial position TP/SL
	PositionIdx int64 `json:"positionIdx"` // Used to identify positions in different position modes. `0`: one-way mode `1`: hedge-mode Buy side `2`: hedge-mode Sell side
	TakeProfit string `json:"takeProfit,omitempty"` // Cannot be less than 0, 0 means cancel TP
	StopLoss string `json:"stopLoss,omitempty"` // Cannot be less than 0, 0 means cancel SL
	TrailingStop string `json:"trailingStop,omitempty"` // Trailing stop by price distance. Cannot be less than 0, 0 means cancel TS
	TpTriggerBy string `json:"tpTriggerBy,omitempty"` // Take profit trigger price type
	SlTriggerBy string `json:"slTriggerBy,omitempty"` // Stop loss trigger price type
	ActivePrice string `json:"activePrice,omitempty"` // Trailing stop trigger price. Trailing stop will be triggered when this price is reached **only**
	TpSize string `json:"tpSize,omitempty"` // Take profit size valid for TP/SL partial mode, note: the value of tpSize and slSize must equal
	SlSize string `json:"slSize,omitempty"` // Stop loss size valid for TP/SL partial mode, note: the value of tpSize and slSize must equal
	TpLimitPrice string `json:"tpLimitPrice,omitempty"` // The limit order price when take profit price is triggered. Only works when tpslMode=Partial and tpOrderType=Limit
	SlLimitPrice string `json:"slLimitPrice,omitempty"` // The limit order price when stop loss price is triggered. Only works when tpslMode=Partial and slOrderType=Limit
	TpOrderType string `json:"tpOrderType,omitempty"` // The order type when take profit is triggered. `Market`(default), `Limit` For tpslMode=Full, it only supports tpOrderType="Market"
	SlOrderType string `json:"slOrderType,omitempty"` // The order type when stop loss is triggered. `Market`(default), `Limit` For tpslMode=Full, it only supports slOrderType="Market"
}

type PostPositionTradingStopResponse struct {
	// TODO: fill in response fields parsed from docs
}

