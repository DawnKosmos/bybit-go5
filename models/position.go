// Code generated by bybitgen; DO NOT EDIT.
package models

// GET /v5/position/closed-pnl
type GetPositionClosedPnlRequest struct {
	Category string `url:"category"` // Product type [UTA2.0](../acct-mode#uta-20), [UTA1.0](../acct-mode#uta-10): `linear`(USDT Contract, USDC Contract), `inverse`, `option` Classic account: `linear`(USDT Perps), `inverse`
	Symbol string `url:"symbol,omitempty"` // Symbol name, like `BTCUSDT`, uppercase only
	StartTime int64 `url:"startTime,omitempty"` // The start timestamp (ms) startTime and endTime are not passed, return 7 days by default Only startTime is passed, return range between startTime and startTime+7 days Only endTime is passed, return range between endTime-7 days and endTime If both are passed, the rule is endTime - startTime <= 7 days
	EndTime int64 `url:"endTime,omitempty"` // The end timestamp (ms)
	Limit int64 `url:"limit,omitempty"` // Limit for data size per page. [`1`, `100`]. Default: `50`
	Cursor string `url:"cursor,omitempty"` // Cursor. Use the `nextPageCursor` token from the response to retrieve the next page of the result set
}

type GetPositionClosedPnlResponse struct {
	// TODO: fill in response fields parsed from docs
}

// GET /v5/position/get-closed-positions
type GetPositionGetClosedPositionsRequest struct {
	Category string `url:"category"` // option
	Symbol string `url:"symbol,omitempty"` // Symbol name
	StartTime int64 `url:"startTime,omitempty"` // The start timestamp (ms) startTime and endTime are not passed, return 1 days by default Only startTime is passed, return range between startTime and startTime+1 days Only endTime is passed, return range between endTime-1 days and endTime If both are passed, the rule is endTime - startTime <= 7 days
	EndTime int64 `url:"endTime,omitempty"` // The end timestamp (ms)
	Limit int64 `url:"limit,omitempty"` // Limit for data size per page. [`1`, `100`]. Default: `50`
	Cursor string `url:"cursor,omitempty"` // Cursor. Use the `nextPageCursor` token from the response to retrieve the next page of the result set
}

type GetPositionGetClosedPositionsResponse struct {
	// TODO: fill in response fields parsed from docs
}

// GET /v5/position/list
type GetPositionListRequest struct {
	Category string `url:"category"` // Product type [UTA2.0](/v5/acct-mode#uta-20), [UTA1.0](/v5/acct-mode#uta-10): `linear`, `inverse`, `option` Classic account: `linear`, `inverse`
	Symbol string `url:"symbol,omitempty"` // Symbol name, like `BTCUSDT`, uppercase only If `symbol` passed, it returns data regardless of having position or not. If `symbol`=null and `settleCoin` specified, it returns position size greater than zero.
	BaseCoin string `url:"baseCoin,omitempty"` // Base coin, uppercase only. `option` **only**. Return all option positions if not passed
	SettleCoin string `url:"settleCoin,omitempty"` // Settle coin `linear`: either `symbol` or `settleCoin` is **required**. `symbol` has a higher priority
	Limit int64 `url:"limit,omitempty"` // Limit for data size per page. [`1`, `200`]. Default: `20`
	Cursor string `url:"cursor,omitempty"` // Cursor. Use the `nextPageCursor` token from the response to retrieve the next page of the result set
}

type GetPositionListResponse struct {
	// TODO: fill in response fields parsed from docs
}

// GET /v5/position/move-history
type GetPositionMoveHistoryRequest struct {
	Category string `url:"category,omitempty"` // Product type [UTA2.0](../acct-mode#uta-20), [UTA1.0](../acct-mode#uta-10): `linear`, `spot`, `option`
	Symbol string `url:"symbol,omitempty"` // Symbol name, like `BTCUSDT`, uppercase only
	StartTime string `url:"startTime,omitempty"` // The order creation start timestamp. The interval is 7 days
	EndTime string `url:"endTime,omitempty"` // The order creation end timestamp. The interval is 7 days
	Status string `url:"status,omitempty"` // Order status. `Processing`, `Filled`, `Rejected`
	BlockTradeId string `url:"blockTradeId,omitempty"` // Block trade ID
	Limit string `url:"limit,omitempty"` // Limit for data size per page. [`1`, `200`]. Default: `20`
	Cursor string `url:"cursor,omitempty"` // Cursor. Use the `nextPageCursor` token from the response to retrieve the next page of the result set
}

type GetPositionMoveHistoryResponse struct {
	// TODO: fill in response fields parsed from docs
}

// POST /v5/position/add-margin
type PostPositionAddMarginRequest struct {
	Category string `json:"category"` // Product type [UTA2.0](../acct-mode#uta-20), [UTA1.0](../acct-mode#uta-10): `linear`, `inverse` Classic account: `linear`, `inverse`
	Symbol string `json:"symbol"` // Symbol name, like `BTCUSDT`, uppercase only
	Margin string `json:"margin"` // Add or reduce. To add, then `10`; To reduce, then `-10`. Support up to 4 decimal
	PositionIdx int64 `json:"positionIdx,omitempty"` // Used to identify positions in different position modes. For hedge mode position, this param is **required** `0`: one-way mode `1`: hedge-mode Buy side `2`: hedge-mode Sell side
}

type PostPositionAddMarginResponse struct {
	// TODO: fill in response fields parsed from docs
}

// POST /v5/position/confirm-pending-mmr
type PostPositionConfirmPendingMmrRequest struct {
	Category string `json:"category"` // Product type Unified account: `linear`, `inverse` Classic account: `linear`, `inverse`
	Symbol string `json:"symbol"` // Symbol name
}

type PostPositionConfirmPendingMmrResponse struct {
	// TODO: fill in response fields parsed from docs
}

// POST /v5/position/move-positions
type PostPositionMovePositionsRequest struct {
	FromUid string `json:"fromUid"` // From UID Must be UTA Must be in one-way mode for Futures
	ToUid string `json:"toUid"` // To UID Must be UTA Must be in one-way mode for Futures
	List string `json:"list"` // Object. Up to 25 legs per request
}

type PostPositionMovePositionsResponse struct {
	// TODO: fill in response fields parsed from docs
}

// POST /v5/position/set-auto-add-margin
type PostPositionSetAutoAddMarginRequest struct {
	Category string `json:"category"` // Product type [UTA2.0](../acct-mode#uta-20), [UTA1.0](../acct-mode#uta-10): `linear` (USDT Contract, USDC Contract) Classic account: `linear` (USDT Perps)
	Symbol string `json:"symbol"` // Symbol name, like `BTCUSDT`, uppercase only
	AutoAddMargin int64 `json:"autoAddMargin"` // Turn on/off. `0`: off. `1`: on
	PositionIdx int64 `json:"positionIdx,omitempty"` // Used to identify positions in different position modes. For hedge mode position, this param is **required** `0`: one-way mode `1`: hedge-mode Buy side `2`: hedge-mode Sell side
}

type PostPositionSetAutoAddMarginResponse struct {
	// TODO: fill in response fields parsed from docs
}

// POST /v5/position/set-leverage
type PostPositionSetLeverageRequest struct {
	Category string `json:"category"` // Product type [UTA2.0](../acct-mode#uta-20), [UTA1.0](../acct-mode#uta-10): `linear`, `inverse` Classic account: `linear`, `inverse`
	Symbol string `json:"symbol"` // Symbol name, like `BTCUSDT`, uppercase only
	BuyLeverage string `json:"buyLeverage"` // [`1`, max leverage] one-way mode: `buyLeverage` must be the same as `sellLeverage` Hedge mode: Classic account & UTA (isolated margin): `buyLeverage` and `sellLeverage` can be different; UTA (cross margin): `buyLeverage` must be the same as `sellLeverage`
	SellLeverage string `json:"sellLeverage"` // [`1`, max leverage]
}

type PostPositionSetLeverageResponse struct {
	// TODO: fill in response fields parsed from docs
}

// POST /v5/position/set-risk-limit
type PostPositionSetRiskLimitRequest struct {
	Category string `json:"category"` // Product type Unified account: `linear`, `inverse` Classic account: `linear`, `inverse`. _Please note that `category` is **not** involved with business logic_
	Symbol string `json:"symbol"` // Symbol name, like `BTCUSDT`, uppercase only
	RiskId int64 `json:"riskId"` // Risk limit ID
	PositionIdx int64 `json:"positionIdx,omitempty"` // Used to identify positions in different position modes. For hedge mode, it is **required** `0`: one-way mode `1`: hedge-mode Buy side `2`: hedge-mode Sell side
}

type PostPositionSetRiskLimitResponse struct {
	// TODO: fill in response fields parsed from docs
}

// POST /v5/position/set-tpsl-mode
type PostPositionSetTpslModeRequest struct {
	Category string `json:"category"` // Product type Unified account: `linear`, `inverse` Classic account: `linear`, `inverse`. _Please note that `category` is **not** involved with business logic_
	Symbol string `json:"symbol"` // Symbol name, like `BTCUSDT`, uppercase only
	TpSlMode string `json:"tpSlMode"` // TP/SL mode. `Full`,`Partial`
}

type PostPositionSetTpslModeResponse struct {
	// TODO: fill in response fields parsed from docs
}

// POST /v5/position/switch-isolated
type PostPositionSwitchIsolatedRequest struct {
	Category string `json:"category"` // Product type [UTA2.0](../acct-mode#uta-20): not supported [UTA1.0](../acct-mode#uta-10): `inverse` Classic: `linear`(USDT Preps), `inverse`
	Symbol string `json:"symbol"` // Symbol name, like `BTCUSDT`, uppercase only
	TradeMode int64 `json:"tradeMode"` // `0`: cross margin. `1`: isolated margin
	BuyLeverage string `json:"buyLeverage"` // The value must be equal to `sellLeverage` value
	SellLeverage string `json:"sellLeverage"` // The value must be equal to `buyLeverage` value
}

type PostPositionSwitchIsolatedResponse struct {
	// TODO: fill in response fields parsed from docs
}

// POST /v5/position/switch-mode
type PostPositionSwitchModeRequest struct {
	Category string `json:"category"` // Product type [UTA2.0](../acct-mode#uta-20): `linear`, USDT Contract [UTA1.0](../acct-mode#uta-10): `linear`, USDT Contract; `inverse`, Inverse Futures Classic: `linear`, USDT Perp; `inverse`, Inverse Futures
	Symbol string `json:"symbol,omitempty"` // Symbol name, like `BTCUSDT`, uppercase only. Either `symbol` or `coin` is **required**. `symbol` has a higher priority
	Coin string `json:"coin,omitempty"` // Coin, uppercase only
	Mode int64 `json:"mode"` // Position mode. `0`: Merged Single. `3`: Both Sides
}

type PostPositionSwitchModeResponse struct {
	// TODO: fill in response fields parsed from docs
}

// POST /v5/position/trading-stop
type PostPositionTradingStopRequest struct {
	Category string `json:"category"` // Product type [UTA2.0](../acct-mode#uta-20), [UTA1.0](../acct-mode#uta-10): `linear`, `inverse` Classic account: `linear`, `inverse`
	Symbol string `json:"symbol"` // Symbol name, like `BTCUSDT`, uppercase only
	TpslMode string `json:"tpslMode"` // TP/SL mode `Full`: entire position TP/SL `Partial`: partial position TP/SL
	PositionIdx int64 `json:"positionIdx"` // Used to identify positions in different position modes. `0`: one-way mode `1`: hedge-mode Buy side `2`: hedge-mode Sell side
	TakeProfit string `json:"takeProfit,omitempty"` // Cannot be less than 0, 0 means cancel TP
	StopLoss string `json:"stopLoss,omitempty"` // Cannot be less than 0, 0 means cancel SL
	TrailingStop string `json:"trailingStop,omitempty"` // Trailing stop by price distance. Cannot be less than 0, 0 means cancel TS
	TpTriggerBy string `json:"tpTriggerBy,omitempty"` // Take profit trigger price type
	SlTriggerBy string `json:"slTriggerBy,omitempty"` // Stop loss trigger price type
	ActivePrice string `json:"activePrice,omitempty"` // Trailing stop trigger price. Trailing stop will be triggered when this price is reached **only**
	TpSize string `json:"tpSize,omitempty"` // Take profit size valid for TP/SL partial mode, note: the value of tpSize and slSize must equal
	SlSize string `json:"slSize,omitempty"` // Stop loss size valid for TP/SL partial mode, note: the value of tpSize and slSize must equal
	TpLimitPrice string `json:"tpLimitPrice,omitempty"` // The limit order price when take profit price is triggered. Only works when tpslMode=Partial and tpOrderType=Limit
	SlLimitPrice string `json:"slLimitPrice,omitempty"` // The limit order price when stop loss price is triggered. Only works when tpslMode=Partial and slOrderType=Limit
	TpOrderType string `json:"tpOrderType,omitempty"` // The order type when take profit is triggered. `Market`(default), `Limit` For tpslMode=Full, it only supports tpOrderType="Market"
	SlOrderType string `json:"slOrderType,omitempty"` // The order type when stop loss is triggered. `Market`(default), `Limit` For tpslMode=Full, it only supports slOrderType="Market"
}

type PostPositionTradingStopResponse struct {
	// TODO: fill in response fields parsed from docs
}

