// Code generated by bybitgen; DO NOT EDIT.
package models

// GET /v5/pre-upgrade/account/transaction-log
type GetPreUpgradeAccountTransactionLogRequest struct {
	Category string `url:"category"` // Product type `linear`, `option`
	BaseCoin string `url:"baseCoin,omitempty"` // BaseCoin, uppercase only. e.g., BTC of BTCPERP
	Type string `url:"type,omitempty"` // Types of transaction logs
	StartTime int64 `url:"startTime,omitempty"` // The start timestamp (ms) startTime and endTime are not passed, return 7 days by default Only startTime is passed, return range between startTime and startTime+7 days Only endTime is passed, return range between endTime-7 days and endTime If both are passed, the rule is endTime - startTime <= 7 days
	EndTime int64 `url:"endTime,omitempty"` // The end timestamp (ms)
	Limit int64 `url:"limit,omitempty"` // Limit for data size per page. [`1`, `50`]. Default: `20`
	Cursor string `url:"cursor,omitempty"` // Cursor. Used for pagination
}

type GetPreUpgradeAccountTransactionLogResponse struct {
	// TODO: fill in response fields parsed from docs
}

// GET /v5/pre-upgrade/asset/delivery-record
type GetPreUpgradeAssetDeliveryRecordRequest struct {
	Category string `url:"category"` // Product type `option`
	Symbol string `url:"symbol,omitempty"` // Symbol name, uppercase only
	ExpDate string `url:"expDate,omitempty"` // Expiry date. `25MAR22`. Default: return all
	Limit int64 `url:"limit,omitempty"` // Limit for data size per page. [`1`, `50`]. Default: `20`
	Cursor string `url:"cursor,omitempty"` // Cursor. Used for pagination
}

type GetPreUpgradeAssetDeliveryRecordResponse struct {
	// TODO: fill in response fields parsed from docs
}

// GET /v5/pre-upgrade/asset/settlement-record
type GetPreUpgradeAssetSettlementRecordRequest struct {
	Category string `url:"category"` // Product type `linear`
	Symbol string `url:"symbol,omitempty"` // Symbol name, like `BTCUSDT`, uppercase only
	Limit int64 `url:"limit,omitempty"` // Limit for data size per page. [`1`, `50`]. Default: `20`
	Cursor string `url:"cursor,omitempty"` // Cursor. Used for pagination
}

type GetPreUpgradeAssetSettlementRecordResponse struct {
	// TODO: fill in response fields parsed from docs
}

// GET /v5/pre-upgrade/execution/list
type GetPreUpgradeExecutionListRequest struct {
	Category string `url:"category"` // Product type `linear`, `inverse`, `option`, `spot`
	Symbol string `url:"symbol,omitempty"` // Symbol name, like `BTCUSDT`, uppercase only
	OrderId string `url:"orderId,omitempty"` // Order ID
	OrderLinkId string `url:"orderLinkId,omitempty"` // User customised order ID
	BaseCoin string `url:"baseCoin,omitempty"` // Base coin, uppercase only. Used for `option`
	StartTime int64 `url:"startTime,omitempty"` // The start timestamp (ms) startTime and endTime are not passed, return 7 days by default Only startTime is passed, return range between startTime and startTime+7 days Only endTime is passed, return range between endTime-7 days and endTime If both are passed, the rule is endTime - startTime <= 7 days
	EndTime int64 `url:"endTime,omitempty"` // The end timestamp (ms)
	ExecType string `url:"execType,omitempty"` // Execution type
	Limit int64 `url:"limit,omitempty"` // Limit for data size per page. [`1`, `100`]. Default: `50`
	Cursor string `url:"cursor,omitempty"` // Cursor. Use the `nextPageCursor` token from the response to retrieve the next page of the result set
}

type GetPreUpgradeExecutionListResponse struct {
	// TODO: fill in response fields parsed from docs
}

// GET /v5/pre-upgrade/order/history
type GetPreUpgradeOrderHistoryRequest struct {
	Category string `url:"category"` // Product type `linear`, `inverse`, `option`, `spot`
	Symbol string `url:"symbol,omitempty"` // Symbol name, like `BTCUSDT`, uppercase only. If not passed, return settleCoin=USDT by default To get USDC perp, please pass symbol
	BaseCoin string `url:"baseCoin,omitempty"` // Base coin, uppercase only. Used for `option` query
	OrderId string `url:"orderId,omitempty"` // Order ID
	OrderLinkId string `url:"orderLinkId,omitempty"` // User customised order ID
	OrderFilter string `url:"orderFilter,omitempty"` // `Order`: active order, `StopOrder`: conditional order
	OrderStatus string `url:"orderStatus,omitempty"` // Order status. Not supported for `spot` category
	StartTime int64 `url:"startTime,omitempty"` // The start timestamp (ms) `startTime` and `endTime` must be passed together or both are not passed endTime - startTime <= 7 days If both are not passed, it returns recent 7 days by default
	EndTime int64 `url:"endTime,omitempty"` // The end timestamp (ms)
	Limit int64 `url:"limit,omitempty"` // Limit for data size per page. [`1`, `50`]. Default: `20`
	Cursor string `url:"cursor,omitempty"` // Cursor. Use the `nextPageCursor` token from the response to retrieve the next page of the result set
}

type GetPreUpgradeOrderHistoryResponse struct {
	// TODO: fill in response fields parsed from docs
}

// GET /v5/pre-upgrade/position/closed-pnl
type GetPreUpgradePositionClosedPnlRequest struct {
	Category string `url:"category"` // Product type `linear`, `inverse`
	Symbol string `url:"symbol"` // Symbol name, like `BTCUSDT`, uppercase only
	StartTime int64 `url:"startTime,omitempty"` // The start timestamp (ms) startTime and endTime are not passed, return 7 days by default Only startTime is passed, return range between startTime and startTime+7 days Only endTime is passed, return range between endTime-7 days and endTime If both are passed, the rule is endTime - startTime <= 7 days
	EndTime int64 `url:"endTime,omitempty"` // The end timestamp (ms)
	Limit int64 `url:"limit,omitempty"` // Limit for data size per page. [`1`, `100`]. Default: `50`
	Cursor string `url:"cursor,omitempty"` // Cursor. Use the `nextPageCursor` token from the response to retrieve the next page of the result set
}

type GetPreUpgradePositionClosedPnlResponse struct {
	// TODO: fill in response fields parsed from docs
}

