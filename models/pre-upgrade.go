// Code generated by bybitgen; DO NOT EDIT.
package models

// GET /v5/pre-upgrade/account/transaction-log
type GetPreUpgradeAccountTransactionLogRequest struct {
	Category string `url:"category"` // Product type `linear`, `option`
	BaseCoin string `url:"baseCoin,omitempty"` // BaseCoin, uppercase only. e.g., BTC of BTCPERP
	Type string `url:"type,omitempty"` // Types of transaction logs
	StartTime int64 `url:"startTime,omitempty"` // The start timestamp (ms) startTime and endTime are not passed, return 7 days by default Only startTime is passed, return range between startTime and startTime+7 days Only endTime is passed, return range between endTime-7 days and endTime If both are passed, the rule is endTime - startTime <= 7 days
	EndTime int64 `url:"endTime,omitempty"` // The end timestamp (ms)
	Limit int64 `url:"limit,omitempty"` // Limit for data size per page. [`1`, `50`]. Default: `20`
	Cursor string `url:"cursor,omitempty"` // Cursor. Used for pagination
}

type GetPreUpgradeAccountTransactionLogResponse struct {
	List []struct {
		Symbol string `json:"symbol"` // Symbol name
		Category string `json:"category"` // Product type
		Side string `json:"side"` // Side. `Buy`,`Sell`,`None`
		TransactionTime string `json:"transactionTime"` // Transaction timestamp (ms)
		Type string `json:"type"` // Type
		Qty string `json:"qty"` // Quantity
		Size string `json:"size"` // Size
		Currency string `json:"currency"` // USDC、USDT、BTC、ETH
		TradePrice string `json:"tradePrice"` // Trade price
		Funding string `json:"funding"` // Funding fee Positive value means receiving funding fee Negative value means deducting funding fee
		Fee string `json:"fee"` // Trading fee Positive fee value means expense Negative fee value means rebates
		CashFlow string `json:"cashFlow"` // Cash flow
		Change string `json:"change"` // Change
		CashBalance string `json:"cashBalance"` // Cash balance
		FeeRate string `json:"feeRate"` // When type=`TRADE`, then it is trading fee rate When type=`SETTLEMENT`, it means funding fee rate. For side=Buy, feeRate=market fee rate; For side=Sell, feeRate= - market fee rate
		BonusChange string `json:"bonusChange"` // The change of bonus
		TradeId string `json:"tradeId"` // Trade ID
		OrderId string `json:"orderId"` // Order ID
		OrderLinkId string `json:"orderLinkId"` // User customised order ID
	} `json:"list"`
	NextPageCursor string `json:"nextPageCursor"` // Cursor. Used for pagination
}

// GET /v5/pre-upgrade/asset/delivery-record
type GetPreUpgradeAssetDeliveryRecordRequest struct {
	Category string `url:"category"` // Product type `option`
	Symbol string `url:"symbol,omitempty"` // Symbol name, uppercase only
	ExpDate string `url:"expDate,omitempty"` // Expiry date. `25MAR22`. Default: return all
	Limit int64 `url:"limit,omitempty"` // Limit for data size per page. [`1`, `50`]. Default: `20`
	Cursor string `url:"cursor,omitempty"` // Cursor. Used for pagination
}

type GetPreUpgradeAssetDeliveryRecordResponse struct {
	Category string `json:"category"` // Product type
	List []struct {
		DeliveryTime string `json:"deliveryTime"` // Delivery time (ms)
		Symbol string `json:"symbol"` // Symbol name
		Side string `json:"side"` // `Buy`,`Sell`
		Position string `json:"position"` // Executed size
		DeliveryPrice string `json:"deliveryPrice"` // Delivery price
		Strike string `json:"strike"` // Exercise price
		Fee string `json:"fee"` // Trading fee
		DeliveryRpl string `json:"deliveryRpl"` // Realized PnL of the delivery
	} `json:"list"`
	NextPageCursor string `json:"nextPageCursor"` // Cursor. Used for pagination
}

// GET /v5/pre-upgrade/asset/settlement-record
type GetPreUpgradeAssetSettlementRecordRequest struct {
	Category string `url:"category"` // Product type `linear`
	Symbol string `url:"symbol,omitempty"` // Symbol name, like `BTCUSDT`, uppercase only
	Limit int64 `url:"limit,omitempty"` // Limit for data size per page. [`1`, `50`]. Default: `20`
	Cursor string `url:"cursor,omitempty"` // Cursor. Used for pagination
}

type GetPreUpgradeAssetSettlementRecordResponse struct {
	Category string `json:"category"` // Product type
	List []struct {
		Symbol string `json:"symbol"` // Symbol name
		Side string `json:"side"` // `Buy`,`Sell`
		Size string `json:"size"` // Position size
		SessionAvgPrice string `json:"sessionAvgPrice"` // Settlement price
		MarkPrice string `json:"markPrice"` // Mark price
		RealisedPnl string `json:"realisedPnl"` // Realised PnL
		CreatedTime string `json:"createdTime"` // Created time (ms)
	} `json:"list"`
	NextPageCursor string `json:"nextPageCursor"` // Cursor. Used for pagination
}

// GET /v5/pre-upgrade/execution/list
type GetPreUpgradeExecutionListRequest struct {
	Category string `url:"category"` // Product type `linear`, `inverse`, `option`, `spot`
	Symbol string `url:"symbol,omitempty"` // Symbol name, like `BTCUSDT`, uppercase only
	OrderId string `url:"orderId,omitempty"` // Order ID
	OrderLinkId string `url:"orderLinkId,omitempty"` // User customised order ID
	BaseCoin string `url:"baseCoin,omitempty"` // Base coin, uppercase only. Used for `option`
	StartTime int64 `url:"startTime,omitempty"` // The start timestamp (ms) startTime and endTime are not passed, return 7 days by default Only startTime is passed, return range between startTime and startTime+7 days Only endTime is passed, return range between endTime-7 days and endTime If both are passed, the rule is endTime - startTime <= 7 days
	EndTime int64 `url:"endTime,omitempty"` // The end timestamp (ms)
	ExecType string `url:"execType,omitempty"` // Execution type
	Limit int64 `url:"limit,omitempty"` // Limit for data size per page. [`1`, `100`]. Default: `50`
	Cursor string `url:"cursor,omitempty"` // Cursor. Use the `nextPageCursor` token from the response to retrieve the next page of the result set
}

type GetPreUpgradeExecutionListResponse struct {
	Category string `json:"category"` // Product type
	List []struct {
		Symbol string `json:"symbol"` // Symbol name
		OrderId string `json:"orderId"` // Order ID
		OrderLinkId string `json:"orderLinkId"` // User customized order ID
		Side string `json:"side"` // Side. `Buy`,`Sell`
		OrderPrice string `json:"orderPrice"` // Order price
		OrderQty string `json:"orderQty"` // Order qty
		LeavesQty string `json:"leavesQty"` // The remaining qty not executed
		OrderType string `json:"orderType"` // Order type. `Market`,`Limit`
		StopOrderType string `json:"stopOrderType"` // Stop order type. If the order is not stop order, any type is not returned
		ExecFee string `json:"execFee"` // Executed trading fee
		ExecId string `json:"execId"` // Execution ID
		ExecPrice string `json:"execPrice"` // Execution price
		ExecQty string `json:"execQty"` // Execution qty
		ExecType string `json:"execType"` // Executed type
		ExecValue string `json:"execValue"` // Executed order value
		ExecTime string `json:"execTime"` // Executed timestamp (ms)
		IsMaker bool `json:"isMaker"` // Is maker order. `true`: maker, `false`: taker
		FeeRate string `json:"feeRate"` // Trading fee rate
		TradeIv string `json:"tradeIv"` // Implied volatility
		MarkIv string `json:"markIv"` // Implied volatility of mark price
		MarkPrice string `json:"markPrice"` // The mark price of the symbol when executing
		IndexPrice string `json:"indexPrice"` // The index price of the symbol when executing
		UnderlyingPrice string `json:"underlyingPrice"` // The underlying price of the symbol when executing
		BlockTradeId string `json:"blockTradeId"` // Paradigm block trade ID
		ClosedSize string `json:"closedSize"` // Closed position size
	} `json:"list"`
	NextPageCursor string `json:"nextPageCursor"` // Refer to the `cursor` request parameter
}

// GET /v5/pre-upgrade/order/history
type GetPreUpgradeOrderHistoryRequest struct {
	Category string `url:"category"` // Product type `linear`, `inverse`, `option`, `spot`
	Symbol string `url:"symbol,omitempty"` // Symbol name, like `BTCUSDT`, uppercase only. If not passed, return settleCoin=USDT by default To get USDC perp, please pass symbol
	BaseCoin string `url:"baseCoin,omitempty"` // Base coin, uppercase only. Used for `option` query
	OrderId string `url:"orderId,omitempty"` // Order ID
	OrderLinkId string `url:"orderLinkId,omitempty"` // User customised order ID
	OrderFilter string `url:"orderFilter,omitempty"` // `Order`: active order, `StopOrder`: conditional order
	OrderStatus string `url:"orderStatus,omitempty"` // Order status. Not supported for `spot` category
	StartTime int64 `url:"startTime,omitempty"` // The start timestamp (ms) `startTime` and `endTime` must be passed together or both are not passed endTime - startTime <= 7 days If both are not passed, it returns recent 7 days by default
	EndTime int64 `url:"endTime,omitempty"` // The end timestamp (ms)
	Limit int64 `url:"limit,omitempty"` // Limit for data size per page. [`1`, `50`]. Default: `20`
	Cursor string `url:"cursor,omitempty"` // Cursor. Use the `nextPageCursor` token from the response to retrieve the next page of the result set
}

type GetPreUpgradeOrderHistoryResponse struct {
	Category string `json:"category"` // Product type
	List []struct {
		OrderId string `json:"orderId"` // Order ID
		OrderLinkId string `json:"orderLinkId"` // User customised order ID
		BlockTradeId string `json:"blockTradeId"` // Block trade ID
		Symbol string `json:"symbol"` // Symbol name
		Price string `json:"price"` // Order price
		Qty string `json:"qty"` // Order qty
		Side string `json:"side"` // Side. `Buy`,`Sell`
		IsLeverage string `json:"isLeverage"` // Useless field for those orders before upgraded
		PositionIdx int64 `json:"positionIdx"` // Position index. Used to identify positions in different position modes
		OrderStatus string `json:"orderStatus"` // Order status
		CancelType string `json:"cancelType"` // Cancel type
		RejectReason string `json:"rejectReason"` // Reject reason
		AvgPrice string `json:"avgPrice"` // Average filled price. If unfilled, it is `""`, and also for those orders have partilly filled but cancelled at the end
		LeavesQty string `json:"leavesQty"` // The remaining qty not executed
		LeavesValue string `json:"leavesValue"` // The estimated value not executed
		CumExecQty string `json:"cumExecQty"` // Cumulative executed order qty
		CumExecValue string `json:"cumExecValue"` // Cumulative executed order value
		CumExecFee string `json:"cumExecFee"` // Cumulative executed trading fee
		TimeInForce string `json:"timeInForce"` // Time in force
		OrderType string `json:"orderType"` // Order type. `Market`,`Limit`
		StopOrderType string `json:"stopOrderType"` // Stop order type
		OrderIv string `json:"orderIv"` // Implied volatility
		TriggerPrice string `json:"triggerPrice"` // Trigger price. If `stopOrderType`=_TrailingStop_, it is activate price. Otherwise, it is trigger price
		TakeProfit string `json:"takeProfit"` // Take profit price
		StopLoss string `json:"stopLoss"` // Stop loss price
		TpTriggerBy string `json:"tpTriggerBy"` // The price type to trigger take profit
		SlTriggerBy string `json:"slTriggerBy"` // The price type to trigger stop loss
		TriggerDirection int64 `json:"triggerDirection"` // Trigger direction. `1`: rise, `2`: fall
		TriggerBy string `json:"triggerBy"` // The price type of trigger price
		LastPriceOnCreated string `json:"lastPriceOnCreated"` // Last price when place the order
		ReduceOnly bool `json:"reduceOnly"` // Reduce only. `true` means reduce position size
		CloseOnTrigger bool `json:"closeOnTrigger"` // Close on trigger. <a href="https://www.bybit.com/en/help-center/article/Close-On-Trigger-Order">What is a close on trigger order?</a>
		PlaceType string `json:"placeType"` // Place type, `option` used. `iv`, `price`
		SmpType string `json:"smpType"` // SMP execution type
		SmpGroup int64 `json:"smpGroup"` // Smp group ID. If the UID has no group, it is `0` by default
		SmpOrderId string `json:"smpOrderId"` // The counterparty's orderID which triggers this SMP execution
		CreatedTime string `json:"createdTime"` // Order created timestamp (ms)
		UpdatedTime string `json:"updatedTime"` // Order updated timestamp (ms)
	} `json:"list"`
	NextPageCursor string `json:"nextPageCursor"` // Refer to the `cursor` request parameter
}

// GET /v5/pre-upgrade/position/closed-pnl
type GetPreUpgradePositionClosedPnlRequest struct {
	Category string `url:"category"` // Product type `linear`, `inverse`
	Symbol string `url:"symbol"` // Symbol name, like `BTCUSDT`, uppercase only
	StartTime int64 `url:"startTime,omitempty"` // The start timestamp (ms) startTime and endTime are not passed, return 7 days by default Only startTime is passed, return range between startTime and startTime+7 days Only endTime is passed, return range between endTime-7 days and endTime If both are passed, the rule is endTime - startTime <= 7 days
	EndTime int64 `url:"endTime,omitempty"` // The end timestamp (ms)
	Limit int64 `url:"limit,omitempty"` // Limit for data size per page. [`1`, `100`]. Default: `50`
	Cursor string `url:"cursor,omitempty"` // Cursor. Use the `nextPageCursor` token from the response to retrieve the next page of the result set
}

type GetPreUpgradePositionClosedPnlResponse struct {
	Category string `json:"category"` // Product type
	List []struct {
		Symbol string `json:"symbol"` // Symbol name
		OrderId string `json:"orderId"` // Order ID
		Side string `json:"side"` // `Buy`, `Side`
		Qty string `json:"qty"` // Order qty
		OrderPrice string `json:"orderPrice"` // Order price
		OrderType string `json:"orderType"` // Order type. `Market`,`Limit`
		ExecType string `json:"execType"` // Exec type. `Trade`, `BustTrade`, `SessionSettlePnL`, `Settle`
		ClosedSize string `json:"closedSize"` // Closed size
		CumEntryValue string `json:"cumEntryValue"` // Cumulated Position value
		AvgEntryPrice string `json:"avgEntryPrice"` // Average entry price
		CumExitValue string `json:"cumExitValue"` // Cumulated exit position value
		AvgExitPrice string `json:"avgExitPrice"` // Average exit price
		ClosedPnl string `json:"closedPnl"` // Closed PnL
		FillCount string `json:"fillCount"` // The number of fills in a single order
		Leverage string `json:"leverage"` // leverage
		CreatedTime string `json:"createdTime"` // The created time (ms)
		UpdatedTime string `json:"updatedTime"` // The updated time (ms)
	} `json:"list"`
	NextPageCursor string `json:"nextPageCursor"` // Refer to the `cursor` request parameter
}

