// Code generated by bybitgen; DO NOT EDIT.
package models

// GET /v5/spot-lever-token/info
type GetSpotLeverTokenInfoRequest struct {
	LtCoin string `url:"ltCoin,omitempty"` // Abbreviation of the LT, such as `BTC3L`
}

type GetSpotLeverTokenInfoResponse struct {
	List []struct {
		LtCoin string `json:"ltCoin"` // Abbreviation
		LtName string `json:"ltName"` // Full name of leveraged token
		MaxPurchase string `json:"maxPurchase"` // Single maximum purchase amount
		MinPurchase string `json:"minPurchase"` // Single minimum purchase amount
		MaxPurchaseDaily string `json:"maxPurchaseDaily"` // Maximum purchase amount in a single day
		MaxRedeem string `json:"maxRedeem"` // Single Maximum redemption quantity
		MinRedeem string `json:"minRedeem"` // Single Minimum redemption quantity
		MaxRedeemDaily string `json:"maxRedeemDaily"` // Maximum redemption quantity in a single day
		PurchaseFeeRate string `json:"purchaseFeeRate"` // Purchase fee rate
		RedeemFeeRate string `json:"redeemFeeRate"` // Redeem fee rate
		LtStatus string `json:"ltStatus"` // Whether the leverage token can be purchased or redeemed
		FundFee string `json:"fundFee"` // Funding fee charged daily for users holding leveraged token
		FundFeeTime string `json:"fundFeeTime"` // The time to charge funding fee
		ManageFeeRate string `json:"manageFeeRate"` // Management fee rate
		ManageFeeTime string `json:"manageFeeTime"` // The time to charge management fee
		Value string `json:"value"` // Nominal asset value
		NetValue string `json:"netValue"` // Net value
		Total string `json:"total"` // Total purchase upper limit
	} `json:"list"`
}

// GET /v5/spot-lever-token/order-record
type GetSpotLeverTokenOrderRecordRequest struct {
	LtCoin string `url:"ltCoin,omitempty"` // Abbreviation of the LT, such as BTC3L
	OrderId string `url:"orderId,omitempty"` // Order ID
	StartTime int64 `url:"startTime,omitempty"` // The start timestamp (ms)
	EndTime int64 `url:"endTime,omitempty"` // The end timestamp (ms)
	Limit int64 `url:"limit,omitempty"` // Limit for data size per page. [`1`, `500`]. Default: `100`
	LtOrderType int64 `url:"ltOrderType,omitempty"` // LT order type. `1`: purchase, `2`: redemption
	SerialNo string `url:"serialNo,omitempty"` // Serial number
}

type GetSpotLeverTokenOrderRecordResponse struct {
	List []struct {
		LtCoin string `json:"ltCoin"` // Abbreviation of the LT, such as BTC3L
		OrderId string `json:"orderId"` // Order ID
		LtOrderType int64 `json:"ltOrderType"` // LT order type. `1`: purchase, `2`: redeem
		OrderTime string `json:"orderTime"` // Order time
		UpdateTime string `json:"updateTime"` // Last update time of the order status
		LtOrderStatus string `json:"ltOrderStatus"` // Order status. `1`: completed, `2`: in progress, `3`: failed
		Fee string `json:"fee"` // Trading fees
		Amount string `json:"amount"` // Order quantity of the LT
		Value string `json:"value"` // Filled value
		ValueCoin string `json:"valueCoin"` // Quote coin
		SerialNo string `json:"serialNo"` // Serial number
	} `json:"list"`
}

// GET /v5/spot-lever-token/reference
type GetSpotLeverTokenReferenceRequest struct {
	LtCoin string `url:"ltCoin"` // Abbreviation of the LT, such as BTC3L
}

type GetSpotLeverTokenReferenceResponse struct {
	LtCoin string `json:"ltCoin"` // Abbreviation of the LT, such as BTC3L
	Nav string `json:"nav"` // net value
	NavTime string `json:"navTime"` // Update time for net asset value (in milliseconds and UTC time zone)
	Circulation string `json:"circulation"` // Circulating supply in the secondary market
	Basket string `json:"basket"` // basket
	Leverage string `json:"leverage"` // Real leverage calculated by last traded price
}

// POST /v5/spot-lever-token/purchase
type PostSpotLeverTokenPurchaseRequest struct {
	LtCoin string `json:"ltCoin"` // Abbreviation of the LT, such as BTC3L
	LtAmount string `json:"ltAmount"` // Purchase amount
	SerialNo string `json:"serialNo,omitempty"` // Serial number
}

type PostSpotLeverTokenPurchaseResponse struct {
	LtCoin string `json:"ltCoin"` // Abbreviation of the LT, such as BTC3L
	LtOrderStatus string `json:"ltOrderStatus"` // Order status. `1`: completed, `2`: in progress, `3`: failed
	ExecQty string `json:"execQty"` // Executed qty of LT
	ExecAmt string `json:"execAmt"` // Executed amount of LT
	Amount string `json:"amount"` // Purchase amount
	PurchaseId string `json:"purchaseId"` // Order ID
	SerialNo string `json:"serialNo"` // Serial number, customised order ID
	ValueCoin string `json:"valueCoin"` // Quote coin
}

// POST /v5/spot-lever-token/redeem
type PostSpotLeverTokenRedeemRequest struct {
	LtCoin string `json:"ltCoin"` // Abbreviation of the LT, such as BTC3L
	Quantity string `json:"quantity,omitempty"` // Redeem quantity of LT
	SerialNo string `json:"serialNo,omitempty"` // Serial number
}

type PostSpotLeverTokenRedeemResponse struct {
	LtCoin string `json:"ltCoin"` // Abbreviation of the LT
	LtOrderStatus string `json:"ltOrderStatus"` // Order status. `1`: completed, `2`: in progress, `3`: failed
	Quantity string `json:"quantity"` // Quantity
	ExecQty string `json:"execQty"` // LT quantity
	ExecAmt string `json:"execAmt"` // Executed amount of LT
	RedeemId string `json:"redeemId"` // Order ID
	SerialNo string `json:"serialNo"` // Serial number
	ValueCoin string `json:"valueCoin"` // Quote coin
}

