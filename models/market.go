// Code generated by bybitgen; DO NOT EDIT.
package models

// GET /v5/market/account-ratio
type GetMarketAccountRatioRequest struct {
	Category string `url:"category"` // Product type. `linear`(USDT Contract),`inverse`
	Symbol string `url:"symbol"` // Symbol name, like `BTCUSDT`, uppercase only
	Period string `url:"period"` // Data recording period. `5min`, `15min`, `30min`, `1h`, `4h`, `1d`
	StartTime string `url:"startTime,omitempty"` // The start timestamp (ms)
	EndTime string `url:"endTime,omitempty"` // The end timestamp (ms)
	Limit int64 `url:"limit,omitempty"` // Limit for data size per page. [`1`, `500`]. Default: `50`
	Cursor string `url:"cursor,omitempty"` // Cursor. Use the `nextPageCursor` token from the response to retrieve the next page of the result set
}

type GetMarketAccountRatioResponse struct {
	List []struct {
		Symbol string `json:"symbol"` // Symbol name
		BuyRatio string `json:"buyRatio"` // The ratio of the number of long position
		SellRatio string `json:"sellRatio"` // The ratio of the number of short position
		Timestamp string `json:"timestamp"` // Timestamp (ms)
	} `json:"list"`
	NextPageCursor string `json:"nextPageCursor"` // Refer to the `cursor` request parameter
}

// GET /v5/market/delivery-price
type GetMarketDeliveryPriceRequest struct {
	Category string `url:"category"` // Product type. `linear`, `inverse`, `option`
	Symbol string `url:"symbol,omitempty"` // Symbol name, like `BTCUSDT`, uppercase only
	BaseCoin string `url:"baseCoin,omitempty"` // Base coin, uppercase only. Default: `BTC`. _Valid for `option` only_
	SettleCoin string `url:"settleCoin,omitempty"` // Settle coin, uppercase only. Default: `USDC`.
	Limit int64 `url:"limit,omitempty"` // Limit for data size per page. [`1`, `200`]. Default: `50`
	Cursor string `url:"cursor,omitempty"` // Cursor. Use the `nextPageCursor` token from the response to retrieve the next page of the result set
}

type GetMarketDeliveryPriceResponse struct {
	Category string `json:"category"` // Product type
	List []struct {
		Symbol string `json:"symbol"` // Symbol name
		DeliveryPrice string `json:"deliveryPrice"` // Delivery price
		DeliveryTime string `json:"deliveryTime"` // Delivery timestamp (ms)
	} `json:"list"`
	NextPageCursor string `json:"nextPageCursor"` // Refer to the `cursor` request parameter
}

// GET /v5/market/funding/history
type GetMarketFundingHistoryRequest struct {
	Category string `url:"category"` // Product type. `linear`,`inverse`
	Symbol string `url:"symbol"` // Symbol name, like `BTCUSDT`, uppercase only
	StartTime int64 `url:"startTime,omitempty"` // The start timestamp (ms)
	EndTime int64 `url:"endTime,omitempty"` // The end timestamp (ms)
	Limit int64 `url:"limit,omitempty"` // Limit for data size per page. [`1`, `200`]. Default: `200`
}

type GetMarketFundingHistoryResponse struct {
	Category string `json:"category"` // Product type
	List []struct {
		Symbol string `json:"symbol"` // Symbol name
		FundingRate string `json:"fundingRate"` // Funding rate
		FundingRateTimestamp string `json:"fundingRateTimestamp"` // Funding rate timestamp (ms)
	} `json:"list"`
}

// GET /v5/market/historical-volatility
type GetMarketHistoricalVolatilityRequest struct {
	Category string `url:"category"` // Product type. `option`
	BaseCoin string `url:"baseCoin,omitempty"` // Base coin, uppercase only. Default: return BTC data
	QuoteCoin string `url:"quoteCoin,omitempty"` // Quote coin, `USD` or `USDT`. Default: return quoteCoin=USD
	Period int64 `url:"period,omitempty"` // Period. If not specified, it will return data with a 7-day average by default
	StartTime int64 `url:"startTime,omitempty"` // The start timestamp (ms)
	EndTime int64 `url:"endTime,omitempty"` // The end timestamp (ms)
}

type GetMarketHistoricalVolatilityResponse struct {
	Category string `json:"category"` // Product type
	List []struct {
		Period int64 `json:"period"` // Period
		Value string `json:"value"` // Volatility
		Time string `json:"time"` // Timestamp (ms)
	} `json:"list"`
}

// GET /v5/market/index-price-kline
type GetMarketIndexPriceKlineRequest struct {
	Category string `url:"category,omitempty"` // Product type. `linear`,`inverse` When `category` is not passed, use `linear` by default
	Symbol string `url:"symbol"` // Symbol name, like `BTCUSDT`, uppercase only
	Interval string `url:"interval"` // Kline interval. `1`,`3`,`5`,`15`,`30`,`60`,`120`,`240`,`360`,`720`,`D`,`W`,`M`
	Start int64 `url:"start,omitempty"` // The start timestamp (ms)
	End int64 `url:"end,omitempty"` // The end timestamp (ms)
	Limit int64 `url:"limit,omitempty"` // Limit for data size per page. [`1`, `1000`]. Default: `200`
}

type GetMarketIndexPriceKlineResponse struct {
	Category string `json:"category"` // Product type
	Symbol string `json:"symbol"` // Symbol name
	List [][]string `json:"list"`
}

// GET /v5/market/instruments-info
type GetMarketInstrumentsInfoRequest struct {
	Category string `url:"category"` // Product type. `spot`,`linear`,`inverse`,`option`
	Symbol string `url:"symbol,omitempty"` // Symbol name, like `BTCUSDT`, uppercase only
	Status string `url:"status,omitempty"` // Symbol status filter By default returns only `Trading` symbols Spot has `Trading` only `linear` & `inverse`: when status=PreLaunch, it returns <a href="https://www.bybit.com/help-center/article/Introduction-to-Pre-Market-Perpetual">Pre-Market contracts</a>
	BaseCoin string `url:"baseCoin,omitempty"` // Base coin, uppercase only Applies to `linear`,`inverse`,`option` **only** `option`: returns BTC by default
	Limit int64 `url:"limit,omitempty"` // Limit for data size per page. [`1`, `1000`]. Default: `500`
	Cursor string `url:"cursor,omitempty"` // Cursor. Use the `nextPageCursor` token from the response to retrieve the next page of the result set
}

type GetMarketInstrumentsInfoResponse struct {
	// TODO: fill in response fields parsed from docs
}

// GET /v5/market/insurance
type GetMarketInsuranceRequest struct {
	Coin string `url:"coin,omitempty"` // coin, uppercase only. Default: return all insurance coins
}

type GetMarketInsuranceResponse struct {
	UpdatedTime string `json:"updatedTime"` // Data updated time (ms)
	List []struct {
		Coin string `json:"coin"` // Coin
		Symbols string `json:"symbols"` // symbols with <code>"BTCUSDT,ETHUSDT,SOLUSDT"</code> mean these contracts are shared with one insurance pool For an isolated insurance pool, it returns one contract
		Balance string `json:"balance"` // Balance
		Value string `json:"value"` // USD value
	} `json:"list"`
}

// GET /v5/market/kline
type GetMarketKlineRequest struct {
	Category string `url:"category,omitempty"` // Product type. `spot`,`linear`,`inverse` When `category` is not passed, use `linear` by default
	Symbol string `url:"symbol"` // Symbol name, like `BTCUSDT`, uppercase only
	Interval string `url:"interval"` // Kline interval. `1`,`3`,`5`,`15`,`30`,`60`,`120`,`240`,`360`,`720`,`D`,`W`,`M`
	Start int64 `url:"start,omitempty"` // The start timestamp (ms)
	End int64 `url:"end,omitempty"` // The end timestamp (ms)
	Limit int64 `url:"limit,omitempty"` // Limit for data size per page. [`1`, `1000`]. Default: `200`
}

type GetMarketKlineResponse struct {
	Category string `json:"category"` // Product type
	Symbol string `json:"symbol"` // Symbol name
	List [][]string `json:"list"`
}

// GET /v5/market/mark-price-kline
type GetMarketMarkPriceKlineRequest struct {
	Category string `url:"category,omitempty"` // Product type. `linear`,`inverse` When `category` is not passed, use `linear` by default
	Symbol string `url:"symbol"` // Symbol name, like `BTCUSDT`, uppercase only
	Interval string `url:"interval"` // Kline interval. `1`,`3`,`5`,`15`,`30`,`60`,`120`,`240`,`360`,`720`,`D`,`M`,`W`
	Start int64 `url:"start,omitempty"` // The start timestamp (ms)
	End int64 `url:"end,omitempty"` // The end timestamp (ms)
	Limit int64 `url:"limit,omitempty"` // Limit for data size per page. [`1`, `1000`]. Default: `200`
}

type GetMarketMarkPriceKlineResponse struct {
	Category string `json:"category"` // Product type
	Symbol string `json:"symbol"` // Symbol name
	List [][]string `json:"list"`
}

// GET /v5/market/open-interest
type GetMarketOpenInterestRequest struct {
	Category string `url:"category"` // Product type. `linear`,`inverse`
	Symbol string `url:"symbol"` // Symbol name, like `BTCUSDT`, uppercase only
	IntervalTime string `url:"intervalTime"` // Interval time. `5min`,`15min`,`30min`,`1h`,`4h`,`1d`
	StartTime int64 `url:"startTime,omitempty"` // The start timestamp (ms)
	EndTime int64 `url:"endTime,omitempty"` // The end timestamp (ms)
	Limit int64 `url:"limit,omitempty"` // Limit for data size per page. [`1`, `200`]. Default: `50`
	Cursor string `url:"cursor,omitempty"` // Cursor. Used to paginate
}

type GetMarketOpenInterestResponse struct {
	Category string `json:"category"` // Product type
	Symbol string `json:"symbol"` // Symbol name
	List []struct {
		OpenInterest string `json:"openInterest"` // Open interest. The value is the sum of both sides. The unit of value, e.g., BTCUSD(inverse) is USD, BTCUSDT(linear) is BTC
		Timestamp string `json:"timestamp"` // The timestamp (ms)
	} `json:"list"`
	NextPageCursor string `json:"nextPageCursor"` // Used to paginate
}

// GET /v5/market/orderbook
type GetMarketOrderbookRequest struct {
	Category string `url:"category"` // Product type. `spot`, `linear`, `inverse`, `option`
	Symbol string `url:"symbol"` // Symbol name, like `BTCUSDT`, uppercase only
	Limit int64 `url:"limit,omitempty"` // Limit size for each bid and ask `spot`: [`1`, `200`]. Default: `1`. `linear`&`inverse`: [`1`, `500`]. Default: `25`. `option`: [`1`, `25`]. Default: `1`.
}

type GetMarketOrderbookResponse struct {
	S string `json:"s"` // Symbol name
	B []struct {
		B0 string `json:"b[0]"` // Bid price
		B1 string `json:"b[1]"` // Bid size
	} `json:"b"`
	A []struct {
		A0 string `json:"a[0]"` // Ask price
		A1 string `json:"a[1]"` // Ask size
	} `json:"a"`
	Ts int64 `json:"ts"` // The timestamp (ms) that the system generates the data
	U int64 `json:"u"` // Update ID, is always in sequence For contract, corresponds to `u` in the 500-level [WebSocket orderbook stream](https://bybit-exchange.github.io/docs/v5/websocket/public/orderbook) For spot, corresponds to `u` in the 200-level [WebSocket orderbook stream](https://bybit-exchange.github.io/docs/v5/websocket/public/orderbook)
	Seq int64 `json:"seq"` // Cross sequence You can use this field to compare different levels orderbook data, and for the smaller seq, then it means the data is generated earlier.
	Cts int64 `json:"cts"` // The timestamp from the matching engine when this orderbook data is produced. It can be correlated with `T` from [public trade channel](../websocket/public/trade#)
}

// GET /v5/market/premium-index-price-kline
type GetMarketPremiumIndexPriceKlineRequest struct {
	Category string `url:"category,omitempty"` // Product type. `linear`
	Symbol string `url:"symbol"` // Symbol name, like `BTCUSDT`, uppercase only
	Interval string `url:"interval"` // Kline interval. `1`,`3`,`5`,`15`,`30`,`60`,`120`,`240`,`360`,`720`,`D`,`W`,`M`
	Start int64 `url:"start,omitempty"` // The start timestamp (ms)
	End int64 `url:"end,omitempty"` // The end timestamp (ms)
	Limit int64 `url:"limit,omitempty"` // Limit for data size per page. [`1`, `1000`]. Default: `200`
}

type GetMarketPremiumIndexPriceKlineResponse struct {
	Category string `json:"category"` // Product type
	Symbol string `json:"symbol"` // Symbol name
	List [][]string `json:"list"`
}

// GET /v5/market/price-limit
type GetMarketPriceLimitRequest struct {
	Category string `url:"category,omitempty"` // Product type. `spot`,`linear`,`inverse` When `category` is not passed, use `linear` by default
	Symbol string `url:"symbol"` // Symbol name, like `BTCUSDT`, uppercase only
}

type GetMarketPriceLimitResponse struct {
	Symbol string `json:"symbol"` // Symbol name
	BuyLmt string `json:"buyLmt"` // Highest Bid Price
	SellLmt string `json:"sellLmt"` // Lowest Ask Price
	Ts string `json:"ts"` // timestamp in milliseconds
}

// GET /v5/market/recent-trade
type GetMarketRecentTradeRequest struct {
	Category string `url:"category"` // Product type. `spot`,`linear`,`inverse`,`option`
	Symbol string `url:"symbol,omitempty"` // Symbol name, like `BTCUSDT`, uppercase only **required** for spot/linear/inverse optional for option
	BaseCoin string `url:"baseCoin,omitempty"` // Base coin, uppercase only Apply to `option` **only** If the field is not passed, return **BTC** data by default
	OptionType string `url:"optionType,omitempty"` // Option type. `Call` or `Put`. Apply to `option` **only**
	Limit int64 `url:"limit,omitempty"` // Limit for data size per page `spot`: [1,60], default: `60` others: [1,1000], default: `500`
}

type GetMarketRecentTradeResponse struct {
	Category string `json:"category"` // Products category
	List []struct {
		ExecId string `json:"execId"` // Execution ID
		Symbol string `json:"symbol"` // Symbol name
		Price string `json:"price"` // Trade price
		Size string `json:"size"` // Trade size
		Side string `json:"side"` // Side of taker `Buy`, `Sell`
		Time string `json:"time"` // Trade time (ms)
		IsBlockTrade bool `json:"isBlockTrade"` // Whether the trade is block trade
		IsRPITrade bool `json:"isRPITrade"` // Whether the trade is RPI trade
		MP string `json:"mP"` // Mark price, unique field for `option`
		IP string `json:"iP"` // Index price, unique field for `option`
		MIv string `json:"mIv"` // Mark iv, unique field for `option`
		Iv string `json:"iv"` // iv, unique field for `option`
		Seq string `json:"seq"` // cross sequence
	} `json:"list"`
}

// GET /v5/market/risk-limit
type GetMarketRiskLimitRequest struct {
	Category string `url:"category"` // Product type. `linear`,`inverse`
	Symbol string `url:"symbol,omitempty"` // Symbol name, like `BTCUSDT`, uppercase only
	Cursor string `url:"cursor,omitempty"` // Cursor. Use the `nextPageCursor` token from the response to retrieve the next page of the data set
}

type GetMarketRiskLimitResponse struct {
	Category string `json:"category"` // Product type
	List []struct {
		Id int64 `json:"id"` // Risk ID
		Symbol string `json:"symbol"` // Symbol name
		RiskLimitValue string `json:"riskLimitValue"` // Position limit
		MaintenanceMargin string `json:"maintenanceMargin"` // Maintain margin rate
		InitialMargin string `json:"initialMargin"` // Initial margin rate
		IsLowestRisk int64 `json:"isLowestRisk"` // `1`: true, `0`: false
		MaxLeverage string `json:"maxLeverage"` // Allowed max leverage
		MmDeduction string `json:"mmDeduction"` // The maintenance margin deduction value when risk limit tier changed
	} `json:"list"`
	NextPageCursor string `json:"nextPageCursor"` // Refer to the `cursor` request parameter
}

// GET /v5/market/tickers
type GetMarketTickersRequest struct {
	Category string `url:"category"` // Product type. `spot`,`linear`,`inverse`,`option`
	Symbol string `url:"symbol,omitempty"` // Symbol name, like `BTCUSDT`, uppercase only
	BaseCoin string `url:"baseCoin,omitempty"` // Base coin, uppercase only. Apply to `option` **only**
	ExpDate string `url:"expDate,omitempty"` // Expiry date. e.g., 25DEC22. Apply to `option` **only**
}

type GetMarketTickersResponse struct {
	// TODO: fill in response fields parsed from docs
}

// GET /v5/market/time
type GetMarketTimeRequest struct {
}

type GetMarketTimeResponse struct {
	TimeSecond string `json:"timeSecond"` // Bybit server timestamp (sec)
	TimeNano string `json:"timeNano"` // Bybit server timestamp (nano)
}

