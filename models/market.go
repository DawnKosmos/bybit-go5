// Code generated by bybitgen; DO NOT EDIT.
package models

// GET /v5/market/account-ratio
type GetMarketAccountRatioRequest struct {
	Category string `url:"category"` // Product type. `linear`(USDT Contract),`inverse`
	Symbol string `url:"symbol"` // Symbol name, like `BTCUSDT`, uppercase only
	Period string `url:"period"` // Data recording period. `5min`, `15min`, `30min`, `1h`, `4h`, `1d`
	StartTime string `url:"startTime,omitempty"` // The start timestamp (ms)
	EndTime string `url:"endTime,omitempty"` // The end timestamp (ms)
	Limit int64 `url:"limit,omitempty"` // Limit for data size per page. [`1`, `500`]. Default: `50`
	Cursor string `url:"cursor,omitempty"` // Cursor. Use the `nextPageCursor` token from the response to retrieve the next page of the result set
}

type GetMarketAccountRatioResponse struct {
	// TODO: fill in response fields parsed from docs
}

// GET /v5/market/delivery-price
type GetMarketDeliveryPriceRequest struct {
	Category string `url:"category"` // Product type. `linear`, `inverse`, `option`
	Symbol string `url:"symbol,omitempty"` // Symbol name, like `BTCUSDT`, uppercase only
	BaseCoin string `url:"baseCoin,omitempty"` // Base coin, uppercase only. Default: `BTC`. _Valid for `option` only_
	SettleCoin string `url:"settleCoin,omitempty"` // Settle coin, uppercase only. Default: `USDC`.
	Limit int64 `url:"limit,omitempty"` // Limit for data size per page. [`1`, `200`]. Default: `50`
	Cursor string `url:"cursor,omitempty"` // Cursor. Use the `nextPageCursor` token from the response to retrieve the next page of the result set
}

type GetMarketDeliveryPriceResponse struct {
	// TODO: fill in response fields parsed from docs
}

// GET /v5/market/funding/history
type GetMarketFundingHistoryRequest struct {
	Category string `url:"category"` // Product type. `linear`,`inverse`
	Symbol string `url:"symbol"` // Symbol name, like `BTCUSDT`, uppercase only
	StartTime int64 `url:"startTime,omitempty"` // The start timestamp (ms)
	EndTime int64 `url:"endTime,omitempty"` // The end timestamp (ms)
	Limit int64 `url:"limit,omitempty"` // Limit for data size per page. [`1`, `200`]. Default: `200`
}

type GetMarketFundingHistoryResponse struct {
	// TODO: fill in response fields parsed from docs
}

// GET /v5/market/historical-volatility
type GetMarketHistoricalVolatilityRequest struct {
	Category string `url:"category"` // Product type. `option`
	BaseCoin string `url:"baseCoin,omitempty"` // Base coin, uppercase only. Default: return BTC data
	QuoteCoin string `url:"quoteCoin,omitempty"` // Quote coin, `USD` or `USDT`. Default: return quoteCoin=USD
	Period int64 `url:"period,omitempty"` // Period. If not specified, it will return data with a 7-day average by default
	StartTime int64 `url:"startTime,omitempty"` // The start timestamp (ms)
	EndTime int64 `url:"endTime,omitempty"` // The end timestamp (ms)
}

type GetMarketHistoricalVolatilityResponse struct {
	// TODO: fill in response fields parsed from docs
}

// GET /v5/market/index-price-kline
type GetMarketIndexPriceKlineRequest struct {
	Category string `url:"category,omitempty"` // Product type. `linear`,`inverse` When `category` is not passed, use `linear` by default
	Symbol string `url:"symbol"` // Symbol name, like `BTCUSDT`, uppercase only
	Interval string `url:"interval"` // Kline interval. `1`,`3`,`5`,`15`,`30`,`60`,`120`,`240`,`360`,`720`,`D`,`W`,`M`
	Start int64 `url:"start,omitempty"` // The start timestamp (ms)
	End int64 `url:"end,omitempty"` // The end timestamp (ms)
	Limit int64 `url:"limit,omitempty"` // Limit for data size per page. [`1`, `1000`]. Default: `200`
}

type GetMarketIndexPriceKlineResponse struct {
	// TODO: fill in response fields parsed from docs
}

// GET /v5/market/instruments-info
type GetMarketInstrumentsInfoRequest struct {
	Category string `url:"category"` // Product type. `spot`,`linear`,`inverse`,`option`
	Symbol string `url:"symbol,omitempty"` // Symbol name, like `BTCUSDT`, uppercase only
	Status string `url:"status,omitempty"` // Symbol status filter By default returns only `Trading` symbols Spot has `Trading` only `linear` & `inverse`: when status=PreLaunch, it returns <a href="https://www.bybit.com/help-center/article/Introduction-to-Pre-Market-Perpetual">Pre-Market contracts</a>
	BaseCoin string `url:"baseCoin,omitempty"` // Base coin, uppercase only Applies to `linear`,`inverse`,`option` **only** `option`: returns BTC by default
	Limit int64 `url:"limit,omitempty"` // Limit for data size per page. [`1`, `1000`]. Default: `500`
	Cursor string `url:"cursor,omitempty"` // Cursor. Use the `nextPageCursor` token from the response to retrieve the next page of the result set
}

type GetMarketInstrumentsInfoResponse struct {
	// TODO: fill in response fields parsed from docs
}

// GET /v5/market/insurance
type GetMarketInsuranceRequest struct {
	Coin string `url:"coin,omitempty"` // coin, uppercase only. Default: return all insurance coins
}

type GetMarketInsuranceResponse struct {
	// TODO: fill in response fields parsed from docs
}

// GET /v5/market/kline
type GetMarketKlineRequest struct {
	Category string `url:"category,omitempty"` // Product type. `spot`,`linear`,`inverse` When `category` is not passed, use `linear` by default
	Symbol string `url:"symbol"` // Symbol name, like `BTCUSDT`, uppercase only
	Interval string `url:"interval"` // Kline interval. `1`,`3`,`5`,`15`,`30`,`60`,`120`,`240`,`360`,`720`,`D`,`W`,`M`
	Start int64 `url:"start,omitempty"` // The start timestamp (ms)
	End int64 `url:"end,omitempty"` // The end timestamp (ms)
	Limit int64 `url:"limit,omitempty"` // Limit for data size per page. [`1`, `1000`]. Default: `200`
}

type GetMarketKlineResponse struct {
	// TODO: fill in response fields parsed from docs
}

// GET /v5/market/mark-price-kline
type GetMarketMarkPriceKlineRequest struct {
	Category string `url:"category,omitempty"` // Product type. `linear`,`inverse` When `category` is not passed, use `linear` by default
	Symbol string `url:"symbol"` // Symbol name, like `BTCUSDT`, uppercase only
	Interval string `url:"interval"` // Kline interval. `1`,`3`,`5`,`15`,`30`,`60`,`120`,`240`,`360`,`720`,`D`,`M`,`W`
	Start int64 `url:"start,omitempty"` // The start timestamp (ms)
	End int64 `url:"end,omitempty"` // The end timestamp (ms)
	Limit int64 `url:"limit,omitempty"` // Limit for data size per page. [`1`, `1000`]. Default: `200`
}

type GetMarketMarkPriceKlineResponse struct {
	// TODO: fill in response fields parsed from docs
}

// GET /v5/market/open-interest
type GetMarketOpenInterestRequest struct {
	Category string `url:"category"` // Product type. `linear`,`inverse`
	Symbol string `url:"symbol"` // Symbol name, like `BTCUSDT`, uppercase only
	IntervalTime string `url:"intervalTime"` // Interval time. `5min`,`15min`,`30min`,`1h`,`4h`,`1d`
	StartTime int64 `url:"startTime,omitempty"` // The start timestamp (ms)
	EndTime int64 `url:"endTime,omitempty"` // The end timestamp (ms)
	Limit int64 `url:"limit,omitempty"` // Limit for data size per page. [`1`, `200`]. Default: `50`
	Cursor string `url:"cursor,omitempty"` // Cursor. Used to paginate
}

type GetMarketOpenInterestResponse struct {
	// TODO: fill in response fields parsed from docs
}

// GET /v5/market/orderbook
type GetMarketOrderbookRequest struct {
	Category string `url:"category"` // Product type. `spot`, `linear`, `inverse`, `option`
	Symbol string `url:"symbol"` // Symbol name, like `BTCUSDT`, uppercase only
	Limit int64 `url:"limit,omitempty"` // Limit size for each bid and ask `spot`: [`1`, `200`]. Default: `1`. `linear`&`inverse`: [`1`, `500`]. Default: `25`. `option`: [`1`, `25`]. Default: `1`.
}

type GetMarketOrderbookResponse struct {
	// TODO: fill in response fields parsed from docs
}

// GET /v5/market/premium-index-price-kline
type GetMarketPremiumIndexPriceKlineRequest struct {
	Category string `url:"category,omitempty"` // Product type. `linear`
	Symbol string `url:"symbol"` // Symbol name, like `BTCUSDT`, uppercase only
	Interval string `url:"interval"` // Kline interval. `1`,`3`,`5`,`15`,`30`,`60`,`120`,`240`,`360`,`720`,`D`,`W`,`M`
	Start int64 `url:"start,omitempty"` // The start timestamp (ms)
	End int64 `url:"end,omitempty"` // The end timestamp (ms)
	Limit int64 `url:"limit,omitempty"` // Limit for data size per page. [`1`, `1000`]. Default: `200`
}

type GetMarketPremiumIndexPriceKlineResponse struct {
	// TODO: fill in response fields parsed from docs
}

// GET /v5/market/price-limit
type GetMarketPriceLimitRequest struct {
	Category string `url:"category,omitempty"` // Product type. `spot`,`linear`,`inverse` When `category` is not passed, use `linear` by default
	Symbol string `url:"symbol"` // Symbol name, like `BTCUSDT`, uppercase only
}

type GetMarketPriceLimitResponse struct {
	// TODO: fill in response fields parsed from docs
}

// GET /v5/market/recent-trade
type GetMarketRecentTradeRequest struct {
	Category string `url:"category"` // Product type. `spot`,`linear`,`inverse`,`option`
	Symbol string `url:"symbol,omitempty"` // Symbol name, like `BTCUSDT`, uppercase only **required** for spot/linear/inverse optional for option
	BaseCoin string `url:"baseCoin,omitempty"` // Base coin, uppercase only Apply to `option` **only** If the field is not passed, return **BTC** data by default
	OptionType string `url:"optionType,omitempty"` // Option type. `Call` or `Put`. Apply to `option` **only**
	Limit int64 `url:"limit,omitempty"` // Limit for data size per page `spot`: [1,60], default: `60` others: [1,1000], default: `500`
}

type GetMarketRecentTradeResponse struct {
	// TODO: fill in response fields parsed from docs
}

// GET /v5/market/risk-limit
type GetMarketRiskLimitRequest struct {
	Category string `url:"category"` // Product type. `linear`,`inverse`
	Symbol string `url:"symbol,omitempty"` // Symbol name, like `BTCUSDT`, uppercase only
	Cursor string `url:"cursor,omitempty"` // Cursor. Use the `nextPageCursor` token from the response to retrieve the next page of the data set
}

type GetMarketRiskLimitResponse struct {
	// TODO: fill in response fields parsed from docs
}

// GET /v5/market/tickers
type GetMarketTickersRequest struct {
	Category string `url:"category"` // Product type. `spot`,`linear`,`inverse`,`option`
	Symbol string `url:"symbol,omitempty"` // Symbol name, like `BTCUSDT`, uppercase only
	BaseCoin string `url:"baseCoin,omitempty"` // Base coin, uppercase only. Apply to `option` **only**
	ExpDate string `url:"expDate,omitempty"` // Expiry date. e.g., 25DEC22. Apply to `option` **only**
}

type GetMarketTickersResponse struct {
	// TODO: fill in response fields parsed from docs
}

// GET /v5/market/time
type GetMarketTimeRequest struct {
}

type GetMarketTimeResponse struct {
	// TODO: fill in response fields parsed from docs
}

