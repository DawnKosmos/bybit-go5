// Code generated by bybitgen; DO NOT EDIT.
package models

// GET /v5/crypto-loan-common/adjustment-history
type GetCryptoLoanCommonAdjustmentHistoryRequest struct {
	AdjustId string `url:"adjustId,omitempty"` // Collateral adjustment transaction ID
	CollateralCurrency string `url:"collateralCurrency,omitempty"` // Collateral coin name
	Limit string `url:"limit,omitempty"` // Limit for data size per page. [`1`, `100`]. Default: `10`
	Cursor string `url:"cursor,omitempty"` // Cursor. Use the `nextPageCursor` token from the response to retrieve the next page of the result set
}

type GetCryptoLoanCommonAdjustmentHistoryResponse struct {
	// TODO: fill in response fields parsed from docs
}

// GET /v5/crypto-loan-common/collateral-data
type GetCryptoLoanCommonCollateralDataRequest struct {
	Currency string `url:"currency,omitempty"` // Coin name, uppercase only
}

type GetCryptoLoanCommonCollateralDataResponse struct {
	// TODO: fill in response fields parsed from docs
}

// GET /v5/crypto-loan-common/loanable-data
type GetCryptoLoanCommonLoanableDataRequest struct {
	VipLevel string `url:"vipLevel,omitempty"` // Vip level `VIP0`, `VIP1`, `VIP2`, `VIP3`, `VIP4`, `VIP5`, `VIP99`(supreme VIP) `PRO1`, `PRO2`, `PRO3`, `PRO4`, `PRO5`, `PRO6`
	Currency string `url:"currency,omitempty"` // Coin name, uppercase only
}

type GetCryptoLoanCommonLoanableDataResponse struct {
	// TODO: fill in response fields parsed from docs
}

// GET /v5/crypto-loan-common/max-collateral-amount
type GetCryptoLoanCommonMaxCollateralAmountRequest struct {
	Currency string `url:"currency"` // Collateral coin
}

type GetCryptoLoanCommonMaxCollateralAmountResponse struct {
	// TODO: fill in response fields parsed from docs
}

// GET /v5/crypto-loan-common/position
type GetCryptoLoanCommonPositionRequest struct {
}

type GetCryptoLoanCommonPositionResponse struct {
	// TODO: fill in response fields parsed from docs
}

// GET /v5/crypto-loan-fixed/borrow-contract-info
type GetCryptoLoanFixedBorrowContractInfoRequest struct {
	OrderId string `url:"orderId,omitempty"` // Loan order ID
	LoanId string `url:"loanId,omitempty"` // Loan ID
	OrderCurrency string `url:"orderCurrency,omitempty"` // Loan coin name
	Term string `url:"term,omitempty"` // Fixed term `7`: 7 days; `14`: 14 days; `30`: 30 days; `90`: 90 days; `180`: 180 days
	Limit string `url:"limit,omitempty"` // Limit for data size per page. [`1`, `100`]. Default: `10`
	Cursor string `url:"cursor,omitempty"` // Cursor. Use the `nextPageCursor` token from the response to retrieve the next page of the result set
}

type GetCryptoLoanFixedBorrowContractInfoResponse struct {
	// TODO: fill in response fields parsed from docs
}

// GET /v5/crypto-loan-fixed/borrow-order-info
type GetCryptoLoanFixedBorrowOrderInfoRequest struct {
	OrderId string `url:"orderId,omitempty"` // Loan order ID
	OrderCurrency string `url:"orderCurrency,omitempty"` // Loan coin name
	State string `url:"state,omitempty"` // Borrow order status, `1`: matching; `2`: partially filled and cancelled; `3`: Fully filled; `4`: Cancelled
	Term string `url:"term,omitempty"` // Fixed term `7`: 7 days; `14`: 14 days; `30`: 30 days; `90`: 90 days; `180`: 180 days
	Limit string `url:"limit,omitempty"` // Limit for data size per page. [`1`, `100`]. Default: `10`
	Cursor string `url:"cursor,omitempty"` // Cursor. Use the `nextPageCursor` token from the response to retrieve the next page of the result set
}

type GetCryptoLoanFixedBorrowOrderInfoResponse struct {
	// TODO: fill in response fields parsed from docs
}

// GET /v5/crypto-loan-fixed/borrow-order-quote
type GetCryptoLoanFixedBorrowOrderQuoteRequest struct {
	OrderCurrency string `url:"orderCurrency"` // Coin name
	Term string `url:"term,omitempty"` // Fixed term `7`: 7 days; `14`: 14 days; `30`: 30 days; `90`: 90 days; `180`: 180 days
	OrderBy string `url:"orderBy"` // Order by, `apy`: annual rate; `term`; `quantity`
	Sort int64 `url:"sort,omitempty"` // `0`: ascend, default; `1`: descend
	Limit int64 `url:"limit,omitempty"` // Limit for data size per page. [`1`, `100`]. Default: `10`
}

type GetCryptoLoanFixedBorrowOrderQuoteResponse struct {
	// TODO: fill in response fields parsed from docs
}

// GET /v5/crypto-loan-fixed/repayment-history
type GetCryptoLoanFixedRepaymentHistoryRequest struct {
	RepayId string `url:"repayId,omitempty"` // Repayment order ID
	LoanCurrency string `url:"loanCurrency,omitempty"` // Loan coin name
	Limit string `url:"limit,omitempty"` // Limit for data size per page. [`1`, `100`]. Default: `10`
	Cursor string `url:"cursor,omitempty"` // Cursor. Use the `nextPageCursor` token from the response to retrieve the next page of the result set
}

type GetCryptoLoanFixedRepaymentHistoryResponse struct {
	// TODO: fill in response fields parsed from docs
}

// GET /v5/crypto-loan-fixed/supply-contract-info
type GetCryptoLoanFixedSupplyContractInfoRequest struct {
	OrderId string `url:"orderId,omitempty"` // Supply order ID
	SupplyId string `url:"supplyId,omitempty"` // Supply contract ID
	SupplyCurrency string `url:"supplyCurrency,omitempty"` // Supply coin name
	Term string `url:"term,omitempty"` // Fixed term `7`: 7 days; `14`: 14 days; `30`: 30 days; `90`: 90 days; `180`: 180 days
	Limit string `url:"limit,omitempty"` // Limit for data size per page. [`1`, `100`]. Default: `10`
	Cursor string `url:"cursor,omitempty"` // Cursor. Use the `nextPageCursor` token from the response to retrieve the next page of the result set
}

type GetCryptoLoanFixedSupplyContractInfoResponse struct {
	// TODO: fill in response fields parsed from docs
}

// GET /v5/crypto-loan-fixed/supply-order-info
type GetCryptoLoanFixedSupplyOrderInfoRequest struct {
	OrderId string `url:"orderId,omitempty"` // Supply order ID
	OrderCurrency string `url:"orderCurrency,omitempty"` // Supply coin name
	State string `url:"state,omitempty"` // Supply order status, `1`: matching; `2`: partially filled and cancelled; `3`: Fully filled; `4`: Cancelled
	Term string `url:"term,omitempty"` // Fixed term `7`: 7 days; `14`: 14 days; `30`: 30 days; `90`: 90 days; `180`: 180 days
	Limit string `url:"limit,omitempty"` // Limit for data size per page. [`1`, `100`]. Default: `10`
	Cursor string `url:"cursor,omitempty"` // Cursor. Use the `nextPageCursor` token from the response to retrieve the next page of the result set
}

type GetCryptoLoanFixedSupplyOrderInfoResponse struct {
	// TODO: fill in response fields parsed from docs
}

// GET /v5/crypto-loan-fixed/supply-order-quote
type GetCryptoLoanFixedSupplyOrderQuoteRequest struct {
	OrderCurrency string `url:"orderCurrency"` // Coin name
	Term string `url:"term,omitempty"` // Fixed term `7`: 7 days; `14`: 14 days; `30`: 30 days; `90`: 90 days; `180`: 180 days
	OrderBy string `url:"orderBy"` // Order by, `apy`: annual rate; `term`; `quantity`
	Sort int64 `url:"sort,omitempty"` // `0`: ascend, default; `1`: descend
	Limit int64 `url:"limit,omitempty"` // Limit for data size per page. [`1`, `100`]. Default: `10`
}

type GetCryptoLoanFixedSupplyOrderQuoteResponse struct {
	// TODO: fill in response fields parsed from docs
}

// GET /v5/crypto-loan-flexible/borrow-history
type GetCryptoLoanFlexibleBorrowHistoryRequest struct {
	OrderId string `url:"orderId,omitempty"` // Loan order ID
	LoanCurrency string `url:"loanCurrency,omitempty"` // Loan coin name
	Limit string `url:"limit,omitempty"` // Limit for data size per page. [`1`, `100`]. Default: `10`
	Cursor string `url:"cursor,omitempty"` // Cursor. Use the `nextPageCursor` token from the response to retrieve the next page of the result set
}

type GetCryptoLoanFlexibleBorrowHistoryResponse struct {
	// TODO: fill in response fields parsed from docs
}

// GET /v5/crypto-loan-flexible/ongoing-coin
type GetCryptoLoanFlexibleOngoingCoinRequest struct {
	LoanCurrency string `url:"loanCurrency,omitempty"` // Loan coin name
}

type GetCryptoLoanFlexibleOngoingCoinResponse struct {
	// TODO: fill in response fields parsed from docs
}

// GET /v5/crypto-loan-flexible/repayment-history
type GetCryptoLoanFlexibleRepaymentHistoryRequest struct {
	RepayId string `url:"repayId,omitempty"` // Repayment tranaction ID
	LoanCurrency string `url:"loanCurrency,omitempty"` // Loan coin name
	Limit string `url:"limit,omitempty"` // Limit for data size per page. [`1`, `100`]. Default: `10`
	Cursor string `url:"cursor,omitempty"` // Cursor. Use the `nextPageCursor` token from the response to retrieve the next page of the result set
}

type GetCryptoLoanFlexibleRepaymentHistoryResponse struct {
	// TODO: fill in response fields parsed from docs
}

// POST /v5/crypto-loan-common/adjust-ltv
type PostCryptoLoanCommonAdjustLtvRequest struct {
	Currency string `json:"currency"` // Collateral coin
	Amount string `json:"amount"` // Adjustment amount
	Direction string `json:"direction"` // `0`: add collateral; `1`: reduce collateral
}

type PostCryptoLoanCommonAdjustLtvResponse struct {
	// TODO: fill in response fields parsed from docs
}

// POST /v5/crypto-loan-fixed/borrow
type PostCryptoLoanFixedBorrowRequest struct {
	OrderCurrency string `json:"orderCurrency"` // Currency to borrow
	OrderAmount string `json:"orderAmount"` // Amount to borrow
	AnnualRate string `json:"annualRate"` // Customizable annual interest rate, e.g., `0.02` means 2%
	Term string `json:"term"` // Fixed term `7`: 7 days; `14`: 14 days; `30`: 30 days; `90`: 90 days; `180`: 180 days
	AutoRepay string `json:"autoRepay,omitempty"` // Enable Auto-Repay to have assets in your Funding Account automatically repay your loan upon Borrowing order expiration, preventing overdue penalties. Ensure your Funding Account maintains sufficient amount for repayment to avoid automatic repayment failures. `"true"`: enable, default; `"false"`: disable
	CollateralList string `json:"collateralList,omitempty"` // Collateral coin list, supports putting up to 100 currency in the array
}

type PostCryptoLoanFixedBorrowResponse struct {
	// TODO: fill in response fields parsed from docs
}

// POST /v5/crypto-loan-fixed/borrow-order-cancel
type PostCryptoLoanFixedBorrowOrderCancelRequest struct {
	OrderId string `json:"orderId"` // Order ID of fixed borrow order
}

type PostCryptoLoanFixedBorrowOrderCancelResponse struct {
	// TODO: fill in response fields parsed from docs
}

// POST /v5/crypto-loan-fixed/fully-repay
type PostCryptoLoanFixedFullyRepayRequest struct {
	LoanId string `json:"loanId,omitempty"` // Loan contract ID. Either `loanId` or `loanCurrency` needs to be passed
	LoanCurrency string `json:"loanCurrency,omitempty"` // Loan coin. Either `loanId` or `loanCurrency` needs to be passed
}

type PostCryptoLoanFixedFullyRepayResponse struct {
	// TODO: fill in response fields parsed from docs
}

// POST /v5/crypto-loan-fixed/supply
type PostCryptoLoanFixedSupplyRequest struct {
	OrderCurrency string `json:"orderCurrency"` // Currency to supply
	OrderAmount string `json:"orderAmount"` // Amount to supply
	AnnualRate string `json:"annualRate"` // Customizable annual interest rate, e.g., `0.02` means 2%
	Term string `json:"term"` // Fixed term `7`: 7 days; `14`: 14 days; `30`: 30 days; `90`: 90 days; `180`: 180 days
}

type PostCryptoLoanFixedSupplyResponse struct {
	// TODO: fill in response fields parsed from docs
}

// POST /v5/crypto-loan-fixed/supply-order-cancel
type PostCryptoLoanFixedSupplyOrderCancelRequest struct {
	OrderId string `json:"orderId"` // Order ID of fixed supply order
}

type PostCryptoLoanFixedSupplyOrderCancelResponse struct {
	// TODO: fill in response fields parsed from docs
}

// POST /v5/crypto-loan-flexible/borrow
type PostCryptoLoanFlexibleBorrowRequest struct {
	LoanCurrency string `json:"loanCurrency"` // Loan coin name
	LoanAmount string `json:"loanAmount"` // Amount to borrow
	CollateralList string `json:"collateralList,omitempty"` // Collateral coin list, supports putting up to 100 currency in the array
}

type PostCryptoLoanFlexibleBorrowResponse struct {
	// TODO: fill in response fields parsed from docs
}

// POST /v5/crypto-loan-flexible/repay
type PostCryptoLoanFlexibleRepayRequest struct {
	LoanCurrency string `json:"loanCurrency"` // Loan currency
	Amount string `json:"amount"` // Repay amount
}

type PostCryptoLoanFlexibleRepayResponse struct {
	// TODO: fill in response fields parsed from docs
}

