// Code generated by bybitgen; DO NOT EDIT.
package models

// GET /v5/crypto-loan-common/adjustment-history
type GetCryptoLoanCommonAdjustmentHistoryRequest struct {
	AdjustId string `url:"adjustId,omitempty"` // Collateral adjustment transaction ID
	CollateralCurrency string `url:"collateralCurrency,omitempty"` // Collateral coin name
	Limit string `url:"limit,omitempty"` // Limit for data size per page. [`1`, `100`]. Default: `10`
	Cursor string `url:"cursor,omitempty"` // Cursor. Use the `nextPageCursor` token from the response to retrieve the next page of the result set
}

type GetCryptoLoanCommonAdjustmentHistoryResponse struct {
	List []struct {
		CollateralCurrency string `json:"collateralCurrency"` // Collateral coin
		Amount string `json:"amount"` // amount
		AdjustId int64 `json:"adjustId"` // Collateral adjustment transaction ID
		AdjustTime int64 `json:"adjustTime"` // Adjust timestamp
		PreLTV string `json:"preLTV"` // LTV before the adjustment
		AfterLTV string `json:"afterLTV"` // LTV after the adjustment
		Direction int64 `json:"direction"` // The direction of adjustment, `0`: add collateral; `1`: reduce collateral
		Status int64 `json:"status"` // The status of adjustment, `1`: success; `2`: processing; `3`: fail
	} `json:"list"`
	NextPageCursor string `json:"nextPageCursor"` // Refer to the `cursor` request parameter
}

// GET /v5/crypto-loan-common/collateral-data
type GetCryptoLoanCommonCollateralDataRequest struct {
	Currency string `url:"currency,omitempty"` // Coin name, uppercase only
}

type GetCryptoLoanCommonCollateralDataResponse struct {
	CollateralRatioConfigList []struct {
		CollateralRatioList []struct {
			CollateralRatio string `json:"collateralRatio"` // Collateral ratio
			MaxValue string `json:"maxValue"` // Max qty
			MinValue string `json:"minValue"` // Min qty
		} `json:"collateralRatioList"`
		Currencies string `json:"currencies"` // Currenies with the same collateral ratio, e.g., `BTC,ETH,XRP`
	} `json:"collateralRatioConfigList"`
	CurrencyLiquidationList []struct {
		Currency string `json:"currency"` // Coin name
		LiquidationOrder int64 `json:"liquidationOrder"` // Liquidation order
	} `json:"currencyLiquidationList"`
}

// GET /v5/crypto-loan-common/loanable-data
type GetCryptoLoanCommonLoanableDataRequest struct {
	VipLevel string `url:"vipLevel,omitempty"` // Vip level `VIP0`, `VIP1`, `VIP2`, `VIP3`, `VIP4`, `VIP5`, `VIP99`(supreme VIP) `PRO1`, `PRO2`, `PRO3`, `PRO4`, `PRO5`, `PRO6`
	Currency string `url:"currency,omitempty"` // Coin name, uppercase only
}

type GetCryptoLoanCommonLoanableDataResponse struct {
	List []struct {
		Currency string `json:"currency"` // Coin name
		FixedBorrowable bool `json:"fixedBorrowable"` // Whether support fixed loan
		FixedBorrowingAccuracy int64 `json:"fixedBorrowingAccuracy"` // Coin precision for fixed loan
		FlexibleBorrowable bool `json:"flexibleBorrowable"` // Whether support flexible loan
		FlexibleBorrowingAccuracy int64 `json:"flexibleBorrowingAccuracy"` // Coin precision for flexible loan
		MaxBorrowingAmount string `json:"maxBorrowingAmount"` // Max borrow limit
		MinFixedBorrowingAmount string `json:"minFixedBorrowingAmount"` // Minimum amount for each fixed loan order
		MinFlexibleBorrowingAmount string `json:"minFlexibleBorrowingAmount"` // Minimum amount for each flexible loan order
		VipLevel string `json:"vipLevel"` // Vip level
		FlexibleAnnualizedInterestRate int64 `json:"flexibleAnnualizedInterestRate"` // The annualized interest rate for flexible borrowing. If the loan currency does not support flexible borrowing, it will always be """"
		AnnualizedInterestRate7D string `json:"annualizedInterestRate7D"` // The lowest annualized interest rate for fixed borrowing for 7 days that the market can currently provide. If there is no lending in the current market, then it is empty string
		AnnualizedInterestRate14D string `json:"annualizedInterestRate14D"` // The lowest annualized interest rate for fixed borrowing for 14 days that the market can currently provide. If there is no lending in the current market, then it is empty string
		AnnualizedInterestRate30D string `json:"annualizedInterestRate30D"` // The lowest annualized interest rate for fixed borrowing for 30 days that the market can currently provide. If there is no lending in the current market, then it is empty string
		AnnualizedInterestRate60D string `json:"annualizedInterestRate60D"` // The lowest annualized interest rate for fixed borrowing for 60 days that the market can currently provide. If there is no lending in the current market, then it is empty string
		AnnualizedInterestRate90D string `json:"annualizedInterestRate90D"` // The lowest annualized interest rate for fixed borrowing for 90 days that the market can currently provide. If there is no lending in the current market, then it is empty string
		AnnualizedInterestRate180D string `json:"annualizedInterestRate180D"` // The lowest annualized interest rate for fixed borrowing for 180 days that the market can currently provide. If there is no lending in the current market, then it is empty string
	} `json:"list"`
}

// GET /v5/crypto-loan-common/max-collateral-amount
type GetCryptoLoanCommonMaxCollateralAmountRequest struct {
	Currency string `url:"currency"` // Collateral coin
}

type GetCryptoLoanCommonMaxCollateralAmountResponse struct {
	MaxCollateralAmount string `json:"maxCollateralAmount"` // Maximum reduction amount
}

// GET /v5/crypto-loan-common/position
type GetCryptoLoanCommonPositionRequest struct {
}

type GetCryptoLoanCommonPositionResponse struct {
	BorrowList []struct {
		FixedTotalDebt string `json:"fixedTotalDebt"` // Total debt of fixed loan (coin)
		FixedTotalDebtUSD string `json:"fixedTotalDebtUSD"` // Total debt of fixed loan (USD)
		FlexibleHourlyInterestRate string `json:"flexibleHourlyInterestRate"` // Flebible loan hourly interest rate
		FlexibleTotalDebt string `json:"flexibleTotalDebt"` // Total debt of flexible loan (coin)
		FlexibleTotalDebtUSD string `json:"flexibleTotalDebtUSD"` // Total debt of flexible loan (USD)
		LoanCurrency string `json:"loanCurrency"` // Loan coin
	} `json:"borrowList"`
	CollateralList []struct {
		Amount string `json:"amount"` // Collateral amount in coin
		AmountUSD string `json:"amountUSD"` // Collateral amount in USD (after tierd collateral ratio calculation)
		Currency string `json:"currency"` // Collateral coin
	} `json:"collateralList"`
	Ltv string `json:"ltv"` // LTV
	SupplyList []struct {
		Amount string `json:"amount"` // Supply amount in coin
		AmountUSD string `json:"amountUSD"` // Supply amount in USD
		Currency string `json:"currency"` // Supply coin
	} `json:"supplyList"`
	TotalCollateral string `json:"totalCollateral"` // Total collateral amount (USD)
	TotalDebt string `json:"totalDebt"` // Total debt (fixed + flexible, in USD)
	TotalSupply string `json:"totalSupply"` // Total supply amount (USD)
}

// GET /v5/crypto-loan-fixed/borrow-contract-info
type GetCryptoLoanFixedBorrowContractInfoRequest struct {
	OrderId string `url:"orderId,omitempty"` // Loan order ID
	LoanId string `url:"loanId,omitempty"` // Loan ID
	OrderCurrency string `url:"orderCurrency,omitempty"` // Loan coin name
	Term string `url:"term,omitempty"` // Fixed term `7`: 7 days; `14`: 14 days; `30`: 30 days; `90`: 90 days; `180`: 180 days
	Limit string `url:"limit,omitempty"` // Limit for data size per page. [`1`, `100`]. Default: `10`
	Cursor string `url:"cursor,omitempty"` // Cursor. Use the `nextPageCursor` token from the response to retrieve the next page of the result set
}

type GetCryptoLoanFixedBorrowContractInfoResponse struct {
	List []struct {
		AnnualRate string `json:"annualRate"` // Annual rate for the borrowing
		AutoRepay string `json:"autoRepay"` // `"true"`: enable auto repay, default; `"false"`: disable auto repay
		BorrowCurrency string `json:"borrowCurrency"` // Loan coin
		BorrowTime string `json:"borrowTime"` // Loan order timestamp
		InterestPaid string `json:"interestPaid"` // Paid interest
		LoanId string `json:"loanId"` // Loan contract ID
		OrderId string `json:"orderId"` // Loan order ID
		RepaymentTime string `json:"repaymentTime"` // Time to repay
		ResidualPenaltyInterest string `json:"residualPenaltyInterest"` // Unpaid interest
		ResidualPrincipal string `json:"residualPrincipal"` // Unpaid principal
		Status int64 `json:"status"` // Loan order status `1`: unrepaid; `2`: fully repaid; `3`: overdue
		Term string `json:"term"` // Fixed term `7`: 7 days; `14`: 14 days; `30`: 30 days; `90`: 90 days; `180`: 180 days
	} `json:"list"`
	NextPageCursor string `json:"nextPageCursor"` // Refer to the `cursor` request parameter
}

// GET /v5/crypto-loan-fixed/borrow-order-info
type GetCryptoLoanFixedBorrowOrderInfoRequest struct {
	OrderId string `url:"orderId,omitempty"` // Loan order ID
	OrderCurrency string `url:"orderCurrency,omitempty"` // Loan coin name
	State string `url:"state,omitempty"` // Borrow order status, `1`: matching; `2`: partially filled and cancelled; `3`: Fully filled; `4`: Cancelled
	Term string `url:"term,omitempty"` // Fixed term `7`: 7 days; `14`: 14 days; `30`: 30 days; `90`: 90 days; `180`: 180 days
	Limit string `url:"limit,omitempty"` // Limit for data size per page. [`1`, `100`]. Default: `10`
	Cursor string `url:"cursor,omitempty"` // Cursor. Use the `nextPageCursor` token from the response to retrieve the next page of the result set
}

type GetCryptoLoanFixedBorrowOrderInfoResponse struct {
	List []struct {
		AnnualRate string `json:"annualRate"` // Annual rate for the borrowing
		OrderId int64 `json:"orderId"` // Loan order ID
		OrderTime string `json:"orderTime"` // Order created time
		FilledQty string `json:"filledQty"` // Filled qty
		OrderQty string `json:"orderQty"` // Order qty
		OrderCurrency string `json:"orderCurrency"` // Coin name
		State int64 `json:"state"` // Borrow order status, `1`: matching; `2`: partially filled and cancelled; `3`: Fully filled; `4`: Cancelled; `5`: fail
		Term int64 `json:"term"` // Fixed term `7`: 7 days; `14`: 14 days; `30`: 30 days; `90`: 90 days; `180`: 180 days
	} `json:"list"`
	NextPageCursor string `json:"nextPageCursor"` // Refer to the `cursor` request parameter
}

// GET /v5/crypto-loan-fixed/borrow-order-quote
type GetCryptoLoanFixedBorrowOrderQuoteRequest struct {
	OrderCurrency string `url:"orderCurrency"` // Coin name
	Term string `url:"term,omitempty"` // Fixed term `7`: 7 days; `14`: 14 days; `30`: 30 days; `90`: 90 days; `180`: 180 days
	OrderBy string `url:"orderBy"` // Order by, `apy`: annual rate; `term`; `quantity`
	Sort int64 `url:"sort,omitempty"` // `0`: ascend, default; `1`: descend
	Limit int64 `url:"limit,omitempty"` // Limit for data size per page. [`1`, `100`]. Default: `10`
}

type GetCryptoLoanFixedBorrowOrderQuoteResponse struct {
	List []struct {
		OrderCurrency string `json:"orderCurrency"` // Coin name
		Term int64 `json:"term"` // Fixed term `7`: 7 days; `14`: 14 days; `30`: 30 days; `90`: 90 days; `180`: 180 days
		AnnualRate string `json:"annualRate"` // Annual rate
		Qty string `json:"qty"` // Quantity
	} `json:"list"`
}

// GET /v5/crypto-loan-fixed/repayment-history
type GetCryptoLoanFixedRepaymentHistoryRequest struct {
	RepayId string `url:"repayId,omitempty"` // Repayment order ID
	LoanCurrency string `url:"loanCurrency,omitempty"` // Loan coin name
	Limit string `url:"limit,omitempty"` // Limit for data size per page. [`1`, `100`]. Default: `10`
	Cursor string `url:"cursor,omitempty"` // Cursor. Use the `nextPageCursor` token from the response to retrieve the next page of the result set
}

type GetCryptoLoanFixedRepaymentHistoryResponse struct {
	List []struct {
		Details []struct {
			LoanCurrency string `json:"loanCurrency"` // Loan coin name
			RepayAmount int64 `json:"repayAmount"` // Repay amount
			LoanId string `json:"loanId"` // Loan ID. One repayment may involve multiple loan contracts.
		} `json:"details"`
		LoanCurrency string `json:"loanCurrency"` // Loan coin name
		RepayAmount int64 `json:"repayAmount"` // Repay amount
		RepayId string `json:"repayId"` // Repay order ID
		RepayStatus int64 `json:"repayStatus"` // Status, `1`: success, `2`: processing, `3`: fail
		RepayTime int64 `json:"repayTime"` // Repay time
		RepayType int64 `json:"repayType"` // Repay type, `1`: repay by user; `2`: repay by liquidation; `3`: auto repay; `4`: overdue repay; `5`: repay by delisting; `6`: repay by delay liquidation
	} `json:"list"`
	NextPageCursor string `json:"nextPageCursor"` // Refer to the `cursor` request parameter
}

// GET /v5/crypto-loan-fixed/supply-contract-info
type GetCryptoLoanFixedSupplyContractInfoRequest struct {
	OrderId string `url:"orderId,omitempty"` // Supply order ID
	SupplyId string `url:"supplyId,omitempty"` // Supply contract ID
	SupplyCurrency string `url:"supplyCurrency,omitempty"` // Supply coin name
	Term string `url:"term,omitempty"` // Fixed term `7`: 7 days; `14`: 14 days; `30`: 30 days; `90`: 90 days; `180`: 180 days
	Limit string `url:"limit,omitempty"` // Limit for data size per page. [`1`, `100`]. Default: `10`
	Cursor string `url:"cursor,omitempty"` // Cursor. Use the `nextPageCursor` token from the response to retrieve the next page of the result set
}

type GetCryptoLoanFixedSupplyContractInfoResponse struct {
	List []struct {
		AnnualRate string `json:"annualRate"` // Annual rate for the supply
		SupplyCurrency string `json:"supplyCurrency"` // Supply coin
		SupplyTime string `json:"supplyTime"` // Supply timestamp
		SupplyAmount string `json:"supplyAmount"` // Supply amount
		InterestPaid string `json:"interestPaid"` // Paid interest
		SupplyId string `json:"supplyId"` // Supply contract ID
		OrderId string `json:"orderId"` // Supply order ID
		RedemptionTime string `json:"redemptionTime"` // Planned time to redeem
		PenaltyInterest string `json:"penaltyInterest"` // Overdue interest
		ActualRedemptionTime string `json:"actualRedemptionTime"` // Actual time to redeem
		Status int64 `json:"status"` // Supply contract status `1`: Supplying; `2`: Redeemed
		Term string `json:"term"` // Fixed term `7`: 7 days; `14`: 14 days; `30`: 30 days; `90`: 90 days; `180`: 180 days
	} `json:"list"`
	NextPageCursor string `json:"nextPageCursor"` // Refer to the `cursor` request parameter
}

// GET /v5/crypto-loan-fixed/supply-order-info
type GetCryptoLoanFixedSupplyOrderInfoRequest struct {
	OrderId string `url:"orderId,omitempty"` // Supply order ID
	OrderCurrency string `url:"orderCurrency,omitempty"` // Supply coin name
	State string `url:"state,omitempty"` // Supply order status, `1`: matching; `2`: partially filled and cancelled; `3`: Fully filled; `4`: Cancelled
	Term string `url:"term,omitempty"` // Fixed term `7`: 7 days; `14`: 14 days; `30`: 30 days; `90`: 90 days; `180`: 180 days
	Limit string `url:"limit,omitempty"` // Limit for data size per page. [`1`, `100`]. Default: `10`
	Cursor string `url:"cursor,omitempty"` // Cursor. Use the `nextPageCursor` token from the response to retrieve the next page of the result set
}

type GetCryptoLoanFixedSupplyOrderInfoResponse struct {
	List []struct {
		AnnualRate string `json:"annualRate"` // Annual rate for the supply
		OrderId int64 `json:"orderId"` // Supply order ID
		OrderTime string `json:"orderTime"` // Order created time
		FilledQty string `json:"filledQty"` // Filled qty
		OrderQty string `json:"orderQty"` // Order qty
		OrderCurrency string `json:"orderCurrency"` // Coin name
		State int64 `json:"state"` // Supply order status, `1`: matching; `2`: partially filled and cancelled; `3`: Fully filled; `4`: Cancelled; `5`: fail
		Term int64 `json:"term"` // Fixed term `7`: 7 days; `14`: 14 days; `30`: 30 days; `90`: 90 days; `180`: 180 days
	} `json:"list"`
	NextPageCursor string `json:"nextPageCursor"` // Refer to the `cursor` request parameter
}

// GET /v5/crypto-loan-fixed/supply-order-quote
type GetCryptoLoanFixedSupplyOrderQuoteRequest struct {
	OrderCurrency string `url:"orderCurrency"` // Coin name
	Term string `url:"term,omitempty"` // Fixed term `7`: 7 days; `14`: 14 days; `30`: 30 days; `90`: 90 days; `180`: 180 days
	OrderBy string `url:"orderBy"` // Order by, `apy`: annual rate; `term`; `quantity`
	Sort int64 `url:"sort,omitempty"` // `0`: ascend, default; `1`: descend
	Limit int64 `url:"limit,omitempty"` // Limit for data size per page. [`1`, `100`]. Default: `10`
}

type GetCryptoLoanFixedSupplyOrderQuoteResponse struct {
	List []struct {
		OrderCurrency string `json:"orderCurrency"` // Coin name
		Term int64 `json:"term"` // Fixed term `7`: 7 days; `14`: 14 days; `30`: 30 days; `90`: 90 days; `180`: 180 days
		AnnualRate string `json:"annualRate"` // Annual rate
		Qty string `json:"qty"` // Quantity
	} `json:"list"`
}

// GET /v5/crypto-loan-flexible/borrow-history
type GetCryptoLoanFlexibleBorrowHistoryRequest struct {
	OrderId string `url:"orderId,omitempty"` // Loan order ID
	LoanCurrency string `url:"loanCurrency,omitempty"` // Loan coin name
	Limit string `url:"limit,omitempty"` // Limit for data size per page. [`1`, `100`]. Default: `10`
	Cursor string `url:"cursor,omitempty"` // Cursor. Use the `nextPageCursor` token from the response to retrieve the next page of the result set
}

type GetCryptoLoanFlexibleBorrowHistoryResponse struct {
	List []struct {
		BorrowTime int64 `json:"borrowTime"` // The timestamp to borrow
		InitialLoanAmount string `json:"initialLoanAmount"` // Loan amount
		LoanCurrency string `json:"loanCurrency"` // Loan coin
		OrderId string `json:"orderId"` // Loan order ID
		Status int64 `json:"status"` // Loan order status `1`: success; `2`: processing; `3`: fail
	} `json:"list"`
	NextPageCursor string `json:"nextPageCursor"` // Refer to the `cursor` request parameter
}

// GET /v5/crypto-loan-flexible/ongoing-coin
type GetCryptoLoanFlexibleOngoingCoinRequest struct {
	LoanCurrency string `url:"loanCurrency,omitempty"` // Loan coin name
}

type GetCryptoLoanFlexibleOngoingCoinResponse struct {
	List []struct {
		HourlyInterestRate string `json:"hourlyInterestRate"` // Latest hourly flexible interest rate
		LoanCurrency string `json:"loanCurrency"` // Loan coin
		TotalDebt string `json:"totalDebt"` // Unpaid principal and interest
	} `json:"list"`
}

// GET /v5/crypto-loan-flexible/repayment-history
type GetCryptoLoanFlexibleRepaymentHistoryRequest struct {
	RepayId string `url:"repayId,omitempty"` // Repayment tranaction ID
	LoanCurrency string `url:"loanCurrency,omitempty"` // Loan coin name
	Limit string `url:"limit,omitempty"` // Limit for data size per page. [`1`, `100`]. Default: `10`
	Cursor string `url:"cursor,omitempty"` // Cursor. Use the `nextPageCursor` token from the response to retrieve the next page of the result set
}

type GetCryptoLoanFlexibleRepaymentHistoryResponse struct {
	List []struct {
		LoanCurrency string `json:"loanCurrency"` // Loan coin
		RepayAmount string `json:"repayAmount"` // Repayment amount
		RepayId string `json:"repayId"` // Repayment transaction ID
		RepayStatus int64 `json:"repayStatus"` // Repayment status, `1`: success; `2`: processing; `3`: fail
		RepayTime int64 `json:"repayTime"` // Repay timestamp
		RepayType int64 `json:"repayType"` // Repayment type, `1`: repay by user; `2`: repay by liquidation; `5`: repay by delisting; `6`: repay by delay liquidation
	} `json:"list"`
	NextPageCursor string `json:"nextPageCursor"` // Refer to the `cursor` request parameter
}

// POST /v5/crypto-loan-common/adjust-ltv
type PostCryptoLoanCommonAdjustLtvRequest struct {
	Currency string `json:"currency"` // Collateral coin
	Amount string `json:"amount"` // Adjustment amount
	Direction string `json:"direction"` // `0`: add collateral; `1`: reduce collateral
}

type PostCryptoLoanCommonAdjustLtvResponse struct {
	AdjustId int64 `json:"adjustId"` // Collateral adjustment transaction ID
}

// POST /v5/crypto-loan-fixed/borrow
type PostCryptoLoanFixedBorrowRequest struct {
	OrderCurrency string `json:"orderCurrency"` // Currency to borrow
	OrderAmount string `json:"orderAmount"` // Amount to borrow
	AnnualRate string `json:"annualRate"` // Customizable annual interest rate, e.g., `0.02` means 2%
	Term string `json:"term"` // Fixed term `7`: 7 days; `14`: 14 days; `30`: 30 days; `90`: 90 days; `180`: 180 days
	AutoRepay string `json:"autoRepay,omitempty"` // Enable Auto-Repay to have assets in your Funding Account automatically repay your loan upon Borrowing order expiration, preventing overdue penalties. Ensure your Funding Account maintains sufficient amount for repayment to avoid automatic repayment failures. `"true"`: enable, default; `"false"`: disable
	CollateralList string `json:"collateralList,omitempty"` // Collateral coin list, supports putting up to 100 currency in the array
}

type PostCryptoLoanFixedBorrowResponse struct {
	OrderId string `json:"orderId"` // Loan order ID
}

// POST /v5/crypto-loan-fixed/borrow-order-cancel
type PostCryptoLoanFixedBorrowOrderCancelRequest struct {
	OrderId string `json:"orderId"` // Order ID of fixed borrow order
}

type PostCryptoLoanFixedBorrowOrderCancelResponse struct {
	// TODO: fill in response fields parsed from docs
}

// POST /v5/crypto-loan-fixed/fully-repay
type PostCryptoLoanFixedFullyRepayRequest struct {
	LoanId string `json:"loanId,omitempty"` // Loan contract ID. Either `loanId` or `loanCurrency` needs to be passed
	LoanCurrency string `json:"loanCurrency,omitempty"` // Loan coin. Either `loanId` or `loanCurrency` needs to be passed
}

type PostCryptoLoanFixedFullyRepayResponse struct {
	RepayId string `json:"repayId"` // Repayment transaction ID
}

// POST /v5/crypto-loan-fixed/supply
type PostCryptoLoanFixedSupplyRequest struct {
	OrderCurrency string `json:"orderCurrency"` // Currency to supply
	OrderAmount string `json:"orderAmount"` // Amount to supply
	AnnualRate string `json:"annualRate"` // Customizable annual interest rate, e.g., `0.02` means 2%
	Term string `json:"term"` // Fixed term `7`: 7 days; `14`: 14 days; `30`: 30 days; `90`: 90 days; `180`: 180 days
}

type PostCryptoLoanFixedSupplyResponse struct {
	OrderId string `json:"orderId"` // Supply order ID
}

// POST /v5/crypto-loan-fixed/supply-order-cancel
type PostCryptoLoanFixedSupplyOrderCancelRequest struct {
	OrderId string `json:"orderId"` // Order ID of fixed supply order
}

type PostCryptoLoanFixedSupplyOrderCancelResponse struct {
	// TODO: fill in response fields parsed from docs
}

// POST /v5/crypto-loan-flexible/borrow
type PostCryptoLoanFlexibleBorrowRequest struct {
	LoanCurrency string `json:"loanCurrency"` // Loan coin name
	LoanAmount string `json:"loanAmount"` // Amount to borrow
	CollateralList string `json:"collateralList,omitempty"` // Collateral coin list, supports putting up to 100 currency in the array
}

type PostCryptoLoanFlexibleBorrowResponse struct {
	OrderId string `json:"orderId"` // Loan order ID
}

// POST /v5/crypto-loan-flexible/repay
type PostCryptoLoanFlexibleRepayRequest struct {
	LoanCurrency string `json:"loanCurrency"` // Loan currency
	Amount string `json:"amount"` // Repay amount
}

type PostCryptoLoanFlexibleRepayResponse struct {
	RepayId string `json:"repayId"` // Repayment transaction ID
}

