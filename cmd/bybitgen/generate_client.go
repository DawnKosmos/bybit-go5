package main

import (
	"fmt"
	"os"
	"path/filepath"
	"strings"
)

func writeClientFile(rootDir, folder string, eps []Endpoint) error {
	var b strings.Builder
	b.WriteString("// Code generated by bybitgen; DO NOT EDIT.\n")
	b.WriteString("package bybit\n\n")
	b.WriteString("import (\n\t\"github.com/DawnKosmos/bybit-go5/models\"\n)\n\n")
	
	for _, ep := range eps {
		// Generate category-specific methods if this endpoint has category-dependent responses
		if ep.HasCategoryParam && len(ep.CategoryResponses) > 0 {
			// Generate category-specific methods
			for category, _ := range ep.CategoryResponses {
				categoryName := strings.Title(category)
				if category == "linear" {
					categoryName = "Linear"
				} else if category == "inverse" {
					categoryName = "Inverse"
				}
				
				methodName := ep.Name + categoryName
				b.WriteString(fmt.Sprintf("// %s %s for category: %s\n", ep.Method, ep.Path, category))
				b.WriteString(fmt.Sprintf("func (c *Client) %s(req models.%sRequest) (*models.%s%sResponse, error) {\n", methodName, ep.Name, ep.Name, categoryName))
				
				// Override the category in the request
				b.WriteString(fmt.Sprintf("\treq.Category = \"%s\"\n", category))
				
				b.WriteString(fmt.Sprintf("\tvar respBody models.Response[models.%s%sResponse]\n", ep.Name, categoryName))
				if ep.Method == "GET" {
					b.WriteString(fmt.Sprintf("\tif err := c.GET(\"%s\", req, &respBody); err != nil { return nil, err }\n", ep.Path))
				} else {
					b.WriteString(fmt.Sprintf("\tif err := c.POST(\"%s\", req, &respBody); err != nil { return nil, err }\n", ep.Path))
				}
				b.WriteString("\treturn &respBody.Result, nil\n}\n\n")
			}
			
			// Also generate the generic method for flexibility
			b.WriteString(fmt.Sprintf("// %s %s (generic - use category-specific methods for type safety)\n", ep.Method, ep.Path))
			b.WriteString(fmt.Sprintf("func (c *Client) %s(req models.%sRequest) (*models.%sResponse, error) {\n", ep.Name, ep.Name, ep.Name))
			b.WriteString(fmt.Sprintf("\tvar respBody models.Response[models.%sResponse]\n", ep.Name))
			if ep.Method == "GET" {
				b.WriteString(fmt.Sprintf("\tif err := c.GET(\"%s\", req, &respBody); err != nil { return nil, err }\n", ep.Path))
			} else {
				b.WriteString(fmt.Sprintf("\tif err := c.POST(\"%s\", req, &respBody); err != nil { return nil, err }\n", ep.Path))
			}
			b.WriteString("\treturn &respBody.Result, nil\n}\n\n")
		} else {
			// Standard method generation (not category-dependent)
			b.WriteString(fmt.Sprintf("// %s %s\n", ep.Method, ep.Path))
			b.WriteString(fmt.Sprintf("func (c *Client) %s(req models.%sRequest) (*models.%sResponse, error) {\n", ep.Name, ep.Name, ep.Name))
			b.WriteString(fmt.Sprintf("\tvar respBody models.Response[models.%sResponse]\n", ep.Name))
			if ep.Method == "GET" {
				b.WriteString(fmt.Sprintf("\tif err := c.GET(\"%s\", req, &respBody); err != nil { return nil, err }\n", ep.Path))
			} else {
				b.WriteString(fmt.Sprintf("\tif err := c.POST(\"%s\", req, &respBody); err != nil { return nil, err }\n", ep.Path))
			}
			b.WriteString("\treturn &respBody.Result, nil\n}\n\n")
		}
	}
	file := filepath.Join(rootDir, fmt.Sprintf("client_%s.go", folder))
	return os.WriteFile(file, []byte(b.String()), 0o644)
}
