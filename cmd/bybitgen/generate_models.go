package main

import (
	"fmt"
	"os"
	"path/filepath"
	"strings"
)

func writeModelsFile(modelsDir, folder string, eps []Endpoint) error {
	var b strings.Builder
	b.WriteString("// Code generated by bybitgen; DO NOT EDIT.\n")
	b.WriteString("package models\n\n")
	for _, ep := range eps {
		b.WriteString(fmt.Sprintf("// %s %s\n", ep.Method, ep.Path))
		b.WriteString(fmt.Sprintf("type %sRequest struct {\n", ep.Name))
		for _, p := range ep.Params {
			goType := mapType(p.Type)
			field := toExported(p.Name)
			tagName := "json"
			if ep.Method == "GET" {
				tagName = "url"
			}
			tag := fmt.Sprintf("%s:\"%s\"", tagName, p.Name)
			if !p.Required {
				tag = fmt.Sprintf("%s:\"%s,omitempty\"", tagName, p.Name)
			}
			// comment on field
			if p.Comment != "" {
				b.WriteString(fmt.Sprintf("\t%s %s `%s` // %s\n", field, goType, tag, cleanComment(p.Comment)))
			} else {
				b.WriteString(fmt.Sprintf("\t%s %s `%s`\n", field, goType, tag))
			}
		}
		b.WriteString("}\n\n")
		b.WriteString(fmt.Sprintf("type %sResponse struct {\n\t// TODO: fill in response fields parsed from docs\n}\n\n", ep.Name))
	}
	file := filepath.Join(modelsDir, fmt.Sprintf("%s.go", folder))
	return os.WriteFile(file, []byte(b.String()), 0o644)
}

func writeModelsBase(modelsDir string) error {
	const base = `// Code generated by bybitgen; DO NOT EDIT.
package models

type ReturnCode interface {
	Return() (code int, msg string)
}

type Response[T any] struct {
	RetCode int    ` + "`json:\"retCode\"`" + `
	RetMsg  string ` + "`json:\"retMsg\"`" + `
	Result  T      ` + "`json:\"result\"`" + `
	Time    int64  ` + "`json:\"time\"`" + `
}

func (r *Response[T]) Return() (code int, msg string) {
	return r.RetCode, r.RetMsg
}

type ResponseBatch[T any] struct {
	RetCode    int    ` + "`json:\"retCode\"`" + `
	RetMsg     string ` + "`json:\"retMsg\"`" + `
	Result     T      ` + "`json:\"result\"`" + `
	RetExtInfo struct {
		List []struct {
			Code int    ` + "`json:\"code\"`" + `
			Msg  string ` + "`json:\"msg\"`" + `
		} ` + "`json:\"list\"`" + `
	} ` + "`json:\"retExtInfo\"`" + `
	Time int64 ` + "`json:\"time\"`" + `
}

func (r *ResponseBatch[T]) Return() (code int, msg string) {
	msg = r.RetMsg
	for _, v := range r.RetExtInfo.List {
		msg += "|" + v.Msg
	}
	return r.RetCode, msg
}
`
	return os.WriteFile(filepath.Join(modelsDir, "zbase_result.go"), []byte(base), 0o644)
}
